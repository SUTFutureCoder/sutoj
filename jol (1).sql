-- phpMyAdmin SQL Dump
-- version 3.4.10.1deb1
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2014 年 01 月 25 日 23:16
-- 服务器版本: 5.5.35
-- PHP 版本: 5.3.10-1ubuntu3.9

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `jol`
--

-- --------------------------------------------------------

--
-- 表的结构 `compileinfo`
--

CREATE TABLE IF NOT EXISTS `compileinfo` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `error` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `compileinfo`
--

INSERT INTO `compileinfo` (`solution_id`, `error`) VALUES
(53, 'Main.cc:2:11: error: ''::main'' must return ''int''\n'),
(81, 'Main.cc:2:18: fatal error: vecter: No such file or directory\ncompilation terminated.\n'),
(130, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(146, 'Main.cc: In function ''int main()'':\nMain.cc:5:10: error: expected ''}'' at end of input\n'),
(154, 'Main.cc:4:9: warning: missing terminating " character [enabled by default]\nMain.cc:4:2: error: missing terminating " character\nMain.cc:5:2: warning: missing terminating " character [enabled by default]\nMain.cc:5:2: error: missing terminating " character\nMain.cc: In function ''int main()'':\nMain.cc:6:2: error: expected primary-expression before ''return''\n'),
(196, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(215, 'Main.cc:3:11: error: ''::main'' must return ''int''\n'),
(226, 'Main.cc: In function ''int main()'':\nMain.cc:11:28: error: ''memset'' was not declared in this scope\n'),
(239, 'Main.cc: In function ''int main()'':\nMain.cc:29:2: error: expected ''}'' at end of input\n'),
(265, 'Main.cc:3:11: error: ''::main'' must return ''int''\n'),
(272, 'Main.cc:3:11: error: ''::main'' must return ''int''\n'),
(294, 'Main.cc:1:1: error: ''Woart'' does not name a type\n'),
(330, 'Main.cc:6:11: error: size of array ''s'' is too large\nMain.cc: In function ''int main()'':\nMain.cc:17:15: error: ''s'' was not declared in this scope\nMain.cc:19:10: error: ''s'' was not declared in this scope\n'),
(358, 'Main.cc:14:2: error: expected unqualified-id before numeric constant\n'),
(374, 'Main.cc: In function ''int main()'':\nMain.cc:12:2: error: ''__int64'' was not declared in this scope\nMain.cc:12:10: error: expected '';'' before ''n''\nMain.cc:14:20: error: ''n'' was not declared in this scope\nMain.cc:17:19: warning: format ''%d'' expects argument of type ''int*'', but argument 2 has type ''int'' [-Wformat]\n'),
(392, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(419, 'Main.cc: In function ''int main()'':\nMain.cc:10:4: error: expected '';'' before ''for''\nMain.cc:10:15: warning: statement has no effect [-Wunused-value]\nMain.cc:10:19: error: expected '';'' before '')'' token\nMain.cc:5:14: warning: unused variable ''temp'' [-Wunused-variable]\n'),
(421, 'Main.cc:1:22: fatal error: iostream.h: No such file or directory\ncompilation terminated.\n'),
(439, 'Main.cc:5:11: error: ''::main'' must return ''int''\n'),
(440, 'Main.c:2:18: fatal error: string: No such file or directory\ncompilation terminated.\n'),
(450, 'Main.cc:3:6: warning: ISO C++ forbids declaration of ''main'' with no type [-Wreturn-type]\nMain.cc: In function ''int main()'':\nMain.cc:5:17: error: ''signed'' or ''unsigned'' invalid for ''i''\nMain.cc:5:19: error: ''signed'' or ''unsigned'' invalid for ''j''\nMain.cc:10:15: warning: format ''%d'' expects argument of type ''int*'', but argument 2 has type ''double*'' [-Wformat]\nMain.cc:13:21: error: invalid operands of types ''double [3]'' and ''double'' to binary ''operator+''\nMain.cc:15:30: error: invalid types ''double [3][double]'' for array subscript\n'),
(456, 'Main.cc:3:6: warning: ISO C++ forbids declaration of ''main'' with no type [-Wreturn-type]\nMain.cc: In function ''int main()'':\nMain.cc:5:17: error: ''signed'' or ''unsigned'' invalid for ''i''\nMain.cc:5:19: error: ''signed'' or ''unsigned'' invalid for ''j''\nMain.cc:10:15: warning: format ''%d'' expects argument of type ''int*'', but argument 2 has type ''double*'' [-Wformat]\nMain.cc:13:21: error: invalid operands of types ''double [3]'' and ''double'' to binary ''operator+''\nMain.cc:15:30: error: invalid types ''double [3][double]'' for array subscript\n'),
(462, 'Main.cc: In function ''int main()'':\nMain.cc:5:10: error: expected ''}'' at end of input\n'),
(490, 'Main.c: In function ''main'':\nMain.c:5:10: error: both ''unsigned'' and ''double'' in declaration specifiers\nMain.c:13:3: warning: format ''%d'' expects argument of type ''int *'', but argument 2 has type ''double *'' [-Wformat]\nMain.c:15:2: warning: format ''%d'' expects argument of type ''int'', but argument 2 has type ''double'' [-Wformat]\n'),
(496, 'Main.c: In function ''main'':\nMain.c:10:2: warning: format ''%d'' expects argument of type ''int *'', but argument 2 has type ''double *'' [-Wformat]\nMain.c:13:20: error: invalid operands to binary + (have ''double *'' and ''long double'')\nMain.c:15:22: error: array subscript is not an integer\n'),
(505, 'Main.cc: In function ''int main()'':\nMain.cc:6:7: error: storage size of ''f'' isn''t known\nMain.cc:7:7: error: storage size of ''g'' isn''t known\n'),
(536, 'Main.c: In function ''p'':\nMain.c:28:10: error: expected expression before ''int''\nMain.c:29:2: warning: control reaches end of non-void function [-Wreturn-type]\n'),
(551, 'Main.c: In function ''main'':\nMain.c:6:5: error: array size missing in ''f''\nMain.c:7:5: error: array size missing in ''g''\nMain.c:5:10: warning: variable ''p'' set but not used [-Wunused-but-set-variable]\n'),
(563, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(565, 'Main.cc:2:16: fatal error: mem.h: No such file or directory\ncompilation terminated.\n'),
(571, 'Main.cc:1:1: error: ''include'' does not name a type\n'),
(581, 'Main.cc:1:1: error: ''include'' does not name a type\n'),
(641, 'Main.cc:2:16: fatal error: mem.h: No such file or directory\ncompilation terminated.\n'),
(660, 'Main.cc: In function ''int main()'':\nMain.cc:13:24: error: lvalue required as left operand of assignment\n'),
(681, 'Main.cc:2:6: warning: ISO C++ forbids declaration of ''main'' with no type [-Wreturn-type]\nMain.cc: In function ''int main()'':\nMain.cc:7:1: error: expected '';'' before ''}'' token\n'),
(685, 'Main.cc: In function ''void mi()'':\nMain.cc:12:24: error: ''memset'' was not declared in this scope\nMain.cc:13:16: error: ''strlen'' was not declared in this scope\n'),
(706, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(744, 'Main.cc: In function ''int main()'':\nMain.cc:46:8: error: ''i'' was not declared in this scope\n'),
(745, 'Main.cc:3:32: error: ISO C++ forbids declaration of ''cmp'' with no type [-fpermissive]\nMain.cc: In function ''int main()'':\nMain.cc:9:8: warning: unused variable ''j'' [-Wunused-variable]\n'),
(780, 'Main.cc:5:11: error: ''::main'' must return ''int''\n'),
(793, 'Main.cc: In function ''int main()'':\nMain.cc:7:13: error: no match for ''operator>>'' in ''std::cin.std::basic_istream<_CharT, _Traits>::operator>> [with _CharT = char, _Traits = std::char_traits<char>]((* & a[i])) >> std::endl''\nMain.cc:7:13: note: candidates are:\n/usr/include/c++/4.6/istream:122:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:122:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&) {aka std::basic_istream<char>& (*)(std::basic_istream<char>&)}''\n/usr/include/c++/4.6/istream:126:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>, std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\n/usr/include/c++/4.6/istream:126:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}''\n/usr/include/c++/4.6/istream:133:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:133:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''std::ios_base& (*)(std::ios_base&)''\n/usr/include/c++/4.6/istream:169:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:169:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''bool&''\n/usr/include/c++/4.6/istream:173:7: note: std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.6/istream:173:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''short int&''\n/usr/include/c++/4.6/istream:176:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:176:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''short unsigned int&''\n/usr/include/c++/4.6/istream:180:7: note: std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.6/istream:180:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''int&''\n/usr/include/c++/4.6/istream:183:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:183:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''unsigned int&''\n/usr/include/c++/4.6/istream:187:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:187:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''long int&''\n/usr/include/c++/4.6/istream:191:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:191:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''long unsigned int&''\n/usr/include/c++/4.6/istream:196:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:196:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''long long int&''\n/usr/include/c++/4.6/istream:200:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:200:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''long long unsigned int&''\n/usr/include/c++/4.6/istream:205:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:205:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''float&''\n/usr/include/c++/4.6/istream:209:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:209:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''double&''\n/usr/include/c++/4.6/istream:213:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:213:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''long double&''\n/usr/include/c++/4.6/istream:217:7: note: std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\n/usr/include/c++/4.6/istream:217:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''void*&''\n/usr/include/c++/4.6/istream:241:7: note: std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char, _Traits = std::char_traits<char>, std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\n/usr/include/c++/4.6/istream:241:7: note:   no known conversion for argument 1 from ''<unresolved overloaded function type>'' to ''std::basic_istream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}''\n/usr/include/c++/4.6/bits/basic_string.tcc:998:5: note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT, _Traits, _Alloc>&)\n/usr/include/c++/4.6/istream:752:5: note: std::basic_istream<_CharT2, _Traits2>& std::operator>>(std::basic_istream<_CharT2, _Traits2>&, _CharT2*) [with _CharT2 = char, _Traits2 = std::char_traits<char>, _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.6/istream:752:5: note:   no known conversion for argument 2 from ''<unresolved overloaded function type>'' to ''char*''\n/usr/include/c++/4.6/bits/istream.tcc:925:5: note: std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.6/bits/istream.tcc:925:5: note:   no known conversion for argument 2 from ''<unresolved overloaded function type>'' to ''char&''\n/usr/include/c++/4.6/istream:709:5: note: template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\n/usr/include/c++/4.6/istream:714:5: note: template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\n/usr/include/c++/4.6/istream:756:5: note: template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\n/usr/include/c++/4.6/istream:761:5: note: template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\n/usr/include/c++/4.6/istream:852:5: note: template<class _CharT, class _Traits, class _Tp> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&&, _Tp&)\n'),
(828, 'Main.cc:1:1: error: expected unqualified-id before numeric constant\n'),
(830, 'Main.cc: In function ''int main()'':\nMain.cc:39:1: error: expected ''}'' at end of input\n'),
(839, 'Main.cc:3:32: error: ISO C++ forbids declaration of ''cmp'' with no type [-fpermissive]\n'),
(868, 'Main.cc:3:11: error: ''::main'' must return ''int''\nMain.cc: In function ''int main()'':\nMain.cc:6:9: warning: unused variable ''j'' [-Wunused-variable]\n'),
(878, 'Main.c:2:6: warning: return type of ''main'' is not ''int'' [-Wmain]\nMain.c: In function ''main'':\nMain.c:5:13: error: expected expression before ''%'' token\n'),
(892, 'Main.cc: In function ''int main()'':\nMain.cc:13:10: error: ''gatchar'' was not declared in this scope\nMain.cc:16:7: error: ''std::istream'' has no member named ''gatline''\nMain.cc:10:8: warning: unused variable ''j'' [-Wunused-variable]\n'),
(897, 'Main.cc:2:11: error: ''::main'' must return ''int''\n'),
(910, 'Main.cc:3:11: error: ''::main'' must return ''int''\n'),
(961, 'Main.cc: In function ''int main()'':\nMain.cc:9:29: error: ''memset'' was not declared in this scope\n'),
(965, 'Main.cc: In function ''int main()'':\nMain.cc:8:28: error: ''memset'' was not declared in this scope\nMain.cc:31:9: warning: statement has no effect [-Wunused-value]\n'),
(1027, 'Main.cc: In function ''int main()'':\nMain.cc:7:22: error: ''memset'' was not declared in this scope\nMain.cc:23:9: warning: unknown escape sequence: ''\\m'' [enabled by default]\n'),
(1043, 'Main.c:2:17: fatal error: string: No such file or directory\ncompilation terminated.\n'),
(1045, 'Main.cc: In function ''int main()'':\nMain.cc:28:10: error: expected ''}'' at end of input\n'),
(1048, 'Main.cc: In function ''int main()'':\nMain.cc:16:17: error: ''strlen'' was not declared in this scope\n'),
(1068, 'Main.cc:1:1: error: ''C'' does not name a type\nMain.cc: In function ''int main()'':\nMain.cc:5:17: error: ''printf'' was not declared in this scope\n'),
(1071, 'Main.cc:2:11: error: ''::main'' must return ''int''\nMain.cc: In function ''int main()'':\nMain.cc:7:15: warning: format ''%d'' expects argument of type ''int*'', but argument 2 has type ''float*'' [-Wformat]\n'),
(1087, 'Main.cc:1:1: error: ''Input'' does not name a type\nMain.cc: In function ''int main()'':\nMain.cc:5:51: error: ''printf'' was not declared in this scope\n'),
(1172, 'Main.cc:4:9: warning: missing terminating " character [enabled by default]\nMain.cc:4:2: error: missing terminating " character\nMain.cc: In function ''int main()'':\nMain.cc:5:2: error: expected primary-expression before ''return''\n'),
(1210, 'Main.cc: In function ''int main()'':\nMain.cc:3:26: error: ''printf'' was not declared in this scope\n'),
(1217, 'Main.cc: In function ''int main()'':\nMain.cc:3:26: error: ''printf'' was not declared in this scope\n'),
(1231, 'Main.c: In function ''main'':\nMain.c:8:3: error: ''s'' undeclared (first use in this function)\nMain.c:8:3: note: each undeclared identifier is reported only once for each function it appears in\nMain.c:5:12: warning: variable ''t'' set but not used [-Wunused-but-set-variable]\n'),
(1278, 'Main.cc: In function ''int main()'':\nMain.cc:9:5: error: redefinition of ''int main()''\nMain.cc:2:5: error: ''int main()'' previously defined here\n'),
(1320, 'Main.c: In function ''main'':\nMain.c:5:8: error: ''i'' undeclared (first use in this function)\nMain.c:5:8: note: each undeclared identifier is reported only once for each function it appears in\nMain.c:5:11: error: ''j'' undeclared (first use in this function)\nMain.c:5:6: warning: unused variable ''a'' [-Wunused-variable]\n'),
(1327, 'Main.cc: In function ''int main()'':\nMain.cc:5:1: error: ''cout'' was not declared in this scope\nMain.cc:5:1: note: suggested alternative:\n/usr/include/c++/4.6/iostream:62:18: note:   ''std::cout''\nMain.cc:5:10: error: ''endl'' was not declared in this scope\nMain.cc:5:10: note: suggested alternative:\n/usr/include/c++/4.6/ostream:543:5: note:   ''std::endl''\n'),
(1410, 'Main.cc:5:9: warning: missing terminating " character [enabled by default]\nMain.cc:5:2: error: missing terminating " character\nMain.cc: In function ''int main()'':\nMain.cc:6:2: error: expected primary-expression before ''return''\n'),
(1437, 'Main.cc:2:11: error: ''::main'' must return ''int''\n'),
(1451, 'Main.cc: In function ''int main()'':\nMain.cc:9:5: error: redefinition of ''int main()''\nMain.cc:2:5: error: ''int main()'' previously defined here\n'),
(1541, 'Main.cc:26:11: error: ''::main'' must return ''int''\n'),
(1561, 'Main.cc: In function ''int main()'':\nMain.cc:15:1: error: ''count'' was not declared in this scope\n'),
(1563, 'Main.cc:26:11: error: ''::main'' must return ''int''\n'),
(1573, 'Main.cc: In function ''int main()'':\nMain.cc:15:1: error: ''count'' was not declared in this scope\n'),
(1576, 'Main.cc: In function ''int main()'':\nMain.cc:10:26: error: ''memset'' was not declared in this scope\n'),
(1577, 'Main.cc:2:18: fatal error: stdlib: No such file or directory\ncompilation terminated.\n'),
(1580, 'Main.cc: In function ''int main()'':\nMain.cc:11:26: error: ''memset'' was not declared in this scope\n'),
(1584, 'Main.cc: In function ''int main()'':\nMain.cc:15:1: error: ''count'' was not declared in this scope\n');

-- --------------------------------------------------------

--
-- 表的结构 `contest`
--

CREATE TABLE IF NOT EXISTS `contest` (
  `contest_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  `pre_start_time` datetime NOT NULL,
  `pre_end_time` datetime NOT NULL,
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `description` int(11) DEFAULT NULL,
  `private` tinyint(4) NOT NULL DEFAULT '0',
  `langmask` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'bits for LANG to mask',
  PRIMARY KEY (`contest_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=201312 ;

--
-- 转存表中的数据 `contest`
--

INSERT INTO `contest` (`contest_id`, `title`, `start_time`, `end_time`, `pre_start_time`, `pre_end_time`, `defunct`, `description`, `private`, `langmask`) VALUES
(0, 'oldman_contest', '2014-11-23 10:00:00', '2014-11-23 15:00:00', '2014-11-20 12:00:00', '2014-11-20 14:00:00', 'N', 0, 0, 0),
(1, 'freshman_contest', '2014-11-23 10:00:00', '2014-11-23 15:00:00', '2014-11-20 12:00:00', '2014-11-20 14:00:00', 'N', 0, 0, 0),
(201311, 'contesttimectrl', '2014-11-23 10:00:00', '2014-11-23 15:00:00', '0000-00-00 00:00:00', '0000-00-00 00:00:00', 'N', 0, 0, 0),
(4, 'reg', '2013-11-12 00:00:00', '2014-11-19 23:59:59', '0000-00-00 00:00:00', '0000-00-00 00:00:00', 'N', NULL, 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `custominput`
--

CREATE TABLE IF NOT EXISTS `custominput` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `input_text` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 表的结构 `loginlog`
--

CREATE TABLE IF NOT EXISTS `loginlog` (
  `user_id` varchar(48) NOT NULL DEFAULT '',
  `password` varchar(40) DEFAULT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  `SAC` mediumtext NOT NULL,
  `cheater` int(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `loginlog`
--

INSERT INTO `loginlog` (`user_id`, `password`, `ip`, `time`, `SAC`, `cheater`) VALUES
('team 6', 'a60937eba57758ed45b6d3e91e8659f3', '10.16.20.89', '2013-11-23 09:38:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team77', 'e137474d5b516debb12e9f9a39220841', '10.16.20.27', '2013-11-23 09:38:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('black', 'a60937eba57758ed45b6d3e91e8659f3', '10.16.20.89', '2013-11-23 09:38:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', 'c1d4e10407dd7c54dbc69ff5fe49f99b', '10.16.20.16', '2013-11-23 09:38:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team70', '304e4b11262aee3898ce558fdecbc7c1', '10.16.20.72', '2013-11-23 09:38:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team70', '304e4b11262aee3898ce558fdecbc7c1', '10.16.20.72', '2013-11-23 09:38:56', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team18', '6c5fa923126e48107a3957d06988bcc5', '10.16.20.109', '2013-11-23 09:38:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team77', '89ccc8f67f1706396e3ed5e7246eddbd', '10.16.20.27', '2013-11-23 09:39:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team70', '304e4b11262aee3898ce558fdecbc7c1', '10.16.20.72', '2013-11-23 09:40:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 09:40:13', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 09:40:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team77', '89ccc8f67f1706396e3ed5e7246eddbd', '10.16.20.27', '2013-11-23 09:40:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v2', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.31', '2013-11-23 09:40:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('130405205', '9a4946c3e774944288cf4b9f4157d1ef', '175.167.128.112', '2013-11-23 09:40:47', 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_2 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A501 Safari/9537.53', 0),
('v2', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.31', '2013-11-23 09:41:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team32', '92606fdd292113ce1e2bcc9fad6f32fc', '10.16.20.128', '2013-11-23 09:43:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team32', 'd32da023dc963a2426539bc15b6ab858', '10.16.20.128', '2013-11-23 09:43:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', 'c33367701511b4f6020ec61ded352059', '10.16.20.111', '2013-11-23 09:43:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team32', 'd32da023dc963a2426539bc15b6ab858', '10.16.20.128', '2013-11-23 09:43:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('TEAM 72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:44:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:45:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:45:16', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.80', '2013-11-23 09:45:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:45:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:46:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.80', '2013-11-23 09:46:10', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 72', '52c69e3a57331081823331c4e69d3f2e', '10.16.20.14', '2013-11-23 09:46:32', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 72', '52c69e3a57331081823331c4e69d3f2e', '10.16.20.14', '2013-11-23 09:46:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('72', '52c69e3a57331081823331c4e69d3f2e', '10.16.20.14', '2013-11-23 09:46:50', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', '77d34ee3a5caded435148585e6851f73', '10.16.20.142', '2013-11-23 09:47:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team72', '52c69e3a57331081823331c4e69d3f2e', '10.16.20.14', '2013-11-23 09:47:13', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team72', '6b34fe24ac2ff8103f6fce1f0da2ef57', '10.16.20.14', '2013-11-23 09:47:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', '77d34ee3a5caded435148585e6851f73', '10.16.20.142', '2013-11-23 09:47:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '453489941fe92e6823a62679c3631261', '10.16.20.53', '2013-11-23 09:47:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '453489941fe92e6823a62679c3631261', '10.16.20.53', '2013-11-23 09:47:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', '77d34ee3a5caded435148585e6851f73', '10.16.20.142', '2013-11-23 09:47:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team49', '91ce53e887f9365647ffba90d726673f', '10.16.20.32', '2013-11-23 09:47:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '2e450ea7a2bac7a1294c69e30475aa97', '10.16.20.53', '2013-11-23 09:47:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team49', '91ce53e887f9365647ffba90d726673f', '10.16.20.32', '2013-11-23 09:47:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team49', '91ce53e887f9365647ffba90d726673f', '10.16.20.32', '2013-11-23 09:48:15', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:48:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:48:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:48:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:49:01', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:49:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 19', '62ea9dda624dbb9d13d0394a6b5a14fa', '10.16.20.107', '2013-11-23 09:49:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team46', '2cad3337425a0d78929e4fd4b597fb89', '10.16.20.101', '2013-11-23 09:49:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team38', '6364d3f0f495b6ab9dcf8d3b5c6e0b01', '10.16.20.118', '2013-11-23 09:49:57', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team16', '847dbf67e9cb8a32599a06584e6a9af7', '10.16.20.113', '2013-11-23 09:50:09', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 46', '2cad3337425a0d78929e4fd4b597fb89', '10.16.20.101', '2013-11-23 09:50:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team33', 'a8bdc6a8fa4028f1da150b48aa3c3b34', '10.16.20.126', '2013-11-23 09:50:12', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E; LBBROWSER)', 0),
('team66', 'f69158a23bc4e98d8d6476873585f027', '10.16.20.22', '2013-11-23 09:50:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team11', 'a150bf3ecd9707a1f828735c17603bc0', '10.16.20.84', '2013-11-23 09:50:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team33', 'a8bdc6a8fa4028f1da150b48aa3c3b34', '10.16.20.126', '2013-11-23 09:50:26', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E; LBBROWSER)', 0),
('team3', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.96', '2013-11-23 09:50:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team74', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.21', '2013-11-23 09:50:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team11', 'a150bf3ecd9707a1f828735c17603bc0', '10.16.20.84', '2013-11-23 09:50:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team74', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.21', '2013-11-23 09:50:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team11', 'a150bf3ecd9707a1f828735c17603bc0', '10.16.20.84', '2013-11-23 09:50:49', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', 'ab89d99b07a0a49f013f7fb04fb1bb8e', '10.16.20.105', '2013-11-23 09:52:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', '12087645eed70d699438ddfa5d780455', '10.16.20.105', '2013-11-23 09:52:49', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', '4338699f34fb214a09e212b4aaa66ef5', '10.16.20.131', '2013-11-23 09:52:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', '85964989611934e09fd33690cd7aa279', '10.16.20.133', '2013-11-23 09:53:01', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', '4338699f34fb214a09e212b4aaa66ef5', '10.16.20.131', '2013-11-23 09:53:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', '91e1331509da3f42cee182d6afd9b719', '10.16.20.133', '2013-11-23 09:53:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:54:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 09:54:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:54:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 09:54:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:54:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.36', '2013-11-23 09:54:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 09:54:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 09:55:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team14', 'ef0b78cbdd4734fcbb9e7774cd79998a', '10.16.20.117', '2013-11-23 09:55:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:55:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:55:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 09:55:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team14', 'fc7fc678608590b123692867f176fe63', '10.16.20.117', '2013-11-23 09:55:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', 'be90b32f3df67c0bc1e265795ceed91c', '10.16.20.142', '2013-11-23 09:56:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('88', '25d55ad283aa400af464c76d713c07ad', '10.16.20.69', '2013-11-23 09:56:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team38', '11b092ed96a6bd08f6a2f42bf65052b1', '10.16.20.118', '2013-11-23 09:56:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team60', 'd7afe4c888969a7eeb4f02540d90c313', '10.16.20.48', '2013-11-23 09:56:59', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team92', '25d55ad283aa400af464c76d713c07ad', '10.16.20.11', '2013-11-23 09:57:10', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team33', '352ff8f369fb4bb0017160982354bd5e', '10.16.20.126', '2013-11-23 09:57:16', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E; LBBROWSER)', 0),
('team60', 'd7afe4c888969a7eeb4f02540d90c313', '10.16.20.48', '2013-11-23 09:57:16', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team16', '932e65db745c13fbfda239b69199b14e', '10.16.20.113', '2013-11-23 09:57:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team 92', '25d55ad283aa400af464c76d713c07ad', '10.16.20.11', '2013-11-23 09:57:24', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team89', '25d55ad283aa400af464c76d713c07ad', '10.16.20.1', '2013-11-23 09:57:26', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team90', '25d55ad283aa400af464c76d713c07ad', '10.16.20.8', '2013-11-23 09:57:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team89', '25d55ad283aa400af464c76d713c07ad', '10.16.20.1', '2013-11-23 09:57:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team49', 'bc0a46b9b6a652b8837ec490394e01b9', '10.16.20.32', '2013-11-23 09:57:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team72', 'd5d89b3b25822e7445c7dfee85bb3e70', '10.16.20.14', '2013-11-23 09:57:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team75', '588b75b6f24af3158a055baea04cee5c', '10.16.20.24', '2013-11-23 09:57:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team46', 'dc7cb3e90eba40b5f437dccf2153b505', '10.16.20.101', '2013-11-23 09:57:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team16', '847dbf67e9cb8a32599a06584e6a9af7', '10.16.20.113', '2013-11-23 09:57:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team91', '25d55ad283aa400af464c76d713c07ad', '10.16.20.10', '2013-11-23 09:57:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team90', '25d55ad283aa400af464c76d713c07ad', '10.16.20.8', '2013-11-23 09:57:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', 'f038327d8a27e405291fc042b2444525', '10.16.20.131', '2013-11-23 09:57:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team15', '7549c54a03a79a186848b9f4658135ce', '10.16.20.115', '2013-11-23 09:57:48', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 09:57:49', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team83', '89c4aeefde0be7dbc735d2b4a1dd0603', '10.16.20.62', '2013-11-23 09:57:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team57', 'c3e45fed41d3bc74d1441411de4bbbd7', '10.16.20.43', '2013-11-23 09:57:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team79', '851c66491570f7d4948670d743279001', '10.16.20.55', '2013-11-23 09:57:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team49', 'd02cf4b153608ce96bc46ddacb554d10', '10.16.20.32', '2013-11-23 09:58:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '19750a805af5e747de59899fe07de45c', '10.16.20.111', '2013-11-23 09:58:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team10', 'bd315eead634705d7b581c347adff208', '10.16.20.86', '2013-11-23 09:58:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'dfb5f0b740727f682439317dee9da01c', '10.16.20.133', '2013-11-23 09:58:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team90', '25d55ad283aa400af464c76d713c07ad', '10.16.20.8', '2013-11-23 09:58:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '04c24b8da0729b2ec2f38018b61e9af3', '10.16.20.111', '2013-11-23 09:58:10', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team77', '6b4a9c50004acc912091fb1c2a08abd6', '10.16.20.27', '2013-11-23 09:58:15', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', 'cef14248a8b51efb35b8c1b9fe147c06', '10.16.20.129', '2013-11-23 09:58:19', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('TEAM90', '25d55ad283aa400af464c76d713c07ad', '10.16.20.8', '2013-11-23 09:58:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', 'bf565418d8e83e910273653e11c3f113', '10.16.20.111', '2013-11-23 09:58:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team3', 'dd5334c06b629f74f4a2cb8c58f89086', '10.16.20.96', '2013-11-23 09:58:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'afbc2415d30c3c0b16f6091336f55734', '10.16.20.133', '2013-11-23 09:58:24', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '453489941fe92e6823a62679c3631261', '10.16.20.53', '2013-11-23 09:58:24', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team32', '2bda643d1a3dde6ccab2b1f6edf7cbfe', '10.16.20.128', '2013-11-23 09:58:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team88', '493edccf9c1fffa7eae3599c2a00b16d', '10.16.20.69', '2013-11-23 09:58:30', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team77', '88562978600a04898784c39a4c1e66dc', '10.16.20.27', '2013-11-23 09:58:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '41e16d4191a659f3e75201f2229c368c', '10.16.20.111', '2013-11-23 09:58:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team74', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.21', '2013-11-23 09:58:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team18', 'b8daa5fbb6d479f4f55630411e06c9d4', '10.16.20.109', '2013-11-23 09:58:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', 'ea3c7eac30adce9348944f48f369b157', '10.16.20.63', '2013-11-23 09:58:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team66', '9fdf635cc3196e61c0cfd8e9c5992ea6', '10.16.20.22', '2013-11-23 09:58:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team7', '2a0cec4baf796ca0927302e3c08a5c06', '10.16.20.87', '2013-11-23 09:58:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '12c5fcc11ee4feba05da60096bbce028', '10.16.20.38', '2013-11-23 09:58:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team4', 'b501dc2c8d196a58b7a533083c8ba76d', '10.16.20.94', '2013-11-23 09:58:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team11', 'b8aeee6dc8a5715cc90bf18ddfc33e8b', '10.16.20.84', '2013-11-23 09:58:47', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 09:58:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'afbc2415d30c3c0b16f6091336f55734', '10.16.20.133', '2013-11-23 09:58:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', '08cc79a976539c3cb9825398e0961698', '10.16.20.129', '2013-11-23 09:58:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', 'b21f509721616cb0ba7f064b7346ca16', '10.16.20.63', '2013-11-23 09:58:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team5', 'd6dcd74a0018b04acfd0d5e60e4a9823', '10.16.20.92', '2013-11-23 09:58:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('82', '6720171215c7ba35ece9f1b9f54de94c', '10.16.20.58', '2013-11-23 09:59:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team60', '8215681ea7853e744c8741c8ae03fab6', '10.16.20.48', '2013-11-23 09:59:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 09:59:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team7', '304158570eebd90636dc67b98cf0d46f', '10.16.20.87', '2013-11-23 09:59:15', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '876f4c34bd4e7e1e563ab42ef8e7b952', '10.16.20.63', '2013-11-23 09:59:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team64', '7ff95ff56be3a63b53a51a79f0e2aa81', '10.16.20.17', '2013-11-23 09:59:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'd2c6c60ee41bed8bcc2c32651dc074df', '10.16.20.133', '2013-11-23 09:59:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team2', '0d2645469bee8bab1d69e703e5cf1fa1', '10.16.20.97', '2013-11-23 09:59:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 09:59:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '7ff781a397575d0deb48c289efc16a75', '10.16.20.63', '2013-11-23 09:59:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team82', '6720171215c7ba35ece9f1b9f54de94c', '10.16.20.58', '2013-11-23 09:59:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('teeam1', '3860461604bcafcd77a488c9100cdb80', '10.16.20.98', '2013-11-23 09:59:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'd2c6c60ee41bed8bcc2c32651dc074df', '10.16.20.133', '2013-11-23 09:59:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '84ae6dec58b877d468904d8043131ca4', '10.16.20.63', '2013-11-23 09:59:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team76', 'b6b9604af953e6868a202b9a721537cf', '10.16.20.54', '2013-11-23 09:59:58', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; QQDownload 755; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E)', 0),
('team2', '0b61ede5bf36d6c3f84e8b5fc5a8edc9', '10.16.20.97', '2013-11-23 10:00:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team1', '3860461604bcafcd77a488c9100cdb80', '10.16.20.98', '2013-11-23 10:00:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 10:00:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:00:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team23', '2453a35801ab720ff4756454af039abb', '10.16.20.102', '2013-11-23 10:00:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.105', '2013-11-23 10:00:19', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 10:00:30', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:00:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 10:00:38', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'b4eda9ecd13725d8ba2fe160b3f746e0', '10.16.20.83', '2013-11-23 10:00:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', '1a1a2270c8babf69a132129b08adec7c', '10.16.20.133', '2013-11-23 10:00:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 10:00:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team2', '0e97778fcc37f9e56ad275d92548b190', '10.16.20.97', '2013-11-23 10:00:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team47', '427f352e97d6a853d5aab5d25212cb7e', '10.16.20.137', '2013-11-23 10:00:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team88', '493edccf9c1fffa7eae3599c2a00b16d', '10.16.20.69', '2013-11-23 10:00:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'b4eda9ecd13725d8ba2fe160b3f746e0', '10.16.20.83', '2013-11-23 10:01:09', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:01:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team2', '7f7e605d7e12f8c98b5a6a417ff19fc1', '10.16.20.97', '2013-11-23 10:01:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:01:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '9e2c63463dfe6c9d3d3026240f05d98a', '10.16.20.16', '2013-11-23 10:01:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', '4338699f34fb214a09e212b4aaa66ef5', '10.16.20.131', '2013-11-23 10:01:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team91', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.10', '2013-11-23 10:01:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team89', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.1', '2013-11-23 10:01:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team90', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.8', '2013-11-23 10:01:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team54', 'f37799173c695b914b9faab67764decb', '10.16.20.39', '2013-11-23 10:01:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team92', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.11', '2013-11-23 10:01:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team74', 'edd50713899c972a3dd161dfdd4e58f6', '10.16.20.21', '2013-11-23 10:01:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '453489941fe92e6823a62679c3631261', '10.16.20.53', '2013-11-23 10:01:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 10:01:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', 'f038327d8a27e405291fc042b2444525', '10.16.20.131', '2013-11-23 10:01:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team74', 'b934bd5bd2e911c4c5377f50924c0a92', '10.16.20.21', '2013-11-23 10:02:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team24', 'd297f987a16120e879c89600a73425c2', '10.16.20.100', '2013-11-23 10:02:11', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('56', '29ab6c6a3030c51ce8481ae71fa8e3ae', '10.16.20.41', '2013-11-23 10:02:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', 'adb0f7c04af74e775e3042abdbe5043d', '10.16.20.133', '2013-11-23 10:02:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team28', '9ed8efbcae3465c088d6f95760dcfc8d', '10.16.20.134', '2013-11-23 10:02:24', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '49d5303ef04219376ae121c9397b4ca9', '10.16.20.16', '2013-11-23 10:02:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 10:02:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team78', '9fe0cdcc03466e6280f37e2d8d9bc748', '10.16.20.53', '2013-11-23 10:02:30', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 10:02:38', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'b777bf33b0dad3bbbcfdee51d394619e', '10.16.20.83', '2013-11-23 10:02:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'b1fcf811949fa97c9cc8bb05dcb472d1', '10.16.20.38', '2013-11-23 10:02:43', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('筷子', '29ab6c6a3030c51ce8481ae71fa8e3ae', '10.16.20.41', '2013-11-23 10:02:47', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', '21be811e18a9d04f357a080a0fac9e2b', '10.16.20.133', '2013-11-23 10:02:50', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', '532fed4449b86732f383602cd70ecd5f', '10.16.20.60', '2013-11-23 10:02:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29 ', '804568a508eb25cb93d202a7f85f6ab2', '10.16.20.133', '2013-11-23 10:03:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '10.16.20.38', '2013-11-23 10:03:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'b777bf33b0dad3bbbcfdee51d394619e', '10.16.20.83', '2013-11-23 10:03:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team84', 'e0ef49e57b3413d5f7f6ae0bb43f4892', '10.16.20.60', '2013-11-23 10:03:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 10:03:26', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', '7ff82119cbbf1fe93ee0ff49279d7d97', '10.16.20.83', '2013-11-23 10:03:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:03:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', '25c1c9fdd69df897a164bda96a6c2bdf', '10.16.20.83', '2013-11-23 10:03:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '3c5c38c9c70b1f9874c9ed421f8445e5', '10.16.20.36', '2013-11-23 10:03:48', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', '7ff82119cbbf1fe93ee0ff49279d7d97', '10.16.20.83', '2013-11-23 10:03:56', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'faf66986848ec1fdd6f8c23e4da4ec6f', '10.16.20.83', '2013-11-23 10:04:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '2c0343c8bd0844c5b91357cbff86d4c3', '10.16.20.36', '2013-11-23 10:04:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team52', '1cba8dd01a4d22ec912235f209f26ee3', '10.16.20.36', '2013-11-23 10:04:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', 'b777bf33b0dad3bbbcfdee51d394619e', '10.16.20.83', '2013-11-23 10:04:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '202.199.112.125', '2013-11-23 10:04:57', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 0),
('team12', 'c8a23f840c7896f9ffe91eccd02f62ff', '10.16.20.83', '2013-11-23 10:05:11', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.20.201', '2013-11-23 10:05:15', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team58', 'aa61147aa6a7866f38e7e651048db831', '10.16.20.45', '2013-11-23 10:05:21', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', '098f11aee7229221adc3b8e676e52b68', '10.16.20.83', '2013-11-23 10:05:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Key', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 10:05:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team58', 'aa61147aa6a7866f38e7e651048db831', '10.16.20.45', '2013-11-23 10:05:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Key', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 10:05:43', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team40', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.146', '2013-11-23 10:05:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Key', 'd8ea7326e6ec5916accd6e0c9d264c63', '10.16.20.138', '2013-11-23 10:05:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('TXK', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.146', '2013-11-23 10:06:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team58', '1a008b14d9e3dbe3250b6d5328fc8649', '10.16.20.45', '2013-11-23 10:06:09', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 10:06:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team58', 'd6e5d73d7d0df8943edf9068532eb8bf', '10.16.20.45', '2013-11-23 10:06:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', 'd8ea7326e6ec5916accd6e0c9d264c63', '10.16.20.138', '2013-11-23 10:06:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '9e2c63463dfe6c9d3d3026240f05d98a', '10.16.20.16', '2013-11-23 10:06:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team58', 'e1591618820e5ebcfe6f71cba4f7f982', '10.16.20.45', '2013-11-23 10:06:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team36', '14ed1a22176d3805f01deeab4c7aae03', '10.16.20.120', '2013-11-23 10:07:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team19', 'd5c2e22de039873d4353ba128edcfccd', '10.16.20.107', '2013-11-23 10:07:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', 'ec9ea14a7e22aa8c12d45d67b1fa3711', '10.16.20.138', '2013-11-23 10:07:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team16', '932e65db745c13fbfda239b69199b14e', '10.16.20.201', '2013-11-23 10:07:23', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team55', 'ba32a7aa6ca13a87d362797eed7e21af', '10.16.20.40', '2013-11-23 10:07:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team36', '258fe4330461fd5b3a4a3eedb615f4b7', '10.16.20.120', '2013-11-23 10:07:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 10:07:38', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team16', '932e65db745c13fbfda239b69199b14e', '10.16.20.201', '2013-11-23 10:07:39', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('TEAM43', 'a15a29bdaecdb452c0d0021d5eb8e83f', '10.16.20.140', '2013-11-23 10:07:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', 'aff808bcc0df7fa0003994bce26644a7', '10.16.20.138', '2013-11-23 10:07:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:07:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '41e16d4191a659f3e75201f2229c368c', '10.16.20.201', '2013-11-23 10:08:12', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team44', '6d479d77a8ecdc599500404f63fde8b3', '10.16.20.138', '2013-11-23 10:08:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 50', '735268beb1e39f0c0273861df80c9567', '10.16.20.34', '2013-11-23 10:08:26', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team34', '0ef9038c1cb956a62bbdbde6f4c47828', '10.16.20.124', '2013-11-23 10:08:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('duoluo123', '0a6a4b01da532efc836cbb32b81d3346', '202.199.112.125', '2013-11-23 10:08:38', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 0),
('team71', '01cfcd4f6b8770febfb40cb906715822', '10.16.20.13', '2013-11-23 10:08:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 10:08:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 51', '735268beb1e39f0c0273861df80c9567', '10.16.20.34', '2013-11-23 10:08:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:08:50', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '34f64dcad7048f84351152c980acbc38', '10.16.20.138', '2013-11-23 10:08:57', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('admin', '21232f297a57a5a743894a0e4a801fc3', '202.199.112.125', '2013-11-23 10:09:00', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 0),
('team19', 'd5c2e22de039873d4353ba128edcfccd', '10.16.20.201', '2013-11-23 10:09:07', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team39', '017cae4cdafba0b0b742521803c0d762', '10.16.20.147', '2013-11-23 10:09:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team34', '0ef9038c1cb956a62bbdbde6f4c47828', '10.16.20.124', '2013-11-23 10:09:11', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team 51 为你而来', '735268beb1e39f0c0273861df80c9567', '10.16.20.34', '2013-11-23 10:09:13', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team71', '1e4f92ebc7997cc64a5e77d64f143b84', '10.16.20.13', '2013-11-23 10:09:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team34', '0ef9038c1cb956a62bbdbde6f4c47828', '10.16.20.124', '2013-11-23 10:09:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team73', 'a6c0f75c369b129273ac9942676d1864', '10.16.20.235', '2013-11-23 10:09:59', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team14', '3e343698c6eded68def0caf3c83e68a8', '10.16.20.117', '2013-11-23 10:09:59', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:10:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:10:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team14', '3e343698c6eded68def0caf3c83e68a8', '10.16.20.117', '2013-11-23 10:10:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team56', '5c159192b83dc8c4dc6428d51326c4f5', '10.16.20.41', '2013-11-23 10:10:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team73', 'a6c0f75c369b129273ac9942676d1864', '10.16.20.235', '2013-11-23 10:10:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team40', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.146', '2013-11-23 10:10:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0);
INSERT INTO `loginlog` (`user_id`, `password`, `ip`, `time`, `SAC`, `cheater`) VALUES
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:10:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '9e2c63463dfe6c9d3d3026240f05d98a', '10.16.20.16', '2013-11-23 10:10:24', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team40', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.146', '2013-11-23 10:10:25', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team51 ', '57a8b98d28120be25a2acb7b5d22f421', '10.16.20.34', '2013-11-23 10:10:26', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:10:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team34', '940e7ef4e0c43a303d37b510daa59a83', '10.16.20.124', '2013-11-23 10:10:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team73', '691b5f39ec21f8cb9d6580e8f558d213', '10.16.20.235', '2013-11-23 10:10:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team40', 'eacd3af04526f2ef2f9f16ddeb92d214', '10.16.20.146', '2013-11-23 10:10:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team56', '109870c9e24c858a4f64f6df2456c815', '10.16.20.41', '2013-11-23 10:11:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team73', '691b5f39ec21f8cb9d6580e8f558d213', '10.16.20.235', '2013-11-23 10:11:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team40', 'dea6b36eff2716e6aad3d69a8ab6c101', '10.16.20.146', '2013-11-23 10:11:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team73', '691b5f39ec21f8cb9d6580e8f558d213', '10.16.20.235', '2013-11-23 10:11:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:11:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:11:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '95e8ca1cadde543473278fc6044f2bda', '10.16.20.16', '2013-11-23 10:11:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '95e8ca1cadde543473278fc6044f2bda', '10.16.20.16', '2013-11-23 10:11:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team70', 'ea0e5b9073952c6011209cda15d642e0', '10.16.20.72', '2013-11-23 10:12:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', 'c1d4e10407dd7c54dbc69ff5fe49f99b', '10.16.20.140', '2013-11-23 10:12:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team70', '92694620513b2e6473924b38fc833d97', '10.16.20.72', '2013-11-23 10:12:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', '9e2c63463dfe6c9d3d3026240f05d98a', '10.16.20.16', '2013-11-23 10:12:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team43', 'e52a0ac5be7fafabc23179729c2ba12a', '10.16.20.140', '2013-11-23 10:12:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.20.201', '2013-11-23 10:12:55', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team43', '602c22bc843a14f0f574a7a858cc595e', '10.16.20.140', '2013-11-23 10:13:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.16', '2013-11-23 10:14:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team69', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.16', '2013-11-23 10:14:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', 'c2064ff579db5d58e074192b64310d66', '10.16.20.130', '2013-11-23 10:15:15', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', 'c2064ff579db5d58e074192b64310d66', '10.16.20.130', '2013-11-23 10:15:43', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team73', '25f9e794323b453885f5181f1b624d0b', '10.16.20.235', '2013-11-23 10:16:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', '08cc79a976539c3cb9825398e0961698', '10.16.20.130', '2013-11-23 10:16:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team67', '25f9e794323b453885f5181f1b624d0b', '10.16.20.18', '2013-11-23 10:16:38', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team48', '670b14728ad9902aecba32e22fa4f6bd', '10.16.20.136', '2013-11-23 10:17:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team48', 'b9c43764688cd3612bdff5d0c98fd0b4', '10.16.20.136', '2013-11-23 10:18:23', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team48', 'b9c43764688cd3612bdff5d0c98fd0b4', '10.16.20.136', '2013-11-23 10:18:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team1', '3860461604bcafcd77a488c9100cdb80', '10.16.20.201', '2013-11-23 10:18:56', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team48', '68c4b25ec4cb82919f6a0ec6b7ec8b1d', '10.16.20.136', '2013-11-23 10:18:59', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team59', '68abe9171153bdbce95560ccb98dd45d', '10.16.20.46', '2013-11-23 10:21:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team59', '2ec76e2f23746196a0a69adfe18ea691', '10.16.20.46', '2013-11-23 10:21:25', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('时代姐妹花', 'c8ee24eecffea588f29f328ed36ada31', '10.16.20.46', '2013-11-23 10:22:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team59', 'c8ee24eecffea588f29f328ed36ada31', '10.16.20.46', '2013-11-23 10:23:25', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.20.56', '2013-11-23 10:25:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', '4338699f34fb214a09e212b4aaa66ef5', '10.16.20.131', '2013-11-23 10:26:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', '3de91d2dff1d4a25802bc8b300b0e953', '10.16.20.131', '2013-11-23 10:27:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team30', 'f038327d8a27e405291fc042b2444525', '10.16.20.131', '2013-11-23 10:27:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '123.121.32.227', '2013-11-23 10:32:53', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team6', '25f9e794323b453885f5181f1b624d0b', '10.16.20.89', '2013-11-23 10:34:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team10', 'bd315eead634705d7b581c347adff208', '10.16.20.99', '2013-11-23 10:39:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 10:40:07', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.0 Safari/537.36', 0),
('team11', 'b8aeee6dc8a5715cc90bf18ddfc33e8b', '10.16.20.84', '2013-11-23 10:40:30', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 10:41:42', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0', 0),
('Team40', 'dea6b36eff2716e6aad3d69a8ab6c101', '10.16.20.146', '2013-11-23 10:41:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 10:46:38', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0', 0),
('team46', '1beb0b6b148a29cc80a1478a0acd5c1e', '10.16.20.101', '2013-11-23 10:46:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team46', 'dc7cb3e90eba40b5f437dccf2153b505', '10.16.20.101', '2013-11-23 10:47:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '84ae6dec58b877d468904d8043131ca4', '10.16.20.63', '2013-11-23 10:48:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team12', '098f11aee7229221adc3b8e676e52b68', '10.16.20.83', '2013-11-23 10:52:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team51 ', '57a8b98d28120be25a2acb7b5d22f421', '10.16.20.34', '2013-11-23 10:56:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.20.201', '2013-11-23 10:59:23', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team84', 'e0ef49e57b3413d5f7f6ae0bb43f4892', '10.16.20.60', '2013-11-23 11:01:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team45', '701cfaf8eac02d8045f352f74fb7ede3', '10.16.20.139', '2013-11-23 11:04:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team21', 'c8b581e0476d3f0493492069388a7d3f', '10.16.20.104', '2013-11-23 11:05:11', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.20.122', '2013-11-23 11:08:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team58', 'e1591618820e5ebcfe6f71cba4f7f982', '10.16.20.45', '2013-11-23 11:10:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', '08cc79a976539c3cb9825398e0961698', '10.16.20.129', '2013-11-23 11:14:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team67', '25f9e794323b453885f5181f1b624d0b', '10.16.20.18', '2013-11-23 11:14:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', 'be90b32f3df67c0bc1e265795ceed91c', '10.16.20.142', '2013-11-23 11:14:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.20.56', '2013-11-23 11:17:48', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.20.56', '2013-11-23 11:18:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 11:24:02', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.0 Safari/537.36', 0),
('team59', '097fb8939254bedf1e6ceb4402199aaa', '10.16.20.46', '2013-11-23 11:24:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team59', '25f9e794323b453885f5181f1b624d0b', '10.16.20.46', '2013-11-23 11:24:45', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team92', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.11', '2013-11-23 11:26:56', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '202.199.112.125', '2013-11-23 11:27:06', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 11:29:29', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0', 0),
('team63', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.50', '2013-11-23 11:36:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:36:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:37:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:37:25', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:37:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:38:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team89', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.1', '2013-11-23 11:38:20', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team91', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.10', '2013-11-23 11:39:19', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team91', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.10', '2013-11-23 11:39:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:40:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:40:32', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team21', 'c8b581e0476d3f0493492069388a7d3f', '10.16.20.104', '2013-11-23 11:40:34', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('Team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:40:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', '186a157b2992e7daed3677ce8e9fe40f', '10.16.20.50', '2013-11-23 11:40:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team63', 'a416ccedb82631e01ca59a6c16f0a009', '10.16.20.50', '2013-11-23 11:42:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team60', '5164f218e64647f1f2d09c4dacf18cfc', '10.16.20.48', '2013-11-23 11:46:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team60', '8215681ea7853e744c8741c8ae03fab6', '10.16.20.48', '2013-11-23 11:46:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team23 ', '2453a35801ab720ff4756454af039abb', '10.16.20.102', '2013-11-23 11:50:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team55', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.40', '2013-11-23 11:54:37', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team55', 'ba32a7aa6ca13a87d362797eed7e21af', '10.16.20.40', '2013-11-23 11:54:58', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '110.96.32.162', '2013-11-23 12:03:03', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36', 0),
('Team40', 'dea6b36eff2716e6aad3d69a8ab6c101', '10.16.20.146', '2013-11-23 12:14:06', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team56', '109870c9e24c858a4f64f6df2456c815', '10.16.20.41', '2013-11-23 12:14:08', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team64', '7ff95ff56be3a63b53a51a79f0e2aa81', '10.16.20.17', '2013-11-23 12:15:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team10', 'bd315eead634705d7b581c347adff208', '10.16.20.99', '2013-11-23 12:18:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', '08cc79a976539c3cb9825398e0961698', '10.16.20.130', '2013-11-23 12:24:13', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E)', 0),
('team72', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.14', '2013-11-23 12:29:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team72', 'd5d89b3b25822e7445c7dfee85bb3e70', '10.16.20.14', '2013-11-23 12:30:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.105', '2013-11-23 12:33:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('TEAM', 'd41d8cd98f00b204e9800998ecf8427e', '123.121.32.227', '2013-11-23 12:35:34', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team35', '290c3ca57a143e987042cb308ead813f', '123.121.32.227', '2013-11-23 12:35:48', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '123.121.32.227', '2013-11-23 12:35:58', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team54', 'f37799173c695b914b9faab67764decb', '10.16.20.39', '2013-11-23 12:41:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team83', '89c4aeefde0be7dbc735d2b4a1dd0603', '10.16.20.62', '2013-11-23 12:42:29', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team3', 'dd5334c06b629f74f4a2cb8c58f89086', '10.16.20.96', '2013-11-23 12:46:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team88', '2da301612cad7ee56dde0e83025b5016', '10.16.20.69', '2013-11-23 12:47:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team88', '493edccf9c1fffa7eae3599c2a00b16d', '10.16.20.69', '2013-11-23 12:47:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team39', '017cae4cdafba0b0b742521803c0d762', '10.16.20.147', '2013-11-23 12:47:56', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team39', '017cae4cdafba0b0b742521803c0d762', '10.16.20.147', '2013-11-23 12:49:11', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team31', '08cc79a976539c3cb9825398e0961698', '10.16.20.130', '2013-11-23 12:54:24', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E)', 0),
('team90', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.8', '2013-11-23 13:07:41', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', 'ed207b29e966483c793297139d82d562', '110.96.32.164', '2013-11-23 13:13:30', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9) AppleWebKit/537.71 (KHTML, like Gecko) Version/7.0 Safari/537.71', 0),
('team11', 'b8aeee6dc8a5715cc90bf18ddfc33e8b', '10.16.20.84', '2013-11-23 13:13:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', '602c22bc843a14f0f574a7a858cc595e', '10.16.20.140', '2013-11-23 13:13:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '110.96.32.164', '2013-11-23 13:13:45', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9) AppleWebKit/537.71 (KHTML, like Gecko) Version/7.0 Safari/537.71', 0),
('team', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.133', '2013-11-23 13:15:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team29', '804568a508eb25cb93d202a7f85f6ab2', '10.16.20.133', '2013-11-23 13:15:46', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '123.121.32.227', '2013-11-23 13:16:36', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '123.121.32.227', '2013-11-23 13:18:42', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.105', '2013-11-23 13:23:27', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.20.126', '2013-11-23 13:28:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '110.96.32.164', '2013-11-23 13:31:13', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36', 0),
('team18', 'b8daa5fbb6d479f4f55630411e06c9d4', '10.16.20.109', '2013-11-23 13:40:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team39', '017cae4cdafba0b0b742521803c0d762', '10.16.20.147', '2013-11-23 13:43:42', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team43', '602c22bc843a14f0f574a7a858cc595e', '10.16.20.140', '2013-11-23 13:46:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '10.16.8.43', '2013-11-23 13:46:35', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.0 Safari/537.36', 0),
('team44', 'e20c32b17b26e06e06d48c55fce7fd37', '10.16.20.138', '2013-11-23 13:47:33', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 13:47:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 13:48:09', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', 'aff808bcc0df7fa0003994bce26644a7', '10.16.20.138', '2013-11-23 13:48:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.138', '2013-11-23 13:49:16', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '7c2e4547018609c400318130062a07f3', '10.16.20.201', '2013-11-23 13:49:48', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('term7', '3be34f86dc693578a2cbc6bc0166fb4e', '10.16.20.87', '2013-11-23 13:49:56', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '34f64dcad7048f84351152c980acbc38', '10.16.20.201', '2013-11-23 13:50:00', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.20.201', '2013-11-23 13:50:14', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('term7', '304158570eebd90636dc67b98cf0d46f', '10.16.20.87', '2013-11-23 13:50:17', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '42f72a8dba01f5f292056052cc101bf1', '10.16.20.138', '2013-11-23 13:50:25', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team7', '304158570eebd90636dc67b98cf0d46f', '10.16.20.87', '2013-11-23 13:50:39', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team44', '34f64dcad7048f84351152c980acbc38', '10.16.20.138', '2013-11-23 13:50:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team60', '8215681ea7853e744c8741c8ae03fab6', '10.16.20.48', '2013-11-23 13:51:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team57', 'c3e45fed41d3bc74d1441411de4bbbd7', '10.16.20.43', '2013-11-23 13:51:40', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team83', '89c4aeefde0be7dbc735d2b4a1dd0603', '10.16.20.62', '2013-11-23 13:57:00', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team42', 'be90b32f3df67c0bc1e265795ceed91c', '10.16.20.142', '2013-11-23 14:04:19', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '10.16.8.43', '2013-11-23 14:07:30', 'Mozilla/5.0 (Windows NT 6.1; rv:22.0) Gecko/20100101 Firefox/22.0', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.104', '2013-11-23 14:07:35', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team39', '017cae4cdafba0b0b742521803c0d762', '10.16.20.147', '2013-11-23 14:17:38', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team88', '493edccf9c1fffa7eae3599c2a00b16d', '10.16.20.69', '2013-11-23 14:18:07', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '84ae6dec58b877d468904d8043131ca4', '10.16.20.63', '2013-11-23 14:20:10', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.104', '2013-11-23 14:26:03', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team20', '00a289a40f1d02fb02dc7b594714c27b', '10.16.20.105', '2013-11-23 14:31:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team6', '25f9e794323b453885f5181f1b624d0b', '10.16.20.89', '2013-11-23 14:35:31', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team6', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.89', '2013-11-23 14:35:47', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team6', '25f9e794323b453885f5181f1b624d0b', '10.16.20.89', '2013-11-23 14:35:54', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team90', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.8', '2013-11-23 14:39:12', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team90', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.8', '2013-11-23 14:43:53', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('T', 'd41d8cd98f00b204e9800998ecf8427e', '10.16.20.111', '2013-11-23 14:47:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', 'bf565418d8e83e910273653e11c3f113', '10.16.20.111', '2013-11-23 14:47:14', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team18', 'b8daa5fbb6d479f4f55630411e06c9d4', '10.16.20.109', '2013-11-23 14:47:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', 'bf565418d8e83e910273653e11c3f113', '10.16.20.111', '2013-11-23 14:47:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '789997a5fe474637b9efc10a630e85a6', '10.16.20.111', '2013-11-23 14:47:26', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '41e16d4191a659f3e75201f2229c368c', '10.16.20.111', '2013-11-23 14:47:44', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '120.201.101.36', '2013-11-23 14:48:27', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.0 Safari/537.36', 0),
('team14', 'e10adc3949ba59abbe56e057f20f883e', '10.16.20.117', '2013-11-23 14:51:52', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.201', '2013-11-23 14:58:09', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('team76', 'b6b9604af953e6868a202b9a721537cf', '10.16.20.54', '2013-11-23 14:58:28', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '120.201.101.36', '2013-11-23 14:58:48', 'Mozilla/5.0 (Windows NT 6.1; rv:22.0) Gecko/20100101 Firefox/22.0', 0),
('team43', '602c22bc843a14f0f574a7a858cc595e', '10.16.20.140', '2013-11-23 14:59:16', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team6', '25f9e794323b453885f5181f1b624d0b', '10.16.20.89', '2013-11-23 15:00:18', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team85', '84ae6dec58b877d468904d8043131ca4', '10.16.20.63', '2013-11-23 15:00:55', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '110.96.32.164', '2013-11-23 15:02:19', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9) AppleWebKit/537.71 (KHTML, like Gecko) Version/7.0 Safari/537.71', 0),
('team47', '427f352e97d6a853d5aab5d25212cb7e', '10.16.20.137', '2013-11-23 15:03:32', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.152', '2013-11-23 15:04:36', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team53', '7a744442c81c2e86fd9282971466942e', '110.96.32.164', '2013-11-23 15:04:46', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9) AppleWebKit/537.71 (KHTML, like Gecko) Version/7.0 Safari/537.71', 0),
('Team40', 'dea6b36eff2716e6aad3d69a8ab6c101', '10.16.20.146', '2013-11-23 15:06:04', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.152', '2013-11-23 15:06:05', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('V2', 'c986933609f05fccf16f12be67b901f8', '10.16.20.152', '2013-11-23 15:06:51', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v2', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.152', '2013-11-23 15:07:02', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team17', '41e16d4191a659f3e75201f2229c368c', '10.16.20.226', '2013-11-23 15:07:10', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.152', '2013-11-23 15:07:22', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v2', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.152', '2013-11-23 15:08:19', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('v1', 'f3e10a64d33104b438e2ea20778f1864', '10.16.20.136', '2013-11-23 15:09:43', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36', 0),
('team57', 'ba8c8eef2ce4a75eb264485baabbf6ae', '113.225.19.28', '2013-11-23 15:55:25', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0', 0),
('team57', 'ba8c8eef2ce4a75eb264485baabbf6ae', '113.225.19.28', '2013-11-23 15:55:26', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0', 0),
('team57', 'ba8c8eef2ce4a75eb264485baabbf6ae', '113.225.19.28', '2013-11-23 15:55:31', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.1.57', '2013-11-23 16:09:21', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '123.150.182.159', '2013-11-23 16:12:07', 'Mozilla/4.0 (compatible;Android;320x480)', 0),
('110405212', 'eaa4128e94a0b9c6988c005323ec4f79', '116.2.85.2', '2013-11-24 12:33:03', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0', 0),
('120407125', '7aa81a0ab858480ea0d01df1603eb91b', '113.225.19.43', '2013-11-24 18:52:44', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', 0),
('team46', '2cad3337425a0d78929e4fd4b597fb89', '113.225.19.43', '2013-11-24 18:53:07', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', 0),
('team46', '2cad3337425a0d78929e4fd4b597fb89', '113.225.19.43', '2013-11-24 18:54:12', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', 0),
('team14', 'e10adc3949ba59abbe56e057f20f883e', '202.199.97.168', '2013-11-24 19:56:34', 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36', 0),
('team14', 'e10adc3949ba59abbe56e057f20f883e', '222.33.9.43', '2013-11-24 20:15:18', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; MALN)', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '101.226.33.220', '2013-11-24 20:45:17', 'Mozilla/4.0', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '113.225.22.57', '2013-11-24 23:27:06', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.5.67', '2013-11-25 18:09:46', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', 0),
('team35', '6a5e61b5e97c696a8ed7aea6aa418260', '220.181.11.232', '2013-11-25 19:06:06', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '10.16.1.125', '2013-11-26 15:57:24', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('18641188374', '670b14728ad9902aecba32e22fa4f6bd', '202.199.97.25', '2013-11-26 18:31:26', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0', 0),
('team20', '6ffd5e40ff88168aecaf0fcb5eeeed22', '202.199.97.22', '2013-11-26 18:33:00', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101 Firefox/20.0', 0),
('team4', 'e10adc3949ba59abbe56e057f20f883e', '116.2.94.216', '2013-11-27 15:50:41', 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '116.2.93.209', '2013-11-29 13:10:46', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '10.241.24.64', '2013-12-05 21:28:58', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.0 Safari/537.36', 0),
('100401416', 'e6aca264f3f63cc6ce0ccbfbf681c97d', '113.225.22.181', '2013-12-07 11:05:09', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', '5c6061f36fa572d0f2f20fe7cb639f2d', '113.225.22.181', '2013-12-07 11:05:21', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', '2e1ab066f09cd9f01f5b8d1607fdb467', '113.225.22.181', '2013-12-07 11:05:35', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', '2e1ab066f09cd9f01f5b8d1607fdb467', '113.225.22.181', '2013-12-07 11:05:36', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', 'aefcce94488a6aac98eeb3bcb52553a0', '113.225.22.181', '2013-12-07 11:05:49', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', '2e1ab066f09cd9f01f5b8d1607fdb467', '113.225.22.181', '2013-12-07 11:06:00', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', '483ea8cb66f1c76294fa684b38faaa43', '113.225.22.181', '2013-12-07 11:06:15', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('wangd101', 'e6aca264f3f63cc6ce0ccbfbf681c97d', '113.225.22.181', '2013-12-07 11:06:41', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '207.182.143.146', '2013-12-21 12:32:54', 'niki-bot', 0),
('', 'd41d8cd98f00b204e9800998ecf8427e', '202.199.97.168', '2014-01-09 20:52:56', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0', 0),
('team28', '4966ec4c038e0ef8fd136cb6e4b3a5b9', '202.199.97.168', '2014-01-09 20:53:40', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0', 0),
('team28', '50202e91bf3bc3380bfe90eb9b85202a', '202.199.97.168', '2014-01-09 20:53:58', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0', 0),
('team28', 'fa79eaa275d53d5431943275775ea850', '202.199.97.168', '2014-01-09 20:57:00', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:00:12', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team95', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:00:19', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team96', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:00:25', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:02:14', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:32:21', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('admin', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:35:52', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:35:59', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:36:05', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:36:21', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:38:00', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:38:11', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:47:33', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:47:49', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:50:19', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:50:28', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:51:58', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:53:20', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:53:47', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:56:02', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 21:57:42', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 22:41:13', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 22:45:03', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0),
('team93', '3f5357e4c0e6e7ec78915625e1074eeb', '127.0.0.1', '2014-01-25 23:12:24', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/31.0.1650.63 Chrome/31.0.1650.63 Safari/537.36', 0);

-- --------------------------------------------------------

--
-- 表的结构 `news`
--

CREATE TABLE IF NOT EXISTS `news` (
  `news_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(48) NOT NULL DEFAULT '' COMMENT 'user_id',
  `title` varchar(200) NOT NULL DEFAULT '',
  `content` text NOT NULL,
  `time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `importance` tinyint(4) NOT NULL DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  PRIMARY KEY (`news_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1004 ;

--
-- 转存表中的数据 `news`
--

INSERT INTO `news` (`news_id`, `user_id`, `title`, `content`, `time`, `importance`, `defunct`) VALUES
(1, 'sutacm', '校赛', '比赛后拾到【银色】【惠普】【8G】U盘一个，如遗失请立即联系【13624051733】。感谢各位同学参与沈阳工业大学第五届ACM程序设计大赛！', '2013-09-26 00:00:00', 0, 'N'),
(2, 'volunteer', 'volunteer', '感谢所有志愿者们的劳动！', '0000-00-00 00:00:00', 0, 'Y');

-- --------------------------------------------------------

--
-- 表的结构 `online`
--

CREATE TABLE IF NOT EXISTS `online` (
  `hash` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `ip` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `ua` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `refer` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `lastmove` int(10) NOT NULL,
  `firsttime` int(10) DEFAULT NULL,
  `uri` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`hash`),
  UNIQUE KEY `hash` (`hash`)
) ENGINE=MEMORY DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 表的结构 `privilege`
--

CREATE TABLE IF NOT EXISTS `privilege` (
  `user_id` char(48) NOT NULL DEFAULT '',
  `rightstr` char(30) NOT NULL DEFAULT '',
  `defunct` char(1) NOT NULL DEFAULT 'N'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `privilege`
--

INSERT INTO `privilege` (`user_id`, `rightstr`, `defunct`) VALUES
('admin', 'administrator', 'N'),
('admin', 'p1000', 'N'),
('admin', 'p1001', 'N'),
('admin', 'p1002', 'N'),
('admin', 'p1003', 'N'),
('admin', 'p1004', 'N'),
('admin', 'p1005', 'N'),
('admin', 'p1006', 'N'),
('admin', 'm1000', 'N'),
('admin', 'p1007', 'N');

-- --------------------------------------------------------

--
-- 表的结构 `problem`
--

CREATE TABLE IF NOT EXISTS `problem` (
  `problem_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL DEFAULT '',
  `description` text,
  `input` text,
  `output` text,
  `sample_input` text,
  `sample_output` text,
  `spj` char(1) NOT NULL DEFAULT '0',
  `hint` text,
  `source` varchar(100) DEFAULT NULL,
  `in_date` datetime DEFAULT NULL,
  `time_limit` int(11) NOT NULL DEFAULT '0',
  `memory_limit` int(11) NOT NULL DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `accepted` int(11) DEFAULT '0',
  `submit` int(11) DEFAULT '0',
  `solved` int(11) DEFAULT '0',
  PRIMARY KEY (`problem_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10009 ;

--
-- 转存表中的数据 `problem`
--

INSERT INTO `problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `spj`, `hint`, `source`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `accepted`, `submit`, `solved`) VALUES
(1000, 'test', '<p>a+b</p>', '', '', '1 1', '2', '0', '', '', '2013-08-26 13:47:09', 1, 128, 'Y', 1, 1, 0),
(1001, 'Lucas Number', '<p class="p0" style="text-indent:21.0000pt; margin-bottom:0pt; margin-top:0pt; "><span style="font-size: large;">Fibonacci sequence is also known as the rabbit sequence, When it appeared, it attracted people. Fibonacci sequence satisfy a following recursive equation :</span></p>\r\n<p class="p0" style="text-indent:21.0000pt; margin-bottom:0pt; margin-top:0pt; "><span style="font-size: large;"><strong><em>F</em><sub><em>0</em></sub></strong> = 0,<strong><em>F</em><sub><em>1</em></sub></strong> = 1,<strong>F</strong><sub><strong>n+2</strong></sub>=<em><strong> F</strong><sub><strong>n+1</strong></sub></em>+<em><strong>F</strong><sub><strong>n</strong></sub></em>&nbsp; (<em><strong>n</strong></em>≧0)</span></p>\r\n<p class="p0" style="text-indent:21.0000pt; margin-bottom:0pt; margin-top:0pt; "><span style="font-size: large;">But we care about it `s good friend Lucas sequence,not the Fibonacci sequence.Lucas sequence and Fibonacci sequence existed a relationship as follows:</span></p>\r\n<p class="p0" style="text-indent:21.0000pt; margin-bottom:0pt; margin-top:0pt; "><span style="font-size: large;"><em><strong>Ln</strong></em> = <strong><em>Fn-1</em></strong> + <em><strong>Fn+1</strong></em> &nbsp;(<em><strong>n</strong></em>≧1)</span></p>\r\n<p class="p0" style="text-indent:21.0000pt; margin-bottom:0pt; margin-top:0pt; "><span style="font-size: large;">The difficulty is that we do not want you calculate the n`th number of the Lucas sequence,but the n`th number of </span><em><strong><span style="font-size: large;">Pn </span></strong></em><span style="font-size: large;">:</span></p>\r\n<p class="p0" style="text-indent: 21pt; margin-bottom: 0pt; margin-top: 0pt; text-align: center;">&nbsp;<img src="/oj/upload/201311/image/1(1).png" width="200" height="69" alt="" /></p>', '<span style="font-size: large;">&nbsp;The input has several cases. In each case, there will be only one integer <strong><em>n</em></strong>. &nbsp;(0 ≦ <em><strong>n</strong></em> &lt; 600)</span>', '<span style="font-size: large;">&nbsp;For each case, print the result of <em><strong>Pn</strong></em> in one line.</span>', '0\r\n6\r\n1', '1\r\n64\r\n2', '0', '', '', '2013-11-23 13:44:54', 10, 128, 'N', 18, 127, 0),
(1002, 'Roman Numerals', '<p><span style="font-size: large;">&nbsp; Roman numerals is the earliest form of number expression , named because originated in Rome, earlier 2000 years than Arabic numerals which we well-known. The basic characters of Roman numeral are <strong>I</strong>, <strong>V</strong>, <strong>X</strong>, <strong>L</strong>, <strong>C</strong>.Respectively denote Arabic numerals` <strong>1</strong>,<strong>5</strong>,<strong>10</strong>,<strong>50</strong>,<strong>100</strong>.</span></p>\r\n<p><span style="font-size: large;">&nbsp; Roman numerals have the following rules:</span></p>\r\n<p><span style="font-size: large;">&nbsp; 1.Anyone of the basic number <strong>I</strong>, <strong>X</strong>, <strong>C</strong> can used continuously for forming a number. When the number puts the<strong> bigger number`s right</strong>, the numbers of this number can`t exceed <strong>three</strong>. When the number puts the <strong>bigger number`s left</strong>, the numbers of this number can only be <strong>one</strong>.</span></p>\r\n<p><span style="font-size: large;">&nbsp; 2.Anyone of the basic number <strong>V</strong>,<strong> L</strong> as a smaller number , when forming a number by the <strong>subtraction way</strong>, it can`t put the bigger number`s <strong>left</strong>. When it put the bigger number`s <strong>right</strong>, and forming a number by the <strong>additive way</strong>, the numbers of this number can only be <strong>one</strong>.</span></p>\r\n<p><span style="font-size: large;">&nbsp; 3.Only <strong>I</strong> can put the left of <strong>V</strong> or <strong>X</strong> ,as a smaller number.</span></p>\r\n<p><span style="font-size: large;">&nbsp; 4.Only <strong>X</strong> can put the left of <strong>L&nbsp;</strong>or <strong>C</strong> ,as a smaller number.</span></p>\r\n<p><span style="font-size: large;">&nbsp;&nbsp;Example:</span></p>\r\n<p><span style="font-size: large;">&nbsp;&nbsp;One digit: ( I , 1) , ( II , 2) , ( IV , 4) , ( VII , 7 ) , ( IX , 9 ) , ( X , 10 ) .</span></p>\r\n<p><span style="font-size: large;">&nbsp;&nbsp;Two digit: ( X , 10) , ( XI , 11) , ( XII , 12 ) , ( XIII , 13 ) , ( XIV , 14 ), ( XV , 15 ) , ( XVI , 16 ) , ( XVII , 17) , ( XIX , 19 ) , ( XX , 20 ) , ( XXII , 22 ) , ( XXIX , 29 ) , ( XXX , 30 ) , ( XXXIV , 34 ) ,( XXXIX , 39 ) , ( XL , 40 ) , ( L , 50) , ( LI , 51 ) , ( LX , 60 ) ,( LXV , 65 ) , ( LXXX , 80 ) , ( XC , 90 ) , ( XCIII , 93 ) ,( XCIX , 99 ) .&nbsp;</span></p>\r\n<br/><span style="font-size: large;">&nbsp;&nbsp;Three digit: ( C , 100 ) , ( CC , 200 ) , ( CCC , 300 ) .</span>', '<span style="font-size: large;">&nbsp; &nbsp;The input contains only one case. The first line will have one integer <em><strong>n</strong></em> ( <strong>n</strong> ≦ 100 ). In the next <em><strong>n</strong></em> line, there will have <em><strong>n</strong></em> Roman Numerals. The Roman Numerals are all capital letters. The biggest Roman Numeral will smaller than <strong>400</strong>.</span>', '<span style="font-size: large;">&nbsp; Translate the Ruman Numerals into Arabic numbers.</span>', '3\r\nIV\r\nXI\r\nXVII', '4\r\n11\r\n17', '0', '', '', '2013-11-21 17:44:17', 1, 128, 'N', 27, 55, 0),
(1003, 'Guess Number', '<p><span style="font-size: large;">&nbsp; &nbsp;There have 15 integers:</span></p>\r\n<p><span style="font-size: large;">&nbsp;&nbsp;1644, 1949, 1368, 1912, 618, 2007, 2228, 2010, 54250, 2046, 2012, 1735, 0, 1999, 15.</span></p>\r\n<br/><span style="font-size: large;">&nbsp;&nbsp;But only one is the answer.</span>', '<span style="font-size: large;">&nbsp; &nbsp;None.</span>', '<span style="font-size: large;">&nbsp; &nbsp;The right answer you think.</span>', '', '', '0', '', '', '2013-11-21 17:44:47', 1, 128, 'N', 46, 292, 0),
(1007, 'Steganography', '&nbsp; &nbsp; &nbsp;<span style="font-size: large;">Steganography is the oldest encryption technology. It can use any single article as its cipher. To transmit the code information, you can select one letter from each line, the selected letters will be able to compose a sentence. Let`s explore its mystery.&nbsp;</span>', '&nbsp; &nbsp; &nbsp;<span style="font-size: large;">There is only one input case. The input case contain multiple lines. The first line has a integer <em><strong>n</strong></em> ( <em><strong>n</strong></em> ≦ 100), the next <em><strong>n</strong></em> lines is the given article. And, the last line contains <em><strong>n</strong></em> integers, represent the location of the selected letters. Eac &nbsp;h line of the article, the length will not bigger than </span><em><strong><span style="font-size: large;">100</span></strong></em>.', '<span style="font-size: large;">&nbsp; &nbsp; &nbsp;Print the code information.</span>', '8\r\nI like that.\r\nDon`t Leave Me.\r\nok!\r\nvery good!\r\nDon`t be shy.\r\nThank you.\r\nOh!No!\r\nUbuntu~\r\n1 7 1 1 8 7 5 3', 'ILoveyou', '0', '', '', '2013-11-21 18:06:45', 1, 128, 'N', 35, 65, 0),
(1006, 'Single Number', '<p><span style="font-size: large;">&nbsp; &nbsp; &nbsp;Two singles of the SUTACM, Li3 and LIN, usually drink together. But last month, the situation had changed. Li3 came to the restaurant with his girl-friend! More intolerable is that Li3 and his girlfriend still show loving in front of LIN. But LIN knew Li3 is a very frivolous person, so he asked Li3, what happened to Li3 and his girlfriend. To his surprised, Li3 only told him one sentence, &ldquo; Ri Jiu Sheng Qing .&rdquo;(Forgive LIN&rsquo;s poor English).&nbsp;</span></p>\r\n<div><span style="font-size: large;">&nbsp; &nbsp; Because of the Li3&rsquo;s hypocritical, LIN was too angry that began to study math. He found an interesting integer sequence. The sequence&rsquo;s length is an odd number, and except only one number, the sequence can be found in any one of a number that has the same number form a two-number pair. Looking at the single number, LIN thinks of himself. So he wants to find the single number of the sequence in a <strong>faster</strong> way. Intelligent acmers, can you help LIN to solve the problem?</span></div>', '<span style="font-size: large;">&nbsp; &nbsp; The input has several cases. For each case, the first line contains a positive odd integer <em><strong>n</strong></em> ( <em><strong>n</strong></em> ≦ 10<sup>8</sup> ), the length of the sequence. The next line contains <em><strong>n</strong></em> numbers of the sequence.</span>', '<span style="font-size: large;">&nbsp; &nbsp; &nbsp;Output the single number.</span>', '5\r\n1 6 2 6 1\r\n3\r\n1 2 1', 'Case #1: 2\r\nCase #2: 2', '0', '', '', '2013-11-21 18:03:49', 2, 128, 'N', 31, 105, 0),
(1008, 'Easy Problem', '<span style="font-size: large;">&nbsp; &nbsp; If you read this page first. Congratulation! Because this is the easiest problem in the contest. You just need to input one integer <em><strong>a</strong></em>, and the result <em><strong>b</strong></em> equals <em><strong>a</strong></em> <strong>MOD</strong> three.</span>', '<span style="font-size: large;">&nbsp; &nbsp; The input contains several test cases. Each test case only consists one integer <em><strong>a</strong></em>.</span>', '<span style="font-size: large;">&nbsp; &nbsp; &nbsp;Print <em><strong>b</strong></em>.</span>', '1\r\n2\r\n360360368', '1\r\n2\r\n2', '0', '', '', '2013-11-21 18:13:05', 7, 128, 'N', 44, 193, 0),
(1004, 'Tora Tora Tora', '<span style="font-size: large;">&nbsp; Tora! Tora! Tora! Japan declared war on the U.S., ready bombed Pearl Harbor. Japanese officers assigned to each pilot bombing targets, If the bombs fell on a specified point, line or coordinate surrounded graphic ( The graphic must be a convex polygon ), the pilot completed the task.&nbsp;</span>', '<span style="font-size: large;">&nbsp; &nbsp;The input has&nbsp;several cases. Each case has three lines, the first line is the number of the coordinates <em><strong>n</strong></em> ( <em><strong>n</strong></em> ≦ 50 ), the second line is the coordinates <em><strong>x<sub>i</sub> y</strong><sub><strong>i</strong></sub></em> which the officer assigned. The third line is the the pilot dropping bombs coordinates. When <em><strong>n</strong></em> &gt; 3, the giver point will be able to form a closed figure.&nbsp;</span>', '<span style="font-size: large;">&nbsp; Each case only contains one input in one line. If the pilot complete the task, print YES. Else, print NO.</span>', '4\r\n1 0 0 1 0 0 1 1\r\n0.5 0.5\r\n3\r\n1 0 0 1 0 0\r\n1 1\r\n2\r\n0 0 0 1\r\n0 0.5\r\n1\r\n0 0 \r\n0 0', 'Case #1: YES\r\nCase #2: NO\r\nCase #3: YES\r\nCase #4: YES', '0', '', '', '2013-11-21 17:45:01', 1, 128, 'N', 4, 27, 0),
(1005, 'Tower for Number', '<p><span style="font-size: large;">&nbsp; Intelligent acmers, there is a new problem need to be solved. There is such a structure, it`s called <strong>Tower for Number</strong> . It`s has a structure as shown in the following figure:</span></p>\r\n<p></p>\r\n<p style="text-align: center;"><img src="/oj/upload/201311/image/1(2).png" width="300" height="165" alt="" /></p>\r\n<br />\r\n<a style="text-align: left;">&nbsp; &nbsp;&nbsp;<span style="font-size: large;color:black;">Each babble has a number, according to the size of the number, obtained by the above under, to calculate the maximum number of the Tower. For example: The maximum path is: 5&rarr;3&rarr;10&rarr;8, the maximum number is: 5+3+10+8 = 26.</span></a>', '<span style="font-size: large;">&nbsp; &nbsp; The input has several cases. For each case, the first line is the height of the tower <em><strong>h</strong></em> ≦ 100, the next <em><strong>h</strong></em> lines, the <em><strong>i-th</strong></em> line contains <em><strong>i</strong></em> numbers, as the number of the babble.</span>', '<span style="font-size: large;">&nbsp; &nbsp; Print the maximum number of the Tower.</span>', '4\r\n5\r\n3 9\r\n10 6 1\r\n8 6 2 7', '26', '0', '', '', '2013-11-23 09:32:00', 1, 128, 'N', 29, 59, 0),
(1009, 'Joker', '<div>Drizzt从牌堆中抽出8张牌，&ldquo;今天是我的幸运日&rdquo;&mdash;&mdash;Drizzt狡黠地笑着并这样说道。毫无疑问，他抓了一手好牌。</div>\r\n<div>（1）<span class="Apple-tab-span" style="white-space:pre">	</span>求出Drizzt说自己手中有王的情况下，手中有两张王的概率。</div>\r\n<div>（2）<span class="Apple-tab-span" style="white-space:pre">	</span>求出Drizzt说自己手中有大王的情况下，手中有两张王的概率。</div>\r\n<div></div>', '<div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">#include&lt;stdio.h&gt;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">int main()</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">{</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>printf(&quot;0.11111 0.11111&quot;);</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>return 0;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">}</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<p><br style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);" />\r\n<span style="font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">//请将0.11111 0.11111替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;</span></p>\r\n<p></p>\r\n</div>\r\n<div></div>\r\n<div>Tips:（1）每副扑克共有54张牌。</div>\r\n<div>&nbsp; &nbsp; &nbsp; &nbsp;（2）结果保留5位小数。</div>\r\n<div></div>', '', '', '', '0', '<div></div>\r\n<div></div>', '', '2013-11-21 19:55:15', 1, 128, 'N', 19, 89, 0),
(1018, 'The Max', '&nbsp;Let`s have another easy problem. There are n integers. Each of them won`t be less than 0. You need to find out the max number of them.', 'The input contains two lines. The first line only has one integer n mentioned above. The second line contains n non-negative integers. ( 1&lt;= n &lt;=2000)&nbsp;', '&nbsp;The output should has only one integer which is the max of the n integers.', '10\r\n9 7 8 6 5 10 8 7 9 4', '10', '0', '', '', '2013-11-19 16:08:40', 1, 128, 'N', 20, 55, 0),
(1019, 'Strings', '<div>Li3 adores strings. But most of all he adores strings of length n.</div>\r\n<div>One day he wanted to find a string that meets the following conditions:</div>\r\n<div>The string consists of n lowercase English letters (that is, the string''s length equals n), exactly k of these letters are distinct.</div>\r\n<div>No two neighbouring letters of a string coincide; that is, if we represent a string as s&thinsp;=&thinsp;s1s2... sn, then the following inequality holds,si&thinsp;&ne;&thinsp;si&thinsp;+&thinsp;1(1&thinsp;&le;&thinsp;i&thinsp;&lt;&thinsp;n).</div>\r\n<div>Among all strings that meet points 1 and 2, the required string is lexicographically smallest.</div>\r\n<div>Help him find such string or state that such string doesn''t exist.</div>\r\n<div>String x&thinsp;=&thinsp;x1x2... xp is lexicographically less than string y&thinsp;=&thinsp;y1y2... yq, if either p&thinsp;&lt;&thinsp;q and x1&thinsp;=&thinsp;y1,&thinsp;x2&thinsp;=&thinsp;y2,&thinsp;... ,&thinsp;xp&thinsp;=&thinsp;yp, or there is such number r (r&thinsp;&lt;&thinsp;p,&thinsp;r&thinsp;&lt;&thinsp;q), that x1&thinsp;=&thinsp;y1,&thinsp;x2&thinsp;=&thinsp;y2,&thinsp;... ,&thinsp;xr&thinsp;=&thinsp;yr and xr&thinsp;+&thinsp;1&thinsp;&lt;&thinsp;yr&thinsp;+&thinsp;1. The characters of the strings are compared by their ASCII codes.</div>\r\n<div></div>', 'There are multiple test cases. Each case contains contains two positive integers n and k in a line (1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;106,&thinsp;1&thinsp;&le;&thinsp;k&thinsp;&le;&thinsp;26) &mdash; the string''s length and the number of distinct letters.', 'Each case has a single line print the required string. If there isn''t such string, print &quot;-1&quot; (without the quotes).', '7 4\r\n4 7\r\n', 'ababacd\r\n-1\r\n', '0', '', '', '2013-11-19 19:17:58', 1, 128, 'N', 1, 24, 0),
(1010, '醉汉狱卒', '推进城（Impel down）有N个牢房，每个牢房都关着一个犯人，所有牢房都上着锁。一天晚上，监狱长汉尼拔觉得无聊，决定玩一个游戏： <br />\r\n<br />\r\n游戏的的1轮，他拿着一瓶威士忌，打开每个牢房的锁；第2轮，他又拿了一瓶威士忌，然后锁上编号为偶数的牢房（2，4，6，？）；第3轮，他再拿一瓶威士忌，然后来到所有编号为三的倍数的牢房前（3，6，9，？），如果牢房是锁着的，他打开该牢房，如果牢房已经被打开，他便锁上。<br />\r\n<br />\r\n他这样重复这N轮，直到喝光最后一瓶威士忌，醉醺醺地回去睡觉了。所有在监狱长回去睡觉后牢门还开着的囚犯（可能为零）集体越狱了，狱卒对此无能为力。下面给出牢房数量N，试确定有多少囚犯逃出监狱。<br />\r\n\r\nN=10,10000, 65536,123456789,987654321', '<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">#include&lt;stdio.h&gt;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">int main()</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">{</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>printf(&quot;11 11 11 11 11&quot;);</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>return 0;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">}</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<br/><br style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);" />\r\n<span style="font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;</span>', '', '', '', '0', '', '', '2013-11-21 19:38:13', 1, 128, 'N', 19, 74, 0),
(1011, '0 1', '<div><span class="Apple-tab-span" style="white-space:pre">	</span>给出一个01串，前一行的1在该行由10代替；前一行的0在该行由01代替，演示如下：</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>1</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>10</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>1001</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>10010110</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>1001011001101001</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>请求出第7，8，9，10，11行 &ldquo;00&rdquo;出现的个数。</div>', '<p>&nbsp;<span style="background-color: rgb(253, 253, 253); font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px;">#include&lt;stdio.h&gt;</span></p>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">int main()</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">{</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>printf(&quot;11 11 11 11 11&quot;);</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>return 0;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">}</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<br style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);" />\r\n<span style="font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;</span>', '', '', '', '0', '', '', '2013-11-21 19:38:52', 1, 128, 'N', 25, 70, 0),
(1012, '勇敢者的游戏', '<p>&nbsp;<span style="font-size: 12px;">Dannie和Woart在公园玩耍时，意外地发现了一个石板，上面记载着如下一个游戏：</span></p>\r\n<div>1、本游戏是一个二人游戏;</div>\r\n<div>2、一堆石子一共有n个；</div>\r\n<div>3、两人轮流进行;</div>\r\n<div>4、每次可以取走1&hellip;m个石子；</div>\r\n<div>5、正好取光石子的一方为胜；</div>\r\n<div></div>\r\n<div>Dannie先取，现给出n和m,如果游戏的双方使用的都是最优策略，请确定哪个人能赢。</div>\r\n<div>n:<span class="Apple-tab-span" style="white-space:pre">	</span>4<span class="Apple-tab-span" style="white-space:pre">	</span>10<span class="Apple-tab-span" style="white-space:pre">	</span>23<span class="Apple-tab-span" style="white-space:pre">	</span>50<span class="Apple-tab-span" style="white-space:pre">	</span>100 &nbsp;&nbsp;512</div>\r\n<div>m: <span class="Apple-tab-span" style="white-space:pre">	</span>3<span class="Apple-tab-span" style="white-space:pre">	</span>4<span class="Apple-tab-span" style="white-space:pre">	</span>2<span class="Apple-tab-span" style="white-space:pre">	</span>6<span class="Apple-tab-span" style="white-space:pre">	</span>10<span class="Apple-tab-span" style="white-space:pre">	</span>&nbsp;3</div>\r\n<div></div>', '<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">#include&lt;stdio.h&gt;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">int main()</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">{</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>printf(&quot;<span style="background-color: rgb(255, 255, 255); font-family: Arial, Verdana, sans-serif; font-size: 12px;">Dannie Woart&nbsp;</span><span style="background-color: rgb(255, 255, 255); font-family: Arial, Verdana, sans-serif; font-size: 12px;">Dannie Woart&nbsp;</span><span style="background-color: rgb(255, 255, 255); font-family: Arial, Verdana, sans-serif; font-size: 12px;">Dannie Woart</span>&quot;);</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>return 0;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">}</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<br style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);" />\r\n<span style="font-size: 12px; line-height: 15.994318008422852px;">//请将Dannie Woart&nbsp;</span><span style="font-size: 12px; line-height: 15.994318008422852px;">Dannie Woart&nbsp;</span><span style="font-size: 12px; line-height: 15.994318008422852px;">Dannie Woart</span><span style="background-color: rgb(253, 253, 253); font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px;">替换成你想提交的答案并提交，每组数据用空格隔开，区分大小写&nbsp;</span>', '', '', '', '0', '', '', '2013-11-21 19:43:47', 1, 128, 'N', 24, 127, 0),
(1013, '分水果', '<div>将M个相同的苹果放到N个相同的盘子中，一共有多少种放法？下给出M、N,确定每组对应的M和N有多少种放法。</div>\r\n<div>M: 3 &nbsp; &nbsp;6<span class="Apple-tab-span" style="white-space:pre">	</span>7 &nbsp; &nbsp;7 &nbsp;&nbsp;&nbsp;&nbsp;8</div>\r\n<div>N: 3<span class="Apple-tab-span" style="white-space:pre">	</span>&nbsp;&nbsp;4<span class="Apple-tab-span" style="white-space:pre">	</span>5 &nbsp; &nbsp;7 &nbsp;&nbsp;100</div>\r\n<div></div>\r\n', '<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">#include&lt;stdio.h&gt;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">int main()</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">{</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>printf(&quot;11 11 11 11 11&quot;);</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"><span class="Apple-tab-span" style="margin: 0px; padding: 0px; white-space: pre;">	</span>return 0;</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);">}</div>\r\n<div style="margin: 0px; padding: 0px; font-family: ''Times New Roman''; font-size: 13.63636302947998px; line-height: 15.994318008422852px; background-color: rgb(253, 253, 253);"></div>\r\n<p style="margin: 0px 0px 20px; padding: 0px; line-height: 1.38em; font-family: ''Times New Roman''; font-size: 13.63636302947998px; background-color: rgb(253, 253, 253);"></p>\r\n<br/><span style="line-height: 15.994318008422852px; background-color: rgb(253, 253, 253); font-family: ''Times New Roman''; font-size: 13.63636302947998px;">//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开</span>&nbsp;', '', '', '', '0', '', '', '2013-11-21 19:47:17', 1, 128, 'N', 23, 89, 0),
(1014, '暖壶魔咒', '<p>&nbsp;<span style="font-size: 12px;">Zhen下晚自习去打热水打算回寝室泡杯面，在冬天能吃到热腾腾的泡面，快哉快哉！然而到达热水房之后Zhen他发现自己的暖壶不见了，一定又是谁拿错了！内心愤怒的Zhen下了这样的魔咒：所有人都拿不到自己的暖壶！</span></p>\r\n<div>假设有N个人取走了在暖壶架上放了N个暖壶。现给出N，试确定&ldquo;没有任何一个人拿走的自己的暖壶&rdquo;有多少种情况。</div>\r\n<div></div>\r\n<div>N=4,7,10</div>\r\n<div></div>', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>printf(&quot;11 11 11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<div></div>\r\n<div>//请将11 11 11替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;</div>', '', '', '', '0', '', '', '2013-11-21 19:49:07', 1, 128, 'N', 16, 59, 0),
(1015, '走迷宫', '<p>&nbsp;给你一个6*6*6的三维迷宫，下面6张图分别代表一层迷宫的状况，图中白色的格子可走，黑色的格子不能走，每一步可以走到上下前后左右六个相邻的格子中的一个，或从一个传送门到达另一个图案相同的传送门（由○和△表示）。现在你的起点在第一张左上角的S点，现在有5个点A,B,C,D,E,分别求出S到A,B,C,D,E的最小步数。</p>\r\n<br/><img src="/oj/upload/201311/migong.png" width="500" height="335" alt="" />', '<p>&nbsp;<span style="font-size: 12px;">#include&lt;stdio.h&gt;</span></p>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>printf(&quot;11 11 11 11 11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<div></div>\r\n<div>//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;</div>', '', '', '', '0', '', '', '2013-11-22 21:02:36', 1, 128, 'N', 7, 78, 0),
(1016, '蚂蚁Say Hellow', '<p>&nbsp;<span style="font-size: 12px;">n只蚂蚁均以每秒1cm的速度在长为Lcm的长杆上爬行。两只蚂蚁碰头时，会打个招呼然后沿各自相反方向爬回去；当蚂蚁爬到两端（0cm或lcm）会掉下来；所有的蚂蚁开始时位于不同的整数点,且不位于0cm和Lcm处(不位于两端)。现给出杆长l,蚂蚁数量n及每只蚂蚁的起始位置和方向，求所有蚂蚁一共走了多远。</span></p>\r\n<div></div>\r\n<div>Test 1: l=3，n=2;m1(第一只蚂蚁)位于x=1cm向右，m2位于x=2cm向左；</div>\r\n<div></div>\r\n<div>Test 2: l=10, n=9;m1~m5位于x=1,3,5,7,9cm向右，m6~m9位于x=2,4,6,8cm向左</div>\r\n<div></div>\r\n<div>Test 3: l=99, n=98;m1~49位于 x=1,2,3&hellip;48,49cm处向右，m50~98位于x=50,51&hellip;97,98向左</div>\r\n<div></div>', '<p>&nbsp;<span style="font-size: 12px;">#include&lt;stdio.h&gt;</span></p>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>printf(&quot;11 11 11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<div></div>\r\n<div>//请将11 11 11替换成你想提交的答案并提交，每组数据用空格隔开</div>', '', '', '', '0', '', '', '2013-11-21 19:53:14', 1, 128, 'N', 19, 72, 0),
(1017, ' First Problem', 'Welcome to the acmers` world! This problem is the first in the warm-up match. So, it is the easiest problem. There has two integers A and B. &nbsp;Your task is to caculate A+B.', '&nbsp;The input has several cases. In each line, there will be two integers A and B.', '&nbsp;The result of A+B.', '1 2\r\n2 3\r\n100 101\r\n', '3\r\n5\r\n201\r\n', '0', '', '', '2013-11-19 15:55:41', 1, 128, 'N', 24, 71, 0),
(1020, 'Segments', '<div>Li3 adores integer segments, that is, pairs of integers [l; r] (l&thinsp;&le;&thinsp;r).</div>\r\n<div>He has a set that consists of n integer segments: [l1; r1],&thinsp;[l2; r2],&thinsp;...,&thinsp;[ln; rn]. We know that no two segments of this set intersect. In one move Li3 can either widen any segment of the set 1 unit to the left or 1 unit to the right, that is transform [l; r] to either segment[l&thinsp;-&thinsp;1; r], or to segment [l; r&thinsp;+&thinsp;1].</div>\r\n<div>The value of a set of segments that consists of n segments [l1; r1],&thinsp;[l2; r2],&thinsp;...,&thinsp;[ln; rn] is the number of integers x, such that there is integer j, for which the following inequality holds, lj&thinsp;&le;&thinsp;x&thinsp;&le;&thinsp;rj.</div>\r\n<div>Find the minimum number of moves needed to make the value of the set of Li3''s segments divisible by k</div>\r\n<div></div>\r\n', '\r\n<div>There are multiple test cases. In each case, the first line contains&nbsp;two integers n and k (1&thinsp;&le;&thinsp;n,&thinsp;k&thinsp;&le;&thinsp;105). Each of the following n lines contain a segment as a pair of integers li and ri (&thinsp;-&thinsp;105&thinsp;&le;&thinsp;li&thinsp;&le;&thinsp;ri&thinsp;&le;&thinsp;105), separated by a space.</div>\r\n<div>It is guaranteed that no two segments intersect. In other words, for any two integers i,&thinsp;j (1&thinsp;&le;&thinsp;i&thinsp;&lt;&thinsp;j&thinsp;&le;&thinsp;n) the following inequality holds,min(ri,&thinsp;rj)&thinsp;&lt;&thinsp;max(li,&thinsp;lj).</div>', '<div>\r\n<div>Each case has a single line print a single integer &mdash; the answer to the problem.</div>\r\n</div>', '2 3\r\n1 2\r\n3 4', '2', '0', '', '', '2013-11-19 19:09:33', 1, 128, 'N', 1, 3, 0),
(1021, 'The max of array', 'There are a positive integer N (2&lt;= N &lt;=100 ), and a array which has 2N-1 positive integers. Each operation, you can take any N integers out of the array, &nbsp;multiplied by -1, and put them in the array. Can you make the sum of every integer in the array is the max, after several times operation?&nbsp;', 'The input has several cases. In each case, there will be a positive integer N in the first line. And in the next line, there have 2N-1 positive integers.&nbsp;', 'The max of the array.&nbsp;', '2 50 50 50\r\n2 -1 -100 -1', '150\r\n100', '0', '', '', '2013-11-19 15:58:21', 1, 128, 'N', 0, 14, 0),
(1024, '分割平面', '<span style="font-size: 12px;">平面上N条直线最多能把平面分成几个部分?</span><br/>\r\n<div>N:8，50，99</div>\r\n<div></div>', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>printf(&quot;11 11 11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<br/>//请将11 11 11替换成你想提交的答案并提交，每组数据用空格隔开&nbsp;', '', '', '', '0', '', '', '2013-11-19 22:29:43', 1, 128, 'N', 19, 31, 0),
(1023, '慧月桥', '&nbsp;<span style="font-size: 12px;">光棍节Zhen孤独地走在慧月桥上，身边走过的既有甜蜜的情侣，也有不食人间烟火的学霸。Zhen面对脚下的15级台阶不禁陷入了人生的沉思，下一步是应该下两阶还是三阶？</span></p>\r\n<div>现有15级台阶，Zhen每次只能迈2级台阶或3级台阶，最后一步必须正好下桥，问有多少种走法？</div>\r\n<div></div>', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>printf(&quot;11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<br/>//请将11替换成你想提交的答案并提交', '', '', '', '0', '', '', '2013-11-19 22:30:18', 1, 128, 'N', 18, 44, 0),
(1022, '捕鱼达人', 'Yu玩捕鱼达人游戏，他向一只鲨鱼发射三发炮弹（每弹击中这只鲨鱼与否相互独立），每发炮弹击中鲨鱼的概率为 0.7，若鲨鱼被击中一次，鲨鱼被捕获的概率为0.1；若鲨鱼被击中两次，鲨鱼被捕获的概率为0.2；若鲨鱼被击中三次，鲨鱼被捕获概率为0.3。求能抓到这只鲨鱼的概率。', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>printf(&quot;11.11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space:pre">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<br/>//请将11.11替换成你想提交的答案并提交&nbsp;每组答案用一个空格隔开。', '', '', '', '0', '', '', '2013-11-19 22:26:07', 1, 128, 'N', 19, 51, 0),
(1025, '数矩形', '&nbsp;<span style="font-size: 12px;">一个由M*N个方格组成的矩形内共含有多少个矩形？现给出M和N，请求出对应的方格内包含几个矩形。</span><br/>\r\n<div>例：1*2方格内有3个矩形。</div>\r\n<div>M：2、5、13、17，48</div>\r\n<div>N：2、10、17、23 、48</div>\r\n<div></div>', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>printf(&quot;11 11 11 11 11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<br/>//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开', '', '', '', '0', '', '', '2013-11-19 22:29:01', 1, 128, 'N', 17, 29, 0),
(1026, '猜数字', '本题答案为1~10中的一个，是否能一次AC就看你的运气了~&nbsp;', '<div>#include&lt;stdio.h&gt;</div>\r\n<div>int main()</div>\r\n<div>{</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>printf(&quot;11&quot;);</div>\r\n<div><span class="Apple-tab-span" style="white-space: pre;">	</span>return 0;</div>\r\n<div>}</div>\r\n<div></div>\r\n<br/>//请将11替换成你想提交的答案并提交', '', '', '', '0', '', '', '2013-11-19 22:26:39', 0, 0, 'N', 18, 82, 0);

-- --------------------------------------------------------

--
-- 表的结构 `reply`
--

CREATE TABLE IF NOT EXISTS `reply` (
  `rid` int(11) NOT NULL AUTO_INCREMENT,
  `author_id` varchar(48) NOT NULL DEFAULT '' COMMENT 'user_id',
  `time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `content` text NOT NULL,
  `topic_id` int(11) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0',
  `ip` varchar(30) NOT NULL,
  PRIMARY KEY (`rid`),
  KEY `author_id` (`author_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `runtimeinfo`
--

CREATE TABLE IF NOT EXISTS `runtimeinfo` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `error` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `runtimeinfo`
--

INSERT INTO `runtimeinfo` (`solution_id`, `error`) VALUES
(4, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(5, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(7, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(9, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(10, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n-2\n\n=================\n'),
(12, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(13, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(14, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(16, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n=================\n'),
(15, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(17, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(18, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(20, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(21, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(22, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n54250\n\n=================\n'),
(24, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(25, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(26, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(30, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(32, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(31, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(34, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n=================\n'),
(35, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(36, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(38, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(42, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(43, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(46, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(47, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(48, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n=================\n'),
(50, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(55, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.73208\n=================\n'),
(57, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(58, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(60, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(61, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n0943 0.01886\n=================\n'),
(64, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(65, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(66, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(67, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(68, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(69, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(72, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(73, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(76, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(75, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(78, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n32 64 128 256 512\n=================\n'),
(79, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(80, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(82, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n=================\n'),
(83, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1887 0.03774\n=================\n'),
(84, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n32 64 128 256 512\n=================\n'),
(87, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(86, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-9223372036854775808\n\n=================\n'),
(89, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(90, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(91, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n1999\n\n=================\n'),
(92, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(94, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(95, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n2228\n\n=================\n'),
(96, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(97, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(98, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n2\n=================\n'),
(99, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(102, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1725\n\n=================\n'),
(103, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n1735\n\n=================\n'),
(104, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n2228\n\n=================\n'),
(106, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(107, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(109, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1887 0.12858\n=================\n'),
(110, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(112, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(111, '=================/test.out\nRight:\n75808\n\n-----------------\nYour:\n96288\n\n=================\n'),
(114, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(115, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(117, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(118, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(119, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(120, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(121, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(124, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(125, '=================/test.out\nRight:\n071 0.13208\n-----------------\nYour:\n609 0.13208\n=================\n'),
(127, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(128, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(131, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560\n\n=================\n'),
(134, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(135, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(136, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(137, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n29442\n=================\n'),
(138, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n1368\n\n=================\n'),
(139, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(141, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n3665 0.13208\n=================\n'),
(144, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(148, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(151, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n9 21 44 85 171\n=================\n'),
(150, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(152, '=================/test.out\nRight:\n071 0.13208\n-----------------\nYour:\n609 0.13208\n=================\n'),
(153, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n6 12 24 48 96\n=================\n'),
(155, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(158, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(159, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(161, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(162, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n5 9 13 21 37\n=================\n'),
(163, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(164, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(166, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(168, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(169, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(171, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(172, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(176, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(177, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n8 13 15 22\n=================\n'),
(178, '=================/test.out\nRight:\n1 21 43 85 171\n-----------------\nYour:\n2 24 48 96 192\n=================\n'),
(180, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(179, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(181, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(182, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(183, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(184, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(186, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(188, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(190, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(193, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(194, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(195, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(197, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(198, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(199, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(200, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(201, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n12963 0.06481\n\n=================\n'),
(202, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(205, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(206, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(207, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n55 4900\n=================\n'),
(208, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(210, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(211, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(212, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(214, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(216, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n7 201 511 22223 62853\n=================\n'),
(217, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(218, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n64 128 256 512 1024\n=================\n'),
(219, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(221, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(225, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n2 8 13 15 22\n=================\n'),
(228, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(227, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(229, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(230, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(236, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(235, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(237, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n8 16 32 64 128\n=================\n'),
(238, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n'),
(240, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(241, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(243, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n60 4600\n=================\n'),
(245, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(246, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(247, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-7.51791e+23\n\n=================\n'),
(248, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(249, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 1668 32764 41728394 49382716\n=================\n'),
(250, 'Runtime Error:Segmentation fault\n'),
(254, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(255, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(259, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(258, 'Runtime Error:Segmentation fault\n'),
(257, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(260, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(261, '=================/test.out\nRight:\n921217\r\n\n-----------------\nYour:\n25019\n\n=================\n'),
(262, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(263, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 6 6 4 4\n=================\n'),
(267, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n=================\n'),
(268, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n7 16 11 13 12\n=================\n'),
(269, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n=================\n'),
(270, '=================/test.out\nRight:\nWoart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Dannie Woart Dannie\n=================\n'),
(271, '=================/test.out\nRight:\n2\r\n\n-----------------\nYour:\n'),
(273, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Dannie Woart Dannie Woart\n=================\n'),
(275, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n54250\n=================\n'),
(274, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 20576131 164609053\n=================\n'),
(276, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(277, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(278, '=================/test.out\nRight:\n223372036854775808\n\n-----------------\nYour:\n.22337e+18\n\n=================\n'),
(279, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(280, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n=================\n'),
(281, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 13108 24691358 197530865\n=================\n'),
(283, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n=================\n'),
(286, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(287, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(291, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(293, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(295, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie\n=================\n'),
(297, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(299, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(301, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(302, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(303, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(305, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n77778 0.43750\n=================\n'),
(306, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(307, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n=================\n'),
(309, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(310, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Woart\n=================\n'),
(313, '=================/test.out\nRight:\n2\n-----------------\nYour:\n0\n=================\n'),
(312, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(314, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(316, '=================/test.out\nRight:\n223372036854775808\n\n-----------------\nYour:\n.22337e+18\n\n=================\n'),
(317, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n=================\n'),
(318, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(319, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 13108 24691358 197530865\n=================\n'),
(320, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n=================\n'),
(321, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n1\n\n=================\n'),
(323, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(324, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n9 21 21 40 40\n=================\n'),
(325, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n=================\n'),
(327, '=================/test.out\nRight:\n1 43 85 171\n-----------------\nYour:\n2 44 88 176\n=================\n'),
(329, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(326, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n63636 0.43750\n=================\n'),
(328, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n888679\n\n=================\n'),
(331, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(333, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 13108 24691358 197530865\n=================\n'),
(334, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n3 6 9\n=================\n'),
(335, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 5001 32769 62728394 493827160\n=================\n'),
(336, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-11\n\n=================\n'),
(337, '=================/test.out\nRight:\n921217\r\n\n-----------------\nYour:\n888679\n\n=================\n'),
(338, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 13108 24691358 197530865\n=================\n'),
(340, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n618\n=================\n'),
(339, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(341, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n101000065536123456789987654320\n\n=================\n'),
(342, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n=================\n'),
(343, 'Runtime Error:Segmentation fault\n'),
(345, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(346, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n63636 0.77778\n=================\n'),
(347, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(349, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n0135 0.00270\n=================\n'),
(350, '=================/test.out\nRight:\n 1854 1334961\n-----------------\nYour:\n3681\n=================\n'),
(351, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n=================\n'),
(354, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(355, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n=================\n'),
(357, 'Runtime Error:Segmentation fault\n'),
(360, '=================/test.out\nRight:\nYES\n\n-----------------\nYour:\nNO\n\n=================\n'),
(362, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(363, '=================/test.out\nRight:\n921217\r\n\n-----------------\nYour:\n888679\n\n=================\n'),
(364, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n7 10 12 20\n=================\n'),
(365, '=================/test.out\nRight:\n1 21 43 85 171\n-----------------\nYour:\n0 20 38 78 156\n=================\n'),
(366, 'Runtime Error:Segmentation fault\n'),
(367, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(368, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(369, '=================/test.out\nRight:\n0.07071 0.13208\n-----------------\nYour:\n2.07407 1.03704\n=================\n'),
(371, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6604 0.13208\n=================\n'),
(372, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Woart\n=================\n'),
(373, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(375, '=================/test.out\nRight:\n 100 256 11111 31426\n-----------------\nYour:\n1426\n=================\n'),
(376, 'Runtime Error:Segmentation fault\n'),
(377, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6195 0.13208\n\n=================\n'),
(379, '=================/test.out\nRight:\n5 171\n-----------------\nYour:\n7 175\n=================\n'),
(380, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(381, 'Runtime Error:Segmentation fault\n'),
(382, 'Runtime Error:Segmentation fault\n'),
(385, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Dannie Dannie Dannie Dannie\n=================\n'),
(386, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Dannie\n=================\n'),
(387, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n4 4999 32767 61728394 493827160\n=================\n'),
(388, '=================/test.out\nRight:\n2418041\n\n-----------------\nYour:\n1590617\n\n=================\n'),
(390, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(393, 'Runtime Error:Segmentation fault\n'),
(394, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 84 168\n=================\n'),
(396, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(398, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(400, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(401, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 6000 6556 12345682 98765433\n=================\n'),
(403, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(404, 'Runtime Error:Segmentation fault\n'),
(406, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(407, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(412, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(415, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(418, '=================/test.out\nRight:\n1\n-----------------\nYour:\n0\n=================\n'),
(423, '=================/test.out\nRight:\n252\n-----------------\nYour:\n154\n=================\n'),
(425, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n03 09 12 14 20\n=================\n'),
(424, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(426, '=================/test.out\nRight:\n0.07071 0.13208\n-----------------\nYour:\n2.07407 1.03703\n=================\n'),
(428, 'Runtime Error:Segmentation fault\n'),
(429, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n1 82 163\n=================\n'),
(430, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(432, '=================/test.out\nRight:\n1 43 85 171\n-----------------\nYour:\n3 47 95 191\n=================\n'),
(433, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 14 12\n=================\n'),
(434, '=================/test.out\nRight:\n22\n\n-----------------\nYour:\n30\n\n=================\n'),
(435, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 74 300 1716 140614637726\n=================\n'),
(436, '=================/test.out\nRight:\n21 43 85 171\n-----------------\nYour:\n11 24 42 85\n=================\n'),
(438, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n9 7154\n=================\n'),
(441, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n=================\n'),
(443, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n2\n\n=================\n'),
(445, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(447, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(448, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(449, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n1 2 2 1 1\n=================\n'),
(451, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(452, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n40 259 820\n=================\n'),
(453, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(454, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n9 7252\n=================\n'),
(457, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n=================\n'),
(459, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 84 330 1716 325949656825\n\n=================\n'),
(460, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(463, '=================/test.out\nRight:\n4 14 14 13\n-----------------\nYour:\n6 14 10 13\n=================\n'),
(464, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n=================\n'),
(465, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(466, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(468, '=================/test.out\nRight:\n71\n-----------------\nYour:\n50\n=================\n'),
(469, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(470, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n=================\n'),
(471, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(473, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(472, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(475, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(476, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(479, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n15894 0.07947\n=================\n'),
(478, '=================/test.out\nRight:\nWoart\n-----------------\nYour:\nDannie\n=================\n'),
(482, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(484, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(483, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n12 2520 1814400\n=================\n'),
(485, '=================/test.out\nRight:\n921217\r\n\n-----------------\nYour:\n25019\n=================\n'),
(486, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n=================\n'),
(487, '=================/test.out\nRight:\n334961\n-----------------\nYour:\n032561\n\n=================\n'),
(488, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n=================\n'),
(489, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(492, '=================/test.out\nRight:\n252\n-----------------\nYour:\n448\n=================\n'),
(491, '=================/test.out\nRight:\n208\n-----------------\nYour:\n316\n=================\n'),
(493, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(494, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n=================\n'),
(495, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(498, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(500, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(502, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(503, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(507, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(506, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 74 300 1716 326702532025\n=================\n'),
(508, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 84 330 1716 325949656825\n=================\n'),
(510, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(511, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(512, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(513, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(514, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(515, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(517, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n094340 0.017544\n=================\n'),
(518, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(516, '=================/test.out\nRight:\nYES\n\n-----------------\nYour:\nNO\n\n=================\n'),
(519, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(521, 'Runtime Error:Segmentation fault\n'),
(522, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560\n\n=================\n'),
(523, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(524, '=================/test.out\nRight:\n2228\n-----------------\nYour:\nNone\n\n=================\n'),
(525, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(526, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n8 16 32 64 128\n=================\n'),
(527, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(528, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(529, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(534, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Woart\n=================\n'),
(533, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(535, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(537, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(538, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n9 18 11 13 12\n=================\n'),
(539, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n4215 27623 52039415 4327426443\n=================\n'),
(541, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n=================\n'),
(542, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n66 7252\n=================\n'),
(544, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(545, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 36 92 330 372461573717\n=================\n'),
(546, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(548, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n001\n=================\n'),
(549, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n1\n\n=================\n'),
(552, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n'),
(553, '=================/test.out\nRight:\n252\n-----------------\nYour:\n351\n=================\n'),
(554, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n'),
(555, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(556, 'Runtime Error:Segmentation fault\n'),
(557, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n99 250 11111 31000\n=================\n'),
(559, '=================/test.out\nRight:\n4 14 14 13\n-----------------\nYour:\n6 15 10 13\n=================\n'),
(558, '=================/test.out\nRight:\n\n4586997231980143023221641790604173881593129\n-----------------\nYour:\n45869972319801430232216417906041738815931299\n=================\n'),
(560, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00\n=================\n'),
(562, 'Runtime Error:Segmentation fault\n'),
(564, '=================/test.out\nRight:\nWoart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Dannie Dannie Woart\n=================\n'),
(567, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Dannie\n=================\n'),
(569, '=================/test.out\nRight:\nWoart\n-----------------\nYour:\nDannie\n=================\n'),
(570, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(572, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(573, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 15\n=================\n'),
(574, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n=================\n'),
(575, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n29442\n\n=================\n'),
(578, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 83 167\n=================\n'),
(579, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(580, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(582, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(583, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(584, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(586, '=================/test.out\nRight:\n252\n-----------------\nYour:\n139\n=================\n'),
(588, '=================/test.out\nRight:\n1\n\n-----------------\nYour:\n0\n\n=================\n'),
(590, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(595, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n=================\n'),
(594, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n=================\n'),
(597, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n2160 1284080\n=================\n'),
(598, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n=================\n'),
(601, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n6 720 362880\n=================\n'),
(602, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(606, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n7 7 15 21\n=================\n'),
(608, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(609, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(610, 'Runtime Error:Segmentation fault\n'),
(612, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1: 921217\n\n=================\n'),
(613, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560\n\n=================\n'),
(615, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n5 5000 32768 61728394 493827160\n=================\n'),
(614, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(616, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(617, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364331040787585302528\n\n=================\n'),
(618, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(621, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 22\n=================\n'),
(622, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(623, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(624, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 84 300 1716 326702532025\n=================\n'),
(625, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(626, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(628, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(629, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(630, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(631, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(632, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(633, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n99 256 11111 31000\n=================\n'),
(634, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n24 48 96 192 384\n=================\n'),
(637, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(639, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie\n=================\n'),
(638, 'Runtime Error:Segmentation fault\n'),
(640, '=================/test.out\nRight:\n1\n-----------------\nYour:\n0\n=================\n'),
(642, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(643, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(644, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(645, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n31\n\n=================\n'),
(646, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(647, 'Runtime Error:Segmentation fault\n'),
(650, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827159\n=================\n'),
(651, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(652, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1.96136e+24\n\n=================\n'),
(653, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n=================\n'),
(655, '=================/test.out\nRight:\n426\n-----------------\nYour:\n000\n=================\n'),
(657, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n104 4900\n=================\n'),
(656, 'Runtime Error:Segmentation fault\n'),
(658, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n=================\n'),
(659, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(661, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n29442\n\n=================\n'),
(662, 'Runtime Error:Segmentation fault\n'),
(663, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1075 0.02128\n=================\n'),
(664, '=================/test.out\nRight:\n4 45 7252\n-----------------\nYour:\n5 51 9702\n=================\n'),
(665, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(666, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(667, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n'),
(669, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(670, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(672, '=================/test.out\nRight:\n1 43 85 171\n-----------------\nYour:\n2 43 89 171\n=================\n'),
(673, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n3 14 13\n=================\n'),
(674, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n62162 0.13208\n=================\n'),
(676, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(677, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n=================\n'),
(678, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n51 9702\n=================\n'),
(679, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n=================\n'),
(680, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Woart\n=================\n'),
(682, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n3933\n\n=================\n'),
(684, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n3933\n\n=================\n'),
(686, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n=================\n'),
(687, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n2 9 13 15 23\n=================\n'),
(689, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n86 380\n=================\n'),
(690, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(691, '=================/test.out\nRight:\n223372036854775808\n\n-----------------\nYour:\n.22337e+18\n\n=================\n'),
(693, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(694, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n4 4999 32767 61728395 493827161\n=================\n'),
(696, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n=================\n'),
(697, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n');
INSERT INTO `runtimeinfo` (`solution_id`, `error`) VALUES
(698, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n=================\n'),
(699, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n618\n\n=================\n'),
(701, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(702, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n=================\n'),
(705, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1368\n\n=================\n'),
(707, '=================/test.out\nRight:\n43 85 171\n-----------------\nYour:\n39 79 164\n=================\n'),
(708, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(709, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n2 9 13 15 21\n=================\n'),
(711, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n=================\n'),
(712, '=================/test.out\nRight:\n0 256 11111 31426\n-----------------\nYour:\n1 256 11112 31499\n=================\n'),
(713, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n3 12 9 13 12\n=================\n'),
(716, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(717, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(718, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n36 81\n=================\n'),
(719, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(720, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 72 330 1716 318774305125\n=================\n'),
(721, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(722, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n8 16 32 64 128\n=================\n'),
(723, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(724, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(725, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(726, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(729, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(728, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(732, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(733, '=================/test.out\nRight:\n36199066493299823303750152982859705434610073\n-----------------\nYour:\n;3619906649329982330375015298285970543461007\n=================\n'),
(734, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(735, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(736, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(737, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n0\n\n=================\n'),
(739, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n6 5040 3628800\n=================\n'),
(740, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n96226 0.98113\n=================\n'),
(742, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1956 0.01956\n=================\n'),
(741, '=================/test.out\nRight:\n2\n-----------------\nYour:\n0\n=================\n'),
(743, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Dannie\n=================\n'),
(746, '=================/test.out\nRight:\nart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nrat Woart Dannie Woart Dannie Woart\n=================\n'),
(747, '=================/test.out\nRight:\n1\n-----------------\nYour:\n2\n=================\n'),
(748, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n6 720 362880\n=================\n'),
(750, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n0 12 20\n=================\n'),
(751, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(753, '=================/test.out\nRight:\n0\n\n-----------------\nYour:\n5\n\n=================\n'),
(752, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(754, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(755, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n66038 0.13208\n=================\n'),
(756, '=================/test.out\nRight:\n1 43 85 171\n-----------------\nYour:\n2 44 88 176\n=================\n'),
(759, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(761, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n0 12 21\n=================\n'),
(763, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n3 6 9\n=================\n'),
(764, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(765, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(767, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n25 11 2 10 31\n=================\n'),
(769, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Dannie\n=================\n'),
(770, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Dannie\n=================\n'),
(772, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 18\n=================\n'),
(773, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364331040787585302528\n\n=================\n'),
(774, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6604 0.13208\n=================\n'),
(775, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n25019\n\n=================\n'),
(777, '=================/test.out\nRight:\nCase #1: 921217\r\n\n-----------------\nYour:\n25019\n\n=================\n'),
(781, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n6 720 362880\n=================\n'),
(783, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827160\n=================\n'),
(785, 'Runtime Error:Segmentation fault\n'),
(790, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00120012210021111120121122111202010201211112\n=================\n'),
(791, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(794, '=================/test.out\nRight:\n1: YES\n\n-----------------\nYour:\n4:YES\n=================\n'),
(795, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 13108 24691359 197530865\n=================\n'),
(796, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n11 13 15 20\n=================\n'),
(799, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n8 13 15 22\n=================\n'),
(800, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(797, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00120012210021111120121122111202010201211112\n=================\n'),
(802, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(803, '=================/test.out\nRight:\n418041\n\n-----------------\nYour:\n202540\n=================\n'),
(805, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(806, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(807, '=================/test.out\nRight:\n228\n-----------------\nYour:\n007\n\n=================\n'),
(810, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(811, '=================/test.out\nRight:\n2\r\n\n-----------------\nYour:\n'),
(812, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(813, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(814, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00120012210021111120121122111202010201211112\n=================\n'),
(815, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n0010 0.00005\n=================\n'),
(816, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(817, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(818, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(819, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6603 0.13207\n=================\n'),
(822, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(821, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(820, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(825, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(826, '=================/test.out\nRight:\n961\n-----------------\nYour:\n861\n=================\n'),
(829, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n5 10 10 26 26\n=================\n'),
(831, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(832, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(833, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 12 15\n=================\n'),
(835, '=================/test.out\nRight:\n0\n\n-----------------\nYour:\n5\n\n=================\n'),
(834, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n9 14 19 16 13\n=================\n'),
(836, '=================/test.out\nRight:\n1\n-----------------\nYour:\n4\n=================\n'),
(838, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4703\n=================\n'),
(840, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(841, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n31 256 11111 99380\n=================\n'),
(842, '=================/test.out\nRight:\n4 45 7252\n-----------------\nYour:\n2 25 2450\n=================\n'),
(843, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n7 86 240 1716 3754333486705\n=================\n'),
(844, '=================/test.out\nRight:\n418041\n\n-----------------\nYour:\n202540\n\n=================\n'),
(846, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728395 493827161\n=================\n'),
(851, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(852, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(853, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 41152262 329218106\n=================\n'),
(856, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n56604 0.13208\n=================\n'),
(858, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n8 13 15 22\n=================\n'),
(859, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(861, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(862, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(863, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n873 409113\n=================\n'),
(864, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(866, '=================/test.out\nRight:\n071 0.13208\n-----------------\nYour:\n692 0.13208\n=================\n'),
(867, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(869, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 14 17 15 12\n=================\n'),
(871, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(872, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n6938\n=================\n'),
(875, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n10 12 14 20\n=================\n'),
(874, 'Runtime Error:Segmentation fault\n'),
(877, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n576 893025\n=================\n'),
(881, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(882, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(883, '=================/test.out\nRight:\n.07071 0.13208\n-----------------\nYour:\n707071 0.13208\n=================\n'),
(884, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(886, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 15 21\n=================\n'),
(887, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n336 3024\n=================\n'),
(888, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 17 15 12\n=================\n'),
(890, 'Runtime Error:Segmentation fault\n'),
(891, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4851\n=================\n'),
(896, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 15 12\n=================\n'),
(895, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(900, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(899, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00120012210021111120121122111202010201211112\n=================\n'),
(901, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(903, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(904, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n7 86 240 1716 1899891757635\n=================\n'),
(905, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(907, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n9604\n=================\n'),
(909, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(911, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(912, 'Runtime Error:Segmentation fault\n'),
(913, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(915, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1949\n\n=================\n'),
(916, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(917, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n11 13 15 21\n=================\n'),
(919, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 78125 823543 10000000000000000\n=================\n'),
(918, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\nb=0b=0b=0b=1b=2b=0b=0b=1b=2b=2b=1b=0b=0b=2b=\n=================\n'),
(921, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n81 279936 1410065408\n=================\n'),
(924, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(925, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560.000000\n=================\n'),
(927, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n1 10 12 6 4\n=================\n'),
(928, 'Runtime Error:Segmentation fault\n'),
(930, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Woart\n=================\n'),
(931, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1887 0.03774\n=================\n'),
(932, 'Runtime Error:Segmentation fault\n'),
(933, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n6928\n=================\n'),
(934, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(935, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n32 562949953421311\n=================\n'),
(937, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(938, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n00120012210021111120121122111202010201211112\n=================\n'),
(940, 'Runtime Error:Segmentation fault\n'),
(942, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-inf\n=================\n'),
(943, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2501 16385 30864198 246913581\n=================\n'),
(944, 'Runtime Error:Segmentation fault\n'),
(945, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n33333 0.50000\n=================\n'),
(946, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(947, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(949, 'Runtime Error:Segmentation fault\n'),
(952, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n8 11 13 17\n=================\n'),
(956, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 22\n=================\n'),
(962, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n9 11 10 6 5\n=================\n'),
(963, '=================/test.out\nRight:\n1334961\n-----------------\nYour:\n934961\n=================\n'),
(964, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(966, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n5 14 23\n=================\n'),
(968, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n14700\n=================\n'),
(970, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n1 15 22\n=================\n'),
(969, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(973, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 21\n=================\n'),
(974, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(975, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(976, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(978, '=================/test.out\nRight:\n1\n-----------------\nYour:\n2\n=================\n'),
(977, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 15 12\n=================\n'),
(981, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 85 170\n=================\n'),
(982, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(984, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 85 171\n=================\n'),
(985, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(987, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 85 169\n=================\n'),
(991, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n55 7104\n=================\n'),
(992, 'Runtime Error:Segmentation fault\n'),
(993, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 85 172\n=================\n'),
(994, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n2160 1632960\n=================\n'),
(995, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 10 15 6 5\n=================\n'),
(997, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n4 2548\n=================\n'),
(998, '=================/test.out\nRight:\n252\n-----------------\nYour:\n104\n=================\n'),
(999, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 13 12\n=================\n'),
(1005, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1912\n\n=================\n'),
(1006, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(1008, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 22\n=================\n'),
(1007, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(1010, 'Runtime Error:Segmentation fault\n'),
(1011, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 86 171\n=================\n'),
(1012, '=================/test.out\nRight:\n1 43 85 171\n-----------------\nYour:\n2 44 88 176\n=================\n'),
(1015, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6195 0.11667\n=================\n'),
(1014, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n8 12 15 20\n=================\n'),
(1016, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 5001 32769 10298065 82304527\n=================\n'),
(1017, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n14815 0.07407\n=================\n'),
(1021, '=================/test.out\nRight:\nShenyang University of Technology is a piece\n-----------------\nYour:\n=================\n'),
(1024, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n9 21 41 85 169\n=================\n'),
(1025, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart  Woart Dannie Woart\n=================\n'),
(1031, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6604 0.13208\n=================\n'),
(1034, 'Runtime Error:Segmentation fault\n'),
(1036, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n2548\n=================\n'),
(1037, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1039, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie\n=================\n'),
(1040, '=================/test.out\nRight:\n1: YES\n\n-----------------\nYour:\n4:YES\n=================\n'),
(1044, '=================/test.out\nRight:\n071 0.13208\n-----------------\nYour:\n143 0.13208\n=================\n'),
(1049, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n2127 0.04255\n=================\n'),
(1050, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(1051, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n4255 0.02127\n=================\n'),
(1052, 'Runtime Error:Segmentation fault\n'),
(1054, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1055, 'Runtime Error:Segmentation fault\n'),
(1058, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n6 720 362880\n=================\n'),
(1059, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1060, '=================/test.out\nRight:\n\n\n-----------------\nYour:\nm\n=================\n'),
(1061, '=================/test.out\nRight:\nCase #1: YES\n\n-----------------\nYour:\n1999\n=================\n'),
(1062, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n4 7252\n=================\n'),
(1063, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n=================\n'),
(1065, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4852\n=================\n'),
(1064, '=================/test.out\nRight:\n#1: 921217\r\n\n-----------------\nYour:\n1: 15073\n\n=================\n'),
(1066, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n198\n=================\n'),
(1067, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4851\n=================\n'),
(1070, '=================/test.out\nRight:\n921217\r\n\n-----------------\nYour:\n25019\n\n=================\n'),
(1072, 'Runtime Error:Segmentation fault\n'),
(1074, '=================/test.out\nRight:\nShenyang University of Technology is a piece\n-----------------\nYour:\n\n=================\n'),
(1075, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n1 15 21 1 192090729600\n=================\n'),
(1076, '=================/test.out\nRight:\n13208\n-----------------\nYour:\n02357\n=================\n'),
(1077, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1078, '=================/test.out\nRight:\n52\n-----------------\nYour:\n97\n=================\n'),
(1080, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n3 12 11 14 11\n=================\n'),
(1081, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(1083, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1084, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n467\n=================\n'),
(1085, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1086, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n27393 0.13697\n=================\n'),
(1088, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n360 181440\n=================\n'),
(1090, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n=================\n'),
(1091, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1092, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie\n=================\n'),
(1093, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n9 10 16 6 5\n=================\n'),
(1094, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(1095, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Dannie Dannie Dannie Dannie\n=================\n'),
(1096, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(1097, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Woart Dannie Dannie Dannie\n=================\n'),
(1099, '=================/test.out\nRight:\nhenyang University of Technology is a piece \n-----------------\nYour:\n\ne\n\n=================\n'),
(1102, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Woart Woart Dannie Dannie\n=================\n'),
(1103, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 11 10 6 5\n=================\n'),
(1104, '=================/test.out\nRight:\nWoart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Woart Woart Woart Woart Dannie\n=================\n'),
(1106, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n75.5 9750.5\n=================\n'),
(1107, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 90 290 1632 325947185950\n=================\n'),
(1108, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1109, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(1111, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 12 12 11 11\n=================\n'),
(1112, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n3 12 11 14 12\n=================\n'),
(1113, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(1115, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie \n=================\n'),
(1117, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(1119, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n2694 3458672\n=================\n'),
(1120, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n6 7252\n=================\n'),
(1121, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n51 7252\n=================\n'),
(1122, '=================/test.out\nRight:\n071 0.13208\n-----------------\nYour:\n609 0.13208\n=================\n'),
(1123, 'Runtime Error:Segmentation fault\n'),
(1124, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(1125, '=================/test.out\nRight:\n1: YES\n\n-----------------\nYour:\n4:YES\n=================\n'),
(1126, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012 \n\n=================\n'),
(1127, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n0 0 0 0 0\n=================\n'),
(1129, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1130, 'Runtime Error:Segmentation fault\n'),
(1131, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n75 182 668 \n=================\n'),
(1132, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4852\n=================\n'),
(1133, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n8 11 14 11 12\n=================\n'),
(1134, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n432 204120\n=================\n'),
(1138, '=================/test.out\nRight:\n854 1334961\n-----------------\nYour:\n036 366539\n=================\n'),
(1137, 'Runtime Error:Segmentation fault\n'),
(1139, '=================/test.out\nRight:\n2\n-----------------\nYour:\n3\n=================\n'),
(1141, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1142, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4302\n=================\n'),
(1143, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(1145, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1146, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n74 181 668\n=================\n'),
(1147, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(1148, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(1149, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1151, '=================/test.out\nRight:\n854 1334961\n-----------------\nYour:\n938 1223982\n=================\n'),
(1152, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1153, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 72 325 1611 318774305125\n=================\n'),
(1156, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Dannie\n=================\n'),
(1158, '=================/test.out\nRight:\n9\n\n-----------------\nYour:\n1\n\n=================\n'),
(1160, 'Runtime Error:Segmentation fault\n'),
(1161, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n51 9508\n=================\n'),
(1162, 'Runtime Error:Segmentation fault\n'),
(1163, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1166, '=================/test.out\nRight:\n9\n\n-----------------\nYour:\n1\n\n=================\n'),
(1167, '=================/test.out\nRight:\n1\n\n-----------------\nYour:\n=================\n'),
(1168, '=================/test.out\nRight:\n2418041\n\n-----------------\nYour:\n1608149\n\n=================\n'),
(1169, '=================/test.out\nRight:\n 921217\r\n\n-----------------\nYour:\n921217\n\n=================\n'),
(1170, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1171, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1644\n\n=================\n'),
(1173, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4851\n=================\n'),
(1177, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6604 0.14894\n=================\n'),
(1178, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1175, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n2\n\n=================\n'),
(1180, '=================/test.out\nRight:\n2418041\n\n-----------------\nYour:\n1608249\n\n=================\n'),
(1181, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 14 12\n=================\n'),
(1185, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(1188, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 5001 32769 61728394 493827160\n=================\n'),
(1190, '=================/test.out\nRight:\n2418041\n\n-----------------\nYour:\n1590617\n\n=================\n'),
(1192, '=================/test.out\nRight:\nWoart Dannie Dannie Dannie Woart\n-----------------\nYour:\nDannie Dannie Woart Woart Dannie\n=================\n'),
(1195, 'Runtime Error:Segmentation fault\n'),
(1197, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n1 13 22\n=================\n'),
(1199, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(1200, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n1 13 17\n=================\n'),
(1201, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(1202, 'Runtime Error:Segmentation fault\n'),
(1205, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n12 1644 967680\n=================\n'),
(1206, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie \n=================\n'),
(1208, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1211, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n9653\n=================\n'),
(1212, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Dannie\n=================\n'),
(1213, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1214, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart Woart\n=================\n'),
(1215, '=================/test.out\nRight:\n45 7252\n-----------------\nYour:\n50 9702\n=================\n'),
(1219, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827160\n=================\n'),
(1220, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 16 12\n=================\n'),
(1222, 'Runtime Error:Segmentation fault\n'),
(1223, 'Runtime Error:Segmentation fault\n'),
(1224, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Woart\n=================\n'),
(1227, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 393827161 \n=================\n'),
(1228, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Woart\n=================\n'),
(1229, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n14 13 14 15 12\n=================\n'),
(1232, 'Runtime Error:Segmentation fault\n'),
(1233, '=================/test.out\nRight:\nie Dannie Dannie Woart\n-----------------\nYour:\nue Woart Woart Woart\n=================\n'),
(1235, '=================/test.out\nRight:\n5 7252\n-----------------\nYour:\n9 9702\n=================\n'),
(1236, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(1238, '=================/test.out\nRight:\n854 1334961\n-----------------\nYour:\n938 1464390\n=================\n'),
(1240, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Woart\n=================\n'),
(1241, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n'),
(1242, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Woart\n=================\n'),
(1243, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 11 14 14 12\n=================\n'),
(1244, '=================/test.out\nRight:\n26\n-----------------\nYour:\n96\n=================\n'),
(1246, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart Dannie\n=================\n'),
(1245, 'Runtime Error:Segmentation fault\n'),
(1250, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart Dannie\n=================\n'),
(1251, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1254, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1.96136e+24\n\n=================\n'),
(1255, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n7 9900 65280 123445677 987622895 \n=================\n'),
(1257, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n36 81\n=================\n'),
(1258, '=================/test.out\nRight:\n3 15 22\n-----------------\nYour:\n2 14 22\n=================\n'),
(1264, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dainnie Dainnie\n=================\n'),
(1265, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1.96136e+24\n\n=================\n'),
(1266, '=================/test.out\nRight:\nnnie Dannie Dannie Woart\n-----------------\nYour:\ninnie Dainnie Woart Woart\n=================\n'),
(1268, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.07071\n=================\n'),
(1267, '=================/test.out\nRight:\n2\n-----------------\nYour:\n0\n=================\n'),
(1271, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dainnie Dainnie Woart\n=================\n'),
(1272, '=================/test.out\nRight:\n11 21 43 85 171\n-----------------\nYour:\n5 11 21 43 85\n=================\n'),
(1273, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 41152263 329218107\n=================\n'),
(1276, '=================/test.out\nRight:\nnnie Dannie Dannie Woart\n-----------------\nYour:\ninnie Woart Dainnie Woart\n=================\n'),
(1277, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n10 12 14 22\n=================\n'),
(1280, '=================/test.out\nRight:\nnnie Dannie Dannie Woart\n-----------------\nYour:\ninnie Woart Woart Dainnie\n=================\n'),
(1281, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(1284, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n'),
(1287, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Dannie\n=================\n'),
(1289, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n6 5001 32769 61728394 493827160\n=================\n'),
(1294, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n12 42 90\n=================\n'),
(1293, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n'),
(1295, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 8230453 658436214\n=================\n'),
(1296, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Woart\n=================\n'),
(1297, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1298, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n2001 0 0 0\n=================\n'),
(1299, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Woart\n=================\n'),
(1300, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n9604\n=================\n'),
(1301, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1302, '=================/test.out\nRight:\n1\n-----------------\nYour:\n0\n=================\n'),
(1303, '=================/test.out\nRight:\n1111 31426\n-----------------\nYour:\n0200 31400\n=================\n'),
(1304, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 15 12\n=================\n'),
(1305, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(1307, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 32767 61728394 493827160\n=================\n'),
(1308, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n7 9900 62580 123445678 987622895\n=================\n'),
(1309, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-2147483648\n\n=================\n'),
(1312, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 12 10 14 7 5\n=================\n'),
(1313, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Woart\n=================\n'),
(1314, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n3000 19661 37037037 296296297\n=================\n'),
(1316, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Woart\n=================\n'),
(1318, '=================/test.out\nRight:\n26\n-----------------\nYour:\n95\n=================\n'),
(1319, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827160\n=================\n'),
(1321, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n2 11 16 11 12\n=================\n'),
(1322, '=================/test.out\nRight:\n9 13 15 22\n-----------------\nYour:\n7 13 15 21\n=================\n'),
(1323, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n66667 0.08333\n=================\n'),
(1325, '=================/test.out\nRight:\nWoart\n-----------------\nYour:\nDannie\n=================\n'),
(1326, '=================/test.out\nRight:\n3 85 171\n-----------------\nYour:\n2 86 171\n=================\n'),
(1331, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Woart\n=================\n'),
(1332, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n15\n\n=================\n'),
(1333, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 12 15 13\n=================\n'),
(1335, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1334, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n7 9900 62580 123445678 987622895\n=================\n'),
(1337, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1999\n\n=================\n'),
(1340, '=================/test.out\nRight:\n5 171\n-----------------\nYour:\n6 171\n=================\n'),
(1341, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(1343, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n12147450\n=================\n'),
(1345, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 13 12\n=================\n'),
(1344, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n1735\n\n=================\n'),
(1346, '=================/test.out\nRight:\n2\n-----------------\nYour:\n1\n=================\n'),
(1347, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 10 9 6 5\n=================\n'),
(1348, '=================/test.out\nRight:\n228\n-----------------\nYour:\n012\n\n=================\n'),
(1349, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(1350, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n0\n\n=================\n'),
(1352, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.06604\n=================\n'),
(1351, '=================/test.out\nRight:\n228\n-----------------\nYour:\n046\n\n=================\n'),
(1354, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(1355, '=================/test.out\nRight:\n2228\n-----------------\nYour:\n54250\n\n=================\n'),
(1356, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1887 0.00943\n=================\n'),
(1357, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 18 15 12\n=================\n'),
(1358, '=================/test.out\nRight:\nCase #1: YES\n\n-----------------\nYour:\ncase #4: NO\n=================\n'),
(1360, '=================/test.out\nRight:\n228\n-----------------\nYour:\n010\n\n=================\n'),
(1363, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie Dannie\n=================\n'),
(1365, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart Dannie\n=================\n'),
(1367, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n90 324\n=================\n'),
(1368, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n3 12 15 12 6\n=================\n'),
(1369, '=================/test.out\nRight:\n1: YES\n\n-----------------\nYour:\n4:YES\n=================\n'),
(1373, 'Runtime Error:[ERROR] A Not allowed system call: runid:1373 callid:146\n\n*** stack smashing detected ***: ./Main terminated\n'),
(1372, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1375, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie\n=================\n'),
(1374, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6667 0.13208\n=================\n'),
(1377, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1379, '=================/test.out\nRight:\n53\n\n-----------------\nYour:\n'),
(1380, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1381, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n12 147 450\n=================\n'),
(1382, '=================/test.out\nRight:\nDannie Dannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie Dannie\n=================\n'),
(1383, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Woart\n=================\n'),
(1384, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1385, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n3626\n=================\n'),
(1386, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Dannie\n=================\n'),
(1387, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Woart Dannie\n=================\n'),
(1388, '=================/test.out\nRight:\n4 14 14 13\n-----------------\nYour:\n3 14 14 13\n=================\n'),
(1389, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Dannie\n=================\n'),
(1390, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1391, 'Runtime Error:[ERROR] A Not allowed system call: runid:1391 callid:146\n\n*** stack smashing detected ***: ./Main terminated\n'),
(1392, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560.000000\n\n=================\n');
INSERT INTO `runtimeinfo` (`solution_id`, `error`) VALUES
(1393, '=================/test.out\nRight:\nWoart\n-----------------\nYour:\nDannie\n=================\n'),
(1395, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1397, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827161\n=================\n'),
(1398, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1401, '=================/test.out\nRight:\n18427550902448932383991965727481781693930279\n-----------------\nYour:\n65646505291806948254180867304304143168267906\n=================\n'),
(1403, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Dannie\n=================\n'),
(1402, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n3 12 17 16 12\n=================\n'),
(1405, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 16 15 12\n=================\n'),
(1407, '=================/test.out\nRight:\n14 14 13\n-----------------\nYour:\n9 14 13\n=================\n'),
(1406, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n288 2835\n=================\n'),
(1408, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(1412, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n22 19 16 15 13\n=================\n'),
(1413, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1415, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 10 10 6 5\n=================\n'),
(1418, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n6604 0.13201\n=================\n'),
(1420, '=================/test.out\nRight:\n418041\n\n-----------------\nYour:\n142287613\n=================\n'),
(1424, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n22 19 14 15 13\n=================\n'),
(1426, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827162\n=================\n'),
(1425, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1428, '=================/test.out\nRight:\nDannie Dannie Woart\n-----------------\nYour:\nWoart Dannie Woart\n=================\n'),
(1429, '=================/test.out\nRight:\n1 0.13208\n-----------------\nYour:\n2 0.13208\n=================\n'),
(1430, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560\n\n=================\n'),
(1433, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 15 12\n=================\n'),
(1432, '=================/test.out\nRight:\n0\r\n\n-----------------\nYour:\n'),
(1434, '=================/test.out\nRight:\n109\n\n-----------------\nYour:\n59\n\n=================\n'),
(1436, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n9 10 10 6 5\n=================\n'),
(1438, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n20 19 14 15 13\n=================\n'),
(1439, '=================/test.out\nRight:\n\r\n\n-----------------\nYour:\n001\n=================\n'),
(1440, '=================/test.out\nRight:\n100 256 11111 31426\n-----------------\nYour:\n5 5 5 5\n=================\n'),
(1441, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4851\n=================\n'),
(1442, '=================/test.out\nRight:\n4\n\n-----------------\nYour:\n6\n\n=================\n'),
(1443, '=================/test.out\nRight:\nart Woart Dannie Dannie Dannie Woart\n-----------------\nYour:\nrat Worat Dannie Dannie Dannie Woart\n=================\n'),
(1444, '=================/test.out\nRight:\n1\r\n\n-----------------\nYour:\n'),
(1445, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n27 54\n=================\n'),
(1446, '=================/test.out\nRight:\n'),
(1449, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n24 5040 362880\n=================\n'),
(1450, '=================/test.out\nRight:\n75808\n\n-----------------\nYour:\n96288\n\n=================\n'),
(1453, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 14 11 16 12\n=================\n'),
(1454, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 14 12\n=================\n'),
(1455, '=================/test.out\nRight:\n9 1854 1334961\n-----------------\nYour:\n10 28 55\n=================\n'),
(1458, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1961364336795949004226560\n\n=================\n'),
(1459, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n9 24 35 49 800\n=================\n'),
(1460, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n26415 0.13208\n=================\n'),
(1461, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 24690394 493827160\n=================\n'),
(1462, '=================/test.out\nRight:\n1: YES\n\n-----------------\nYour:\n4:YES\n=================\n'),
(1463, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n27 4096 823543 10000000000000000\n=================\n'),
(1465, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n1 10 10 11 12\n=================\n'),
(1466, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n2646\n=================\n'),
(1464, '=================/test.out\nRight:\n109\n\n-----------------\nYour:\n59\n\n=================\n'),
(1467, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 15 12\n=================\n'),
(1468, '=================/test.out\nRight:\n7071 0.13208\n-----------------\nYour:\n1957 0.01957\n=================\n'),
(1469, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n2450\n=================\n'),
(1471, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n8 18 15 16 13\n=================\n'),
(1472, '=================/test.out\nRight:\n6\n-----------------\nYour:\n7\n=================\n'),
(1474, 'Runtime Error:Segmentation fault\n'),
(1479, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 32768 61728394 493827160\n=================\n'),
(1480, '=================/test.out\nRight:\n3 100 256 11111 31426\n-----------------\nYour:\n10 10000 65536 61728394 493827160\n=================\n'),
(1481, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4900\n=================\n'),
(1482, 'Runtime Error:Segmentation fault\n'),
(1483, 'Runtime Error:Segmentation fault\n'),
(1484, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n744 362943\n=================\n'),
(1486, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n2 11 12 11 6\n=================\n'),
(1487, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 13 12\n=================\n'),
(1488, '=================/test.out\nRight:\n2\n\n-----------------\nYour:\n0\n\n=================\n'),
(1489, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n408 19845\n=================\n'),
(1490, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n0 10 16 6 5\n=================\n'),
(1492, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 16 13\n=================\n'),
(1495, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n-1.96136e+24\n\n=================\n'),
(1500, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 14 13 12\n=================\n'),
(1501, '=================/test.out\nRight:\n09\n\n-----------------\nYour:\n\n1\n\n=================\n'),
(1502, '=================/test.out\nRight:\n9\n\n-----------------\nYour:\n0\n\n=================\n'),
(1503, '=================/test.out\nRight:\n3 9 13 15 22\n-----------------\nYour:\n10 82 1211 1254 250515237\n=================\n'),
(1507, '=================/test.out\nRight:\nWoart\n-----------------\nYour:\nDannie\n=================\n'),
(1508, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n2548\n=================\n'),
(1509, 'Runtime Error:Segmentation fault\n'),
(1512, '=================/test.out\nRight:\n7252\n-----------------\nYour:\n4302\n=================\n'),
(1513, '=================/test.out\nRight:\n5 14 14 14 13\n-----------------\nYour:\n4 13 18 14 12\n=================\n'),
(1514, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n21224705795004081977704834340529678546841396\n=================\n'),
(1515, '=================/test.out\nRight:\n9\n\n-----------------\nYour:\n0\n\n=================\n'),
(1519, '=================/test.out\nRight:\nDannie Woart\n-----------------\nYour:\nWoart Dannie\n=================\n'),
(1522, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1523, '=================/test.out\nRight:\nShenyang University of Technology is a piece\n-----------------\nYour:\n'),
(1524, '=================/test.out\nRight:\n1 31426\n-----------------\nYour:\n 31426\n=================\n'),
(1525, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1526, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n1194161702\n\n=================\n'),
(1528, '=================/test.out\nRight:\nYES\n\n-----------------\nYour:\nNO\n\n=================\n'),
(1531, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1533, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n9 11 10 6 5\n=================\n'),
(1535, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 16 13\n=================\n'),
(1536, '=================/test.out\nRight:\n YES\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1538, '=================/test.out\nRight:\n YES\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1540, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1542, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 9 10 6 5\n=================\n'),
(1543, '=================/test.out\nRight:\n4 14 13\n-----------------\nYour:\n5 14 13\n=================\n'),
(1544, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1545, '=================/test.out\nRight:\nYES\n\n-----------------\nYour:\nNO\n\n=================\n'),
(1546, '=================/test.out\nRight:\n6\n-----------------\nYour:\n7\n=================\n'),
(1547, '=================/test.out\nRight:\n1 0.13208\n-----------------\nYour:\n0 0.13208\n=================\n'),
(1551, '=================/test.out\nRight:\n9223372036854775808\n\n-----------------\nYour:\n0\n\n=================\n'),
(1552, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n9 11 9 6 5\n=================\n'),
(1554, '=================/test.out\nRight:\n4 45 7252\n-----------------\nYour:\n6 90 9702\n=================\n'),
(1553, '=================/test.out\nRight:\nShenyang University of Technology is a piece\n-----------------\nYour:\n-1.0323e+18\n\n=================\n'),
(1555, '=================/test.out\nRight:\n4 14 14 13\n-----------------\nYour:\n3 11 16 12\n=================\n'),
(1556, '=================/test.out\nRight:\nO\n\n-----------------\nYour:\no\n\n=================\n'),
(1559, 'Runtime Error:Segmentation fault\n'),
(1560, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 11 14 11 12\n=================\n'),
(1562, '=================/test.out\nRight:\n07071 0.13208\n-----------------\nYour:\n13208 0.13208\n=================\n'),
(1566, '=================/test.out\nRight:\n223372036854775808\n\n-----------------\nYour:\n.22337e+18\n\n=================\n'),
(1567, '=================/test.out\nRight:\nO\n\n-----------------\nYour:\no\n\n=================\n'),
(1568, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(1570, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n7 9 10 6 5\n=================\n'),
(1572, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n912 418635\n=================\n'),
(1575, '=================/test.out\nRight:\n15 14 14 14 13\n-----------------\nYour:\n8 9 9 5 4\n=================\n'),
(1578, '=================/test.out\nRight:\n1854 1334961\n-----------------\nYour:\n2163 163296\n=================\n'),
(1579, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n'),
(1581, '=================/test.out\nRight:\n26\n-----------------\nYour:\n94\n=================\n'),
(1583, '=================/test.out\nRight:\n9\n\n-----------------\nYour:\n0\n\n=================\n'),
(1586, 'Runtime Error:Segmentation fault\n'),
(1585, '=================/test.out\nRight:\n #1: 921217\r\n\n-----------------\nYour:\n#1:921217\n\n=================\n'),
(1587, '=================/test.out\nRight:\nNO\n\n-----------------\nYour:\nYES\n\n=================\n');

-- --------------------------------------------------------

--
-- 表的结构 `schoolcontest_problem`
--

CREATE TABLE IF NOT EXISTS `schoolcontest_problem` (
  `problem_id` int(11) NOT NULL DEFAULT '0',
  `contest_id` int(11) DEFAULT NULL,
  `title` char(200) NOT NULL DEFAULT '',
  `num` int(11) NOT NULL DEFAULT '0',
  UNIQUE KEY `problem_id` (`problem_id`),
  KEY `Index_contest_id` (`contest_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `schoolcontest_problem`
--

INSERT INTO `schoolcontest_problem` (`problem_id`, `contest_id`, `title`, `num`) VALUES
(1001, 0, '', 0),
(1002, 0, '', 1),
(1003, 0, '', 2),
(1004, 0, '', 3),
(1005, 0, '', 4),
(1010, 1, '', 1),
(1011, 1, '', 2),
(1012, 1, '', 3),
(1013, 1, '', 4),
(1014, 1, '', 5),
(1006, 0, '', 5),
(1007, 0, '', 6),
(1008, 0, '', 7),
(1009, 1, '', 0),
(1015, 1, '', 6),
(1016, 1, '', 7);

-- --------------------------------------------------------

--
-- 表的结构 `sim`
--

CREATE TABLE IF NOT EXISTS `sim` (
  `s_id` int(11) NOT NULL,
  `sim_s_id` int(11) DEFAULT NULL,
  `sim` int(11) DEFAULT NULL,
  PRIMARY KEY (`s_id`),
  KEY `Index_sim_id` (`sim_s_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `sim`
--

INSERT INTO `sim` (`s_id`, `sim_s_id`, `sim`) VALUES
(9, 2, 100),
(11, 4, 100),
(19, 2, 100),
(37, 5, 100),
(58, 55, 100),
(75, 55, 100),
(102, 55, 100),
(128, 55, 92),
(152, 78, 100),
(214, 16, 100),
(220, 5, 100),
(244, 55, 100),
(257, 2, 100),
(269, 55, 100),
(403, 81, 100),
(8, 1, 100),
(23, 11, 84),
(41, 28, 100),
(49, 1, 100),
(52, 11, 84),
(71, 11, 100),
(85, 28, 100),
(93, 1, 100),
(105, 19, 100),
(143, 28, 100),
(145, 19, 100),
(160, 11, 100),
(222, 19, 91),
(242, 11, 100),
(253, 11, 100),
(266, 11, 100),
(308, 252, 98),
(352, 7, 100),
(416, 11, 100),
(442, 11, 97),
(455, 11, 100),
(474, 11, 100),
(540, 304, 100),
(561, 191, 100),
(568, 29, 89),
(600, 304, 86),
(605, 132, 83),
(703, 11, 100),
(757, 304, 100),
(778, 6, 100),
(854, 191, 100),
(865, 2, 100),
(873, 727, 100),
(902, 405, 100),
(923, 304, 100),
(955, 7, 100),
(958, 304, 86),
(983, 458, 100),
(1001, 688, 82),
(1002, 405, 100),
(1023, 458, 100),
(1053, 304, 100),
(1082, 191, 100),
(1098, 458, 100),
(1150, 458, 99),
(1155, 960, 100),
(1164, 405, 100),
(1179, 1, 100),
(1182, 458, 100),
(1183, 458, 100),
(1184, 1, 100),
(1186, 405, 100),
(1187, 960, 98),
(1189, 7, 100),
(1191, 1, 100),
(1193, 405, 100),
(1194, 304, 100),
(1196, 191, 100),
(1203, 304, 100),
(1204, 191, 100),
(1221, 28, 83),
(1225, 727, 100),
(1248, 727, 100),
(1252, 304, 100),
(1253, 28, 100),
(1260, 1, 100),
(1274, 191, 100),
(1283, 304, 100),
(1290, 458, 100),
(1291, 458, 100),
(1310, 960, 100),
(1311, 607, 81),
(1330, 405, 100),
(1342, 132, 90),
(1359, 727, 98),
(1361, 458, 100),
(1370, 458, 100),
(1400, 405, 84),
(1404, 727, 100),
(1417, 3, 100),
(1421, 191, 100),
(1493, 251, 88),
(1499, 458, 100),
(1510, 1, 100);

-- --------------------------------------------------------

--
-- 表的结构 `solution`
--

CREATE TABLE IF NOT EXISTS `solution` (
  `solution_id` int(11) NOT NULL AUTO_INCREMENT,
  `problem_id` int(11) NOT NULL DEFAULT '0',
  `user_id` char(48) NOT NULL,
  `time` int(11) NOT NULL DEFAULT '0',
  `memory` int(11) NOT NULL DEFAULT '0',
  `in_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `result` smallint(6) NOT NULL DEFAULT '0',
  `language` int(10) unsigned NOT NULL DEFAULT '0',
  `ip` char(15) NOT NULL,
  `contest_id` int(11) DEFAULT NULL,
  `valid` tinyint(4) NOT NULL DEFAULT '1',
  `num` tinyint(4) NOT NULL DEFAULT '-1',
  `code_length` int(11) NOT NULL DEFAULT '0',
  `judgetime` datetime DEFAULT NULL,
  `pass_rate` decimal(2,2) unsigned NOT NULL DEFAULT '0.00',
  `balloon` int(11) NOT NULL,
  PRIMARY KEY (`solution_id`),
  KEY `uid` (`user_id`),
  KEY `pid` (`problem_id`),
  KEY `res` (`result`),
  KEY `cid` (`contest_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1589 ;

--
-- 转存表中的数据 `solution`
--

INSERT INTO `solution` (`solution_id`, `problem_id`, `user_id`, `time`, `memory`, `in_date`, `result`, `language`, `ip`, `contest_id`, `valid`, `num`, `code_length`, `judgetime`, `pass_rate`, `balloon`) VALUES
(5, 1003, 'team79', 0, 1480, '2013-11-23 10:02:48', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:02:50', 0.00, 0),
(4, 1003, 'team79', 0, 1480, '2013-11-23 10:02:21', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:02:28', 0.00, 0),
(6, 1008, 'team17', 5640, 964, '2013-11-23 10:02:50', 4, 1, '10.16.20.111', 0, 1, 7, 277, '2013-11-23 10:03:10', 0.00, 1),
(7, 1003, 'team79', 0, 1480, '2013-11-23 10:03:06', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:03:10', 0.00, 0),
(8, 1008, 'team1', 5972, 964, '2013-11-23 10:03:19', 4, 1, '10.16.20.98', 0, 1, 7, 135, '2013-11-23 10:03:33', 0.00, 1),
(9, 1003, 'team79', 0, 1480, '2013-11-23 10:03:21', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:03:25', 0.00, 0),
(10, 1008, 'team83', 4568, 964, '2013-11-23 10:03:35', 6, 1, '10.16.20.62', 0, 1, 7, 224, '2013-11-23 10:03:49', 0.00, 0),
(11, 1008, 'team90', 5992, 964, '2013-11-23 10:03:54', 4, 1, '10.16.20.8', 0, 1, 7, 302, '2013-11-23 10:04:09', 0.00, 1),
(12, 1003, 'team79', 0, 1480, '2013-11-23 10:03:59', 6, 1, '10.16.20.55', 0, 1, 2, 125, '2013-11-23 10:04:00', 0.00, 0),
(13, 1003, 'team79', 0, 1480, '2013-11-23 10:04:10', 6, 1, '10.16.20.55', 0, 1, 2, 121, '2013-11-23 10:04:15', 0.00, 0),
(14, 1003, 'team79', 0, 1480, '2013-11-23 10:04:28', 6, 1, '10.16.20.55', 0, 1, 2, 123, '2013-11-23 10:04:30', 0.00, 0),
(15, 1003, 'team79', 0, 1480, '2013-11-23 10:04:43', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:04:45', 0.00, 0),
(16, 1003, 'team28', 0, 960, '2013-11-23 10:04:43', 6, 0, '10.16.20.134', 0, 1, 2, 86, '2013-11-23 10:04:45', 0.00, 0),
(17, 1003, 'team33', 0, 1480, '2013-11-23 10:04:48', 6, 1, '10.16.20.126', 0, 1, 2, 149, '2013-11-23 10:04:50', 0.00, 0),
(18, 1003, 'team79', 0, 1480, '2013-11-23 10:04:55', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:05:00', 0.00, 0),
(19, 1008, 'team2', 6056, 964, '2013-11-23 10:05:00', 4, 0, '10.16.20.97', 0, 1, 7, 143, '2013-11-23 10:05:19', 0.00, 1),
(20, 1003, 'team79', 0, 1480, '2013-11-23 10:05:18', 6, 1, '10.16.20.55', 0, 1, 2, 122, '2013-11-23 10:05:20', 0.00, 0),
(21, 1003, 'team28', 0, 960, '2013-11-23 10:05:26', 6, 0, '10.16.20.134', 0, 1, 2, 84, '2013-11-23 10:05:30', 0.00, 0),
(275, 1001, 'team20', 0, 960, '2013-11-23 10:45:22', 6, 1, '10.16.20.105', 0, 1, 0, 78, '2013-11-23 10:45:23', 0.00, 0),
(23, 1008, 'team15', 5980, 964, '2013-11-23 10:05:26', 4, 1, '10.16.20.115', 0, 1, 7, 187, '2013-11-23 10:05:44', 0.00, 1),
(24, 1003, 'team79', 0, 1480, '2013-11-23 10:05:37', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:05:40', 0.00, 0),
(25, 1003, 'team79', 0, 1480, '2013-11-23 10:05:50', 6, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:05:55', 0.00, 0),
(26, 1003, 'team33', 0, 1480, '2013-11-23 10:06:01', 6, 1, '10.16.20.126', 0, 1, 2, 150, '2013-11-23 10:06:05', 0.00, 0),
(27, 1003, 'team79', 0, 1480, '2013-11-23 10:06:06', 4, 1, '10.16.20.55', 0, 1, 2, 124, '2013-11-23 10:06:10', 0.00, 1),
(28, 1008, 'team91', 5928, 964, '2013-11-23 10:06:20', 4, 1, '10.16.20.10', 0, 1, 7, 153, '2013-11-23 10:06:41', 0.00, 1),
(29, 1008, 'team83', 6428, 964, '2013-11-23 10:06:32', 4, 1, '10.16.20.62', 0, 1, 7, 142, '2013-11-23 10:06:52', 0.00, 1),
(30, 1003, 'team33', 0, 1480, '2013-11-23 10:06:48', 6, 1, '10.16.20.126', 0, 1, 2, 149, '2013-11-23 10:06:51', 0.00, 0),
(31, 1001, 'team3', 516, 1496, '2013-11-23 10:06:51', 6, 1, '10.16.20.96', 0, 1, 0, 180, '2013-11-23 10:07:01', 0.00, 0),
(32, 1003, 'team2', 0, 960, '2013-11-23 10:06:55', 6, 0, '10.16.20.97', 0, 1, 2, 87, '2013-11-23 10:06:55', 0.00, 0),
(33, 1008, 'team47', 7000, 964, '2013-11-23 10:07:04', 7, 0, '10.16.20.137', 0, 1, 7, 147, '2013-11-23 10:07:42', 0.00, 0),
(34, 1003, 'team28', 0, 960, '2013-11-23 10:07:18', 6, 1, '10.16.20.134', 0, 1, 2, 87, '2013-11-23 10:07:20', 0.00, 0),
(35, 1003, 'team2', 0, 960, '2013-11-23 10:07:38', 6, 0, '10.16.20.97', 0, 1, 2, 88, '2013-11-23 10:07:40', 0.00, 0),
(36, 1003, 'team28', 0, 960, '2013-11-23 10:07:48', 6, 1, '10.16.20.134', 0, 1, 2, 87, '2013-11-23 10:07:50', 0.00, 0),
(37, 1008, 'team36', 6080, 964, '2013-11-23 10:07:50', 4, 0, '10.16.20.120', 0, 1, 7, 149, '2013-11-23 10:08:04', 0.00, 1),
(38, 1008, 'team79', 0, 1484, '2013-11-23 10:08:02', 6, 1, '10.16.20.55', 0, 1, 7, 146, '2013-11-23 10:08:06', 0.00, 0),
(39, 1003, 'team2', 0, 960, '2013-11-23 10:08:12', 4, 0, '10.16.20.97', 0, 1, 2, 87, '2013-11-23 10:08:15', 0.00, 1),
(40, 1005, 'team89', 0, 964, '2013-11-23 10:08:23', 4, 1, '10.16.20.1', 0, 1, 4, 637, '2013-11-23 10:08:25', 0.00, 1),
(41, 1008, 'team16', 6016, 964, '2013-11-23 10:08:28', 4, 0, '10.16.20.113', 0, 1, 7, 148, '2013-11-23 10:08:44', 0.00, 1),
(42, 1003, 'team3', 0, 1480, '2013-11-23 10:08:39', 6, 1, '10.16.20.96', 0, 1, 2, 102, '2013-11-23 10:08:41', 0.00, 0),
(43, 1003, 'team28', 0, 960, '2013-11-23 10:08:41', 6, 0, '10.16.20.134', 0, 1, 2, 88, '2013-11-23 10:08:45', 0.00, 0),
(44, 1008, 'team79', 7000, 1484, '2013-11-23 10:08:42', 7, 1, '10.16.20.55', 0, 1, 7, 152, '2013-11-23 10:09:59', 0.00, 0),
(45, 1008, 'team33', 7000, 1484, '2013-11-23 10:08:55', 7, 1, '10.16.20.126', 0, 1, 7, 161, '2013-11-23 10:10:06', 0.00, 0),
(46, 1003, 'team28', 0, 960, '2013-11-23 10:09:07', 6, 0, '10.16.20.134', 0, 1, 2, 87, '2013-11-23 10:09:10', 0.00, 0),
(47, 1003, 'team28', 0, 960, '2013-11-23 10:09:22', 6, 0, '10.16.20.134', 0, 1, 2, 85, '2013-11-23 10:09:25', 0.00, 0),
(48, 1003, 'team28', 0, 960, '2013-11-23 10:09:38', 6, 0, '10.16.20.134', 0, 1, 2, 87, '2013-11-23 10:09:40', 0.00, 0),
(49, 1008, 'team57', 3520, 964, '2013-11-23 10:09:40', 4, 1, '10.16.20.43', 0, 1, 7, 142, '2013-11-23 10:10:04', 0.00, 1),
(50, 1003, 'team16', 0, 1480, '2013-11-23 10:10:14', 6, 1, '10.16.20.113', 0, 1, 2, 116, '2013-11-23 10:10:16', 0.00, 0),
(51, 1003, 'team28', 0, 960, '2013-11-23 10:10:18', 4, 1, '10.16.20.134', 0, 1, 2, 87, '2013-11-23 10:10:20', 0.00, 1),
(52, 1008, 'team14', 6288, 964, '2013-11-23 10:10:23', 4, 1, '10.16.20.117', 0, 1, 7, 189, '2013-11-23 10:10:40', 0.00, 1),
(53, 1008, 'team10', 0, 0, '2013-11-23 10:10:37', 11, 1, '10.16.20.86', 0, 1, 7, 198, '2013-11-23 10:10:40', 0.00, 0),
(54, 1007, 'team17', 0, 2328, '2013-11-23 10:10:38', 4, 1, '10.16.20.111', 0, 1, 6, 345, '2013-11-23 10:10:40', 0.00, 1),
(55, 1009, 'team76', 0, 960, '2013-11-23 10:10:58', 6, 0, '10.16.20.54', 1, 1, 0, 94, '2013-11-23 10:11:01', 0.00, 0),
(56, 1008, 'team3', 7000, 1484, '2013-11-23 10:10:59', 7, 1, '10.16.20.96', 0, 1, 7, 155, '2013-11-23 10:12:11', 0.00, 0),
(57, 1003, 'team90', 0, 964, '2013-11-23 10:11:08', 6, 1, '10.16.20.8', 0, 1, 2, 423, '2013-11-23 10:11:11', 0.00, 0),
(58, 1003, 'team16', 0, 1480, '2013-11-23 10:11:10', 6, 1, '10.16.20.113', 0, 1, 2, 117, '2013-11-23 10:11:11', 0.00, 0),
(59, 1008, 'team5', 6252, 964, '2013-11-23 10:11:35', 4, 0, '10.16.20.92', 0, 1, 7, 164, '2013-11-23 10:12:00', 0.00, 1),
(60, 1003, 'team17', 0, 960, '2013-11-23 10:11:59', 6, 1, '10.16.20.111', 0, 1, 2, 89, '2013-11-23 10:12:01', 0.00, 0),
(61, 1009, 'team66', 0, 960, '2013-11-23 10:12:05', 6, 1, '10.16.20.22', 1, 1, 0, 88, '2013-11-23 10:12:06', 0.00, 0),
(62, 1006, 'team33', 588, 1484, '2013-11-23 10:12:06', 4, 1, '10.16.20.126', 0, 1, 5, 356, '2013-11-23 10:12:12', 0.00, 1),
(63, 1006, 'team89', 588, 964, '2013-11-23 10:12:11', 4, 1, '10.16.20.1', 0, 1, 5, 437, '2013-11-23 10:12:17', 0.00, 1),
(64, 1003, 'team16', 0, 1480, '2013-11-23 10:12:14', 6, 1, '10.16.20.113', 0, 1, 2, 120, '2013-11-23 10:12:16', 0.00, 0),
(65, 1003, 'team90', 0, 960, '2013-11-23 10:12:21', 6, 1, '10.16.20.8', 0, 1, 2, 354, '2013-11-23 10:12:26', 0.00, 0),
(66, 1008, 'team23', 0, 964, '2013-11-23 10:12:29', 6, 0, '10.16.20.102', 0, 1, 7, 182, '2013-11-23 10:12:31', 0.00, 0),
(67, 1003, 'team17', 0, 960, '2013-11-23 10:12:32', 6, 1, '10.16.20.111', 0, 1, 2, 85, '2013-11-23 10:12:36', 0.00, 0),
(68, 1003, 'team57', 0, 960, '2013-11-23 10:12:50', 6, 1, '10.16.20.43', 0, 1, 2, 79, '2013-11-23 10:12:51', 0.00, 0),
(69, 1003, 'team17', 0, 960, '2013-11-23 10:13:01', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:13:06', 0.00, 0),
(70, 1008, 'team33', 5984, 1484, '2013-11-23 10:13:04', 4, 1, '10.16.20.126', 0, 1, 7, 183, '2013-11-23 10:13:20', 0.00, 1),
(71, 1008, 'team52', 6052, 964, '2013-11-23 10:13:18', 4, 1, '10.16.20.36', 0, 1, 7, 151, '2013-11-23 10:13:34', 0.00, 1),
(72, 1003, 'team57', 0, 960, '2013-11-23 10:13:38', 6, 1, '10.16.20.43', 0, 1, 2, 80, '2013-11-23 10:13:41', 0.00, 0),
(73, 1008, 'team55', 0, 964, '2013-11-23 10:13:44', 6, 1, '10.16.20.40', 0, 1, 7, 112, '2013-11-23 10:13:46', 0.00, 0),
(74, 1009, 'team49', 0, 960, '2013-11-23 10:13:51', 4, 1, '10.16.20.32', 1, 1, 0, 92, '2013-11-23 10:13:56', 0.00, 1),
(75, 1003, 'team17', 0, 960, '2013-11-23 10:14:02', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:14:06', 0.00, 0),
(76, 1003, 'team91', 0, 960, '2013-11-23 10:14:04', 6, 1, '10.16.20.10', 0, 1, 2, 77, '2013-11-23 10:14:06', 0.00, 0),
(77, 1008, 'team44', 7000, 1484, '2013-11-23 10:14:34', 7, 1, '10.16.20.138', 0, 1, 7, 147, '2013-11-23 10:15:47', 0.00, 0),
(78, 1011, 'team78', 0, 960, '2013-11-23 10:14:37', 6, 1, '10.16.20.53', 1, 1, 2, 94, '2013-11-23 10:14:41', 0.00, 0),
(79, 1003, 'team57', 0, 960, '2013-11-23 10:15:00', 6, 1, '10.16.20.43', 0, 1, 2, 76, '2013-11-23 10:15:01', 0.00, 0),
(80, 1003, 'team17', 0, 960, '2013-11-23 10:15:41', 6, 1, '10.16.20.111', 0, 1, 2, 87, '2013-11-23 10:15:46', 0.00, 0),
(81, 1001, 'team79', 0, 0, '2013-11-23 10:15:43', 11, 1, '10.16.20.55', 0, 1, 0, 377, '2013-11-23 10:15:46', 0.00, 0),
(82, 1003, 'team57', 0, 960, '2013-11-23 10:15:45', 6, 1, '10.16.20.43', 0, 1, 2, 79, '2013-11-23 10:15:46', 0.00, 0),
(83, 1009, 'team74', 0, 960, '2013-11-23 10:15:51', 6, 1, '10.16.20.21', 1, 1, 0, 92, '2013-11-23 10:15:56', 0.00, 0),
(84, 1011, 'team69', 0, 960, '2013-11-23 10:16:04', 6, 1, '10.16.20.16', 1, 1, 2, 94, '2013-11-23 10:16:06', 0.00, 0),
(85, 1008, 'team3', 5728, 964, '2013-11-23 10:16:07', 4, 1, '10.16.20.96', 0, 1, 7, 147, '2013-11-23 10:16:24', 0.00, 1),
(86, 1001, 'team79', 444, 1484, '2013-11-23 10:16:10', 6, 1, '10.16.20.55', 0, 1, 0, 356, '2013-11-23 10:16:14', 0.00, 0),
(87, 1003, 'team17', 0, 960, '2013-11-23 10:16:10', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:16:11', 0.00, 0),
(88, 1003, 'team57', 0, 960, '2013-11-23 10:16:15', 4, 1, '10.16.20.43', 0, 1, 2, 79, '2013-11-23 10:16:16', 0.00, 1),
(89, 1003, 'team91', 0, 960, '2013-11-23 10:16:18', 6, 1, '10.16.20.10', 0, 1, 2, 78, '2013-11-23 10:16:21', 0.00, 0),
(90, 1003, 'team5', 0, 960, '2013-11-23 10:16:19', 6, 1, '10.16.20.92', 0, 1, 2, 77, '2013-11-23 10:16:21', 0.00, 0),
(242, 1008, 'team18', 6084, 964, '2013-11-23 10:40:08', 4, 0, '10.16.20.109', 0, 1, 7, 152, '2013-11-23 10:40:27', 0.00, 1),
(92, 1003, 'team90', 0, 960, '2013-11-23 10:16:40', 6, 1, '10.16.20.8', 0, 1, 2, 355, '2013-11-23 10:16:41', 0.00, 0),
(93, 1008, 'team47', 6004, 964, '2013-11-23 10:16:48', 4, 0, '10.16.20.137', 0, 1, 7, 125, '2013-11-23 10:17:05', 0.00, 1),
(94, 1003, 'team17', 0, 960, '2013-11-23 10:17:15', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:17:16', 0.00, 0),
(95, 1008, 'team3', 0, 960, '2013-11-23 10:17:31', 6, 1, '10.16.20.96', 0, 1, 7, 80, '2013-11-23 10:17:36', 0.00, 0),
(96, 1003, 'team91', 0, 960, '2013-11-23 10:17:41', 6, 1, '10.16.20.10', 0, 1, 2, 81, '2013-11-23 10:17:46', 0.00, 0),
(97, 1003, 'team17', 0, 960, '2013-11-23 10:17:57', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:18:01', 0.00, 0),
(98, 1008, 'team82', 0, 964, '2013-11-23 10:18:10', 6, 1, '10.16.20.58', 0, 1, 7, 224, '2013-11-23 10:18:11', 0.00, 0),
(99, 1003, 'team17', 0, 960, '2013-11-23 10:18:32', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:18:36', 0.00, 0),
(100, 1003, 'team5', 0, 960, '2013-11-23 10:18:40', 4, 1, '10.16.20.92', 0, 1, 2, 77, '2013-11-23 10:18:41', 0.00, 1),
(101, 1008, 'team7', 7000, 1484, '2013-11-23 10:18:42', 7, 1, '10.16.20.87', 0, 1, 7, 152, '2013-11-23 10:19:56', 0.00, 0),
(102, 1003, 'team17', 0, 960, '2013-11-23 10:18:53', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:18:56', 0.00, 0),
(241, 1008, 'team71', 0, 964, '2013-11-23 10:40:03', 6, 1, '10.16.20.13', 0, 1, 7, 248, '2013-11-23 10:40:08', 0.00, 0),
(104, 1008, 'team3', 0, 1480, '2013-11-23 10:19:10', 6, 1, '10.16.20.96', 0, 1, 7, 102, '2013-11-23 10:19:12', 0.00, 0),
(105, 1008, 'team92', 5852, 964, '2013-11-23 10:19:12', 4, 1, '10.16.20.11', 0, 1, 7, 161, '2013-11-23 10:19:31', 0.00, 1),
(106, 1001, 'team20', 60, 964, '2013-11-23 10:19:23', 6, 0, '10.16.20.105', 0, 1, 0, 466, '2013-11-23 10:19:29', 0.00, 0),
(107, 1003, 'team91', 0, 960, '2013-11-23 10:19:31', 6, 1, '10.16.20.10', 0, 1, 2, 80, '2013-11-23 10:19:36', 0.00, 0),
(108, 1003, 'team3', 0, 1480, '2013-11-23 10:19:31', 4, 1, '10.16.20.96', 0, 1, 2, 102, '2013-11-23 10:19:36', 0.00, 1),
(109, 1009, 'team76', 0, 960, '2013-11-23 10:19:37', 6, 0, '10.16.20.54', 1, 1, 0, 94, '2013-11-23 10:19:41', 0.00, 0),
(110, 1008, 'team23', 0, 964, '2013-11-23 10:19:38', 6, 0, '10.16.20.102', 0, 1, 7, 111, '2013-11-23 10:19:41', 0.00, 0),
(111, 1001, 'team18', 888, 980, '2013-11-23 10:19:47', 6, 0, '10.16.20.109', 0, 1, 0, 467, '2013-11-23 10:19:52', 0.00, 0),
(112, 1008, 'team58', 0, 964, '2013-11-23 10:19:48', 6, 1, '10.16.20.45', 0, 1, 7, 129, '2013-11-23 10:19:51', 0.00, 0),
(113, 1008, 'team54', 5928, 964, '2013-11-23 10:19:59', 4, 1, '10.16.20.39', 0, 1, 7, 167, '2013-11-23 10:20:14', 0.00, 1),
(114, 1003, 'team17', 0, 960, '2013-11-23 10:19:59', 6, 1, '10.16.20.111', 0, 1, 2, 86, '2013-11-23 10:20:01', 0.00, 0),
(115, 1003, 'team91', 0, 960, '2013-11-23 10:20:01', 6, 1, '10.16.20.10', 0, 1, 2, 80, '2013-11-23 10:20:06', 0.00, 0),
(116, 1009, 'team19', 0, 960, '2013-11-23 10:20:07', 4, 0, '10.16.20.107', 1, 1, 0, 92, '2013-11-23 10:20:11', 0.00, 1),
(117, 1003, 'team17', 0, 960, '2013-11-23 10:20:26', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:20:31', 0.00, 0),
(118, 1003, 'team91', 0, 960, '2013-11-23 10:20:29', 6, 1, '10.16.20.10', 0, 1, 2, 80, '2013-11-23 10:20:31', 0.00, 0),
(119, 1001, 'team20', 60, 964, '2013-11-23 10:20:35', 6, 1, '10.16.20.105', 0, 1, 0, 469, '2013-11-23 10:20:36', 0.00, 0),
(120, 1003, 'team17', 0, 960, '2013-11-23 10:20:45', 6, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:20:46', 0.00, 0),
(121, 1003, 'team91', 0, 960, '2013-11-23 10:20:54', 6, 1, '10.16.20.10', 0, 1, 2, 80, '2013-11-23 10:20:56', 0.00, 0),
(122, 1008, 'team79', 7000, 1484, '2013-11-23 10:21:09', 7, 1, '10.16.20.55', 0, 1, 7, 166, '2013-11-23 10:22:20', 0.00, 0),
(123, 1003, 'team17', 0, 960, '2013-11-23 10:21:19', 4, 1, '10.16.20.111', 0, 1, 2, 88, '2013-11-23 10:21:21', 0.00, 1),
(124, 1003, 'team91', 0, 960, '2013-11-23 10:21:34', 6, 1, '10.16.20.10', 0, 1, 2, 79, '2013-11-23 10:21:36', 0.00, 0),
(125, 1009, 'team32', 0, 960, '2013-11-23 10:21:57', 6, 1, '10.16.20.128', 1, 1, 0, 88, '2013-11-23 10:22:01', 0.00, 0),
(126, 1003, 'team91', 0, 960, '2013-11-23 10:22:00', 4, 1, '10.16.20.10', 0, 1, 2, 80, '2013-11-23 10:22:01', 0.00, 1),
(127, 1001, 'team20', 60, 964, '2013-11-23 10:22:02', 6, 0, '10.16.20.105', 0, 1, 0, 469, '2013-11-23 10:22:06', 0.00, 0),
(128, 1001, 'team18', 1728, 980, '2013-11-23 10:22:13', 6, 0, '10.16.20.109', 0, 1, 0, 461, '2013-11-23 10:22:18', 0.00, 0),
(129, 1008, 'team79', 7000, 1484, '2013-11-23 10:22:28', 7, 1, '10.16.20.55', 0, 1, 7, 180, '2013-11-23 10:23:42', 0.00, 0),
(130, 1009, 'team24', 0, 0, '2013-11-23 10:22:42', 11, 1, '10.16.20.100', 1, 1, 0, 18, '2013-11-23 10:22:46', 0.00, 0),
(131, 1001, 'team89', 316, 976, '2013-11-23 10:22:46', 6, 1, '10.16.20.1', 0, 1, 0, 623, '2013-11-23 10:22:51', 0.00, 0),
(132, 1003, 'team90', 0, 960, '2013-11-23 10:23:07', 4, 1, '10.16.20.8', 0, 1, 2, 354, '2013-11-23 10:23:11', 0.00, 1),
(133, 1008, 'team42', 7000, 964, '2013-11-23 10:23:18', 7, 1, '10.16.20.142', 0, 1, 7, 111, '2013-11-23 10:23:59', 0.00, 0),
(134, 1008, 'team7', 0, 1484, '2013-11-23 10:23:43', 6, 1, '10.16.20.87', 0, 1, 7, 133, '2013-11-23 10:23:47', 0.00, 0),
(135, 1003, 'team33', 0, 1480, '2013-11-23 10:23:50', 6, 1, '10.16.20.126', 0, 1, 2, 146, '2013-11-23 10:23:51', 0.00, 0),
(136, 1003, 'team1', 0, 960, '2013-11-23 10:24:00', 6, 1, '10.16.20.98', 0, 1, 2, 80, '2013-11-23 10:24:01', 0.00, 0),
(137, 1008, 'team82', 0, 964, '2013-11-23 10:24:03', 6, 1, '10.16.20.58', 0, 1, 7, 228, '2013-11-23 10:24:06', 0.00, 0),
(276, 1003, 'team82', 0, 960, '2013-11-23 10:45:29', 6, 1, '10.16.20.58', 0, 1, 2, 62, '2013-11-23 10:45:33', 0.00, 0),
(139, 1003, 'team33', 0, 1480, '2013-11-23 10:24:24', 6, 1, '10.16.20.126', 0, 1, 2, 149, '2013-11-23 10:24:26', 0.00, 0),
(140, 1002, 'team2', 0, 964, '2013-11-23 10:24:29', 4, 0, '10.16.20.97', 0, 1, 1, 766, '2013-11-23 10:24:31', 0.00, 1),
(141, 1009, 'team64', 0, 960, '2013-11-23 10:24:36', 6, 1, '10.16.20.17', 1, 1, 0, 88, '2013-11-23 10:24:36', 0.00, 0),
(142, 1003, 'team1', 0, 960, '2013-11-23 10:24:39', 4, 1, '10.16.20.98', 0, 1, 2, 80, '2013-11-23 10:24:41', 0.00, 1),
(143, 1008, 'team29', 6020, 964, '2013-11-23 10:24:53', 4, 1, '10.16.20.133', 0, 1, 7, 156, '2013-11-23 10:25:10', 0.00, 1),
(144, 1003, 'team33', 0, 1480, '2013-11-23 10:24:56', 6, 1, '10.16.20.126', 0, 1, 2, 149, '2013-11-23 10:25:02', 0.00, 0),
(145, 1008, 'team4', 4932, 964, '2013-11-23 10:24:57', 4, 1, '10.16.20.94', 0, 1, 7, 133, '2013-11-23 10:25:13', 0.00, 1),
(146, 1011, 'team75', 0, 0, '2013-11-23 10:25:03', 11, 1, '10.16.20.24', 1, 1, 2, 83, '2013-11-23 10:25:06', 0.00, 0),
(147, 1006, 'team3', 1128, 1484, '2013-11-23 10:25:08', 4, 1, '10.16.20.96', 0, 1, 5, 248, '2013-11-23 10:25:13', 0.00, 1),
(148, 1003, 'team33', 0, 1480, '2013-11-23 10:25:18', 6, 1, '10.16.20.126', 0, 1, 2, 149, '2013-11-23 10:25:21', 0.00, 0),
(149, 1011, 'team75', 0, 960, '2013-11-23 10:25:46', 4, 1, '10.16.20.24', 1, 1, 2, 93, '2013-11-23 10:25:51', 0.00, 1),
(150, 1008, 'team60', 0, 964, '2013-11-23 10:26:29', 6, 0, '10.16.20.48', 0, 1, 7, 114, '2013-11-23 10:26:31', 0.00, 0),
(151, 1011, 'team38', 0, 960, '2013-11-23 10:26:29', 6, 0, '10.16.20.118', 1, 1, 2, 96, '2013-11-23 10:26:31', 0.00, 0),
(152, 1009, 'team53', 0, 960, '2013-11-23 10:26:35', 6, 1, '10.16.20.38', 1, 1, 0, 88, '2013-11-23 10:26:36', 0.00, 0),
(153, 1011, 'team76', 0, 960, '2013-11-23 10:26:49', 6, 0, '10.16.20.54', 1, 1, 2, 93, '2013-11-23 10:26:51', 0.00, 0),
(154, 1009, 'team74', 0, 0, '2013-11-23 10:26:50', 11, 1, '10.16.20.21', 1, 1, 0, 97, '2013-11-23 10:26:51', 0.00, 0),
(155, 1003, 'team18', 0, 960, '2013-11-23 10:26:52', 6, 0, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:26:56', 0.00, 0),
(156, 1008, 'team35', 7000, 1484, '2013-11-23 10:27:00', 7, 1, '10.16.20.56', 0, 1, 7, 153, '2013-11-23 10:28:08', 0.00, 0),
(157, 1008, 'team42', 7000, 964, '2013-11-23 10:27:08', 7, 1, '10.16.20.142', 0, 1, 7, 123, '2013-11-23 10:27:52', 0.00, 0),
(158, 1008, 'team71', 0, 964, '2013-11-23 10:27:09', 6, 1, '10.16.20.13', 0, 1, 7, 109, '2013-11-23 10:27:12', 0.00, 0),
(159, 1003, 'team82', 0, 960, '2013-11-23 10:27:14', 6, 1, '10.16.20.58', 0, 1, 2, 66, '2013-11-23 10:27:17', 0.00, 0),
(160, 1008, 'team28', 2868, 964, '2013-11-23 10:27:19', 4, 0, '10.16.20.134', 0, 1, 7, 182, '2013-11-23 10:27:29', 0.00, 1),
(161, 1003, 'team18', 0, 960, '2013-11-23 10:27:23', 6, 1, '10.16.20.109', 0, 1, 2, 80, '2013-11-23 10:27:27', 0.00, 0),
(162, 1011, 'team73', 0, 960, '2013-11-23 10:27:28', 6, 0, '10.16.20.235', 1, 1, 2, 86, '2013-11-23 10:27:32', 0.00, 0),
(163, 1008, 'team30', 0, 1484, '2013-11-23 10:27:48', 6, 1, '10.16.20.131', 0, 1, 7, 115, '2013-11-23 10:27:52', 0.00, 0),
(164, 1003, 'team18', 0, 960, '2013-11-23 10:27:58', 6, 0, '10.16.20.109', 0, 1, 2, 82, '2013-11-23 10:28:02', 0.00, 0),
(165, 1008, 'team42', 7000, 964, '2013-11-23 10:28:19', 7, 1, '10.16.20.142', 0, 1, 7, 134, '2013-11-23 10:28:57', 0.00, 0),
(166, 1003, 'team18', 0, 960, '2013-11-23 10:28:27', 6, 0, '10.16.20.109', 0, 1, 2, 79, '2013-11-23 10:28:32', 0.00, 0),
(167, 1011, 'team78', 0, 960, '2013-11-23 10:28:44', 4, 1, '10.16.20.53', 1, 1, 2, 92, '2013-11-23 10:28:47', 0.00, 1),
(168, 1003, 'team18', 0, 960, '2013-11-23 10:28:48', 6, 0, '10.16.20.109', 0, 1, 2, 78, '2013-11-23 10:28:52', 0.00, 0),
(169, 1008, 'team71', 0, 964, '2013-11-23 10:29:05', 6, 0, '10.16.20.13', 0, 1, 7, 109, '2013-11-23 10:29:07', 0.00, 0),
(170, 1008, 'team7', 7000, 1484, '2013-11-23 10:29:10', 7, 1, '10.16.20.87', 0, 1, 7, 149, '2013-11-23 10:30:22', 0.00, 0),
(171, 1003, 'team18', 0, 960, '2013-11-23 10:29:21', 6, 0, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:29:22', 0.00, 0),
(172, 1003, 'team18', 0, 960, '2013-11-23 10:29:42', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:29:47', 0.00, 0),
(173, 1007, 'team33', 0, 1484, '2013-11-23 10:29:42', 4, 1, '10.16.20.126', 0, 1, 6, 453, '2013-11-23 10:29:47', 0.00, 1),
(174, 1008, 'team60', 7000, 964, '2013-11-23 10:29:44', 7, 1, '10.16.20.48', 0, 1, 7, 137, '2013-11-23 10:30:35', 0.00, 0),
(175, 1001, 'team92', 10000, 972, '2013-11-23 10:29:47', 7, 1, '10.16.20.11', 0, 1, 0, 544, '2013-11-23 10:30:03', 0.00, 0),
(176, 1003, 'team82', 0, 960, '2013-11-23 10:29:47', 6, 1, '10.16.20.58', 0, 1, 2, 65, '2013-11-23 10:29:52', 0.00, 0),
(177, 1013, 'team78', 0, 960, '2013-11-23 10:29:48', 6, 1, '10.16.20.53', 1, 1, 4, 89, '2013-11-23 10:29:52', 0.00, 0),
(178, 1011, 'team76', 0, 960, '2013-11-23 10:29:49', 6, 0, '10.16.20.54', 1, 1, 2, 95, '2013-11-23 10:29:52', 0.00, 0),
(179, 1008, 'team23', 0, 964, '2013-11-23 10:30:03', 6, 0, '10.16.20.102', 0, 1, 7, 186, '2013-11-23 10:30:07', 0.00, 0),
(180, 1003, 'team18', 0, 960, '2013-11-23 10:30:04', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:30:07', 0.00, 0),
(181, 1003, 'team18', 0, 960, '2013-11-23 10:30:25', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:30:27', 0.00, 0),
(182, 1003, 'team18', 0, 960, '2013-11-23 10:30:43', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:30:47', 0.00, 0),
(183, 1003, 'team33', 0, 1480, '2013-11-23 10:30:47', 6, 1, '10.16.20.126', 0, 1, 2, 109, '2013-11-23 10:30:48', 0.00, 0),
(184, 1001, 'team2', 12, 976, '2013-11-23 10:30:55', 6, 0, '10.16.20.97', 0, 1, 0, 165, '2013-11-23 10:30:57', 0.00, 0),
(185, 1011, 'team49', 0, 960, '2013-11-23 10:31:03', 4, 1, '10.16.20.32', 1, 1, 2, 93, '2013-11-23 10:31:07', 0.00, 1),
(186, 1003, 'team18', 0, 960, '2013-11-23 10:31:05', 6, 0, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:31:07', 0.00, 0),
(187, 1009, 'team32', 0, 960, '2013-11-23 10:31:05', 4, 1, '10.16.20.128', 1, 1, 0, 88, '2013-11-23 10:31:07', 0.00, 1),
(188, 1003, 'team33', 0, 1480, '2013-11-23 10:31:08', 6, 1, '10.16.20.126', 0, 1, 2, 111, '2013-11-23 10:31:13', 0.00, 0),
(189, 1005, 'team17', 0, 964, '2013-11-23 10:31:23', 4, 1, '10.16.20.111', 0, 1, 4, 453, '2013-11-23 10:31:27', 0.00, 1),
(190, 1003, 'team18', 0, 960, '2013-11-23 10:31:26', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:31:27', 0.00, 0),
(191, 1006, 'team1', 588, 964, '2013-11-23 10:31:30', 4, 1, '10.16.20.98', 0, 1, 5, 253, '2013-11-23 10:31:33', 0.00, 1),
(192, 1003, 'team33', 0, 1480, '2013-11-23 10:31:30', 4, 1, '10.16.20.126', 0, 1, 2, 111, '2013-11-23 10:31:33', 0.00, 1),
(193, 1001, 'team79', 0, 408, '2013-11-23 10:31:44', 6, 3, '10.16.20.55', 0, 1, 0, 394, '2013-11-23 10:31:47', 0.00, 0),
(194, 1003, 'team82', 0, 956, '2013-11-23 10:31:47', 6, 1, '10.16.20.58', 0, 1, 2, 54, '2013-11-23 10:31:52', 0.00, 0),
(195, 1003, 'team18', 0, 960, '2013-11-23 10:31:51', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:31:52', 0.00, 0),
(196, 1009, 'team24', 0, 0, '2013-11-23 10:31:55', 11, 1, '10.16.20.100', 1, 1, 0, 18, '2013-11-23 10:31:57', 0.00, 0),
(197, 1008, 'team30', 0, 1484, '2013-11-23 10:32:02', 6, 1, '10.16.20.131', 0, 1, 7, 204, '2013-11-23 10:32:03', 0.00, 0),
(198, 1003, 'team18', 0, 960, '2013-11-23 10:32:16', 6, 1, '10.16.20.109', 0, 1, 2, 81, '2013-11-23 10:32:17', 0.00, 0),
(199, 1003, 'team82', 0, 956, '2013-11-23 10:32:26', 6, 1, '10.16.20.58', 0, 1, 2, 58, '2013-11-23 10:32:27', 0.00, 0),
(200, 1006, 'team5', 1572, 1484, '2013-11-23 10:32:53', 6, 1, '10.16.20.92', 0, 1, 5, 231, '2013-11-23 10:33:00', 0.00, 0),
(201, 1009, 'team43', 0, 960, '2013-11-23 10:32:57', 6, 1, '10.16.20.140', 1, 1, 0, 89, '2013-11-23 10:33:02', 0.00, 0),
(202, 1003, 'team82', 0, 956, '2013-11-23 10:33:02', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:33:07', 0.00, 0),
(203, 1003, 'team18', 0, 960, '2013-11-23 10:33:03', 4, 1, '10.16.20.109', 0, 1, 2, 78, '2013-11-23 10:33:07', 0.00, 1),
(204, 1002, 'team83', 68, 964, '2013-11-23 10:33:16', 9, 1, '10.16.20.62', 0, 1, 1, 534, '2013-11-23 10:33:18', 0.00, 0),
(205, 1001, 'team79', 0, 408, '2013-11-23 10:33:24', 6, 3, '10.16.20.55', 0, 1, 0, 412, '2013-11-23 10:33:27', 0.00, 0),
(206, 1003, 'team82', 0, 956, '2013-11-23 10:34:01', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:34:02', 0.00, 0),
(207, 1016, 'team66', 0, 960, '2013-11-23 10:34:06', 6, 1, '10.16.20.22', 1, 1, 7, 86, '2013-11-23 10:34:07', 0.00, 0),
(208, 1003, 'team82', 0, 956, '2013-11-23 10:34:42', 6, 1, '10.16.20.58', 0, 1, 2, 55, '2013-11-23 10:34:47', 0.00, 0),
(209, 1006, 'team91', 584, 964, '2013-11-23 10:34:55', 4, 1, '10.16.20.10', 0, 1, 5, 257, '2013-11-23 10:34:59', 0.00, 1),
(210, 1008, 'team71', 0, 964, '2013-11-23 10:34:55', 6, 1, '10.16.20.13', 0, 1, 7, 109, '2013-11-23 10:34:57', 0.00, 0),
(211, 1001, 'team39', 0, 964, '2013-11-23 10:35:02', 6, 1, '10.16.20.147', 0, 1, 0, 128, '2013-11-23 10:35:02', 0.00, 0),
(212, 1003, 'team82', 0, 956, '2013-11-23 10:35:07', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:35:07', 0.00, 0),
(213, 1009, 'team6', 0, 960, '2013-11-23 10:35:09', 4, 1, '10.16.20.89', 1, 1, 0, 88, '2013-11-23 10:35:12', 0.00, 1),
(214, 1003, 'team82', 0, 956, '2013-11-23 10:35:26', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:35:27', 0.00, 0),
(215, 1001, 'team71', 0, 0, '2013-11-23 10:35:31', 11, 1, '10.16.20.13', 0, 1, 0, 122, '2013-11-23 10:35:32', 0.00, 0),
(216, 1010, 'team77', 0, 960, '2013-11-23 10:35:54', 6, 1, '10.16.20.27', 1, 1, 1, 94, '2013-11-23 10:35:57', 0.00, 0),
(217, 1003, 'team82', 0, 956, '2013-11-23 10:36:09', 6, 1, '10.16.20.58', 0, 1, 2, 58, '2013-11-23 10:36:12', 0.00, 0),
(218, 1011, 'team34', 0, 960, '2013-11-23 10:36:09', 6, 1, '10.16.20.124', 1, 1, 2, 97, '2013-11-23 10:36:12', 0.00, 0),
(219, 1008, 'team39', 0, 964, '2013-11-23 10:36:17', 6, 1, '10.16.20.147', 0, 1, 7, 128, '2013-11-23 10:36:17', 0.00, 0),
(220, 1006, 'team5', 1724, 1484, '2013-11-23 10:36:35', 4, 1, '10.16.20.92', 0, 1, 5, 321, '2013-11-23 10:36:40', 0.00, 1),
(221, 1003, 'team82', 0, 956, '2013-11-23 10:36:37', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:36:37', 0.00, 0),
(222, 1008, 'team79', 4360, 1484, '2013-11-23 10:36:44', 4, 1, '10.16.20.55', 0, 1, 7, 191, '2013-11-23 10:36:58', 0.00, 1),
(223, 1008, 'team20', 4864, 964, '2013-11-23 10:36:46', 4, 0, '10.16.20.105', 0, 1, 7, 173, '2013-11-23 10:36:58', 0.00, 1),
(224, 1008, 'team55', 7000, 964, '2013-11-23 10:36:52', 7, 1, '10.16.20.40', 0, 1, 7, 148, '2013-11-23 10:37:53', 0.00, 0),
(225, 1013, 'team78', 0, 960, '2013-11-23 10:36:54', 6, 1, '10.16.20.53', 1, 1, 4, 89, '2013-11-23 10:36:57', 0.00, 0),
(226, 1005, 'team33', 0, 0, '2013-11-23 10:36:58', 11, 1, '10.16.20.126', 0, 1, 4, 642, '2013-11-23 10:37:03', 0.00, 0),
(227, 1009, 'team77', 0, 960, '2013-11-23 10:36:59', 6, 1, '10.16.20.27', 1, 1, 0, 88, '2013-11-23 10:37:02', 0.00, 0),
(228, 1003, 'team82', 0, 956, '2013-11-23 10:37:01', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:37:02', 0.00, 0),
(229, 1008, 'team7', 0, 1484, '2013-11-23 10:37:16', 6, 1, '10.16.20.87', 0, 1, 7, 187, '2013-11-23 10:37:18', 0.00, 0),
(230, 1003, 'team82', 0, 956, '2013-11-23 10:37:22', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:37:27', 0.00, 0),
(231, 1001, 'team83', 10000, 964, '2013-11-23 10:37:29', 7, 0, '10.16.20.62', 0, 1, 0, 534, '2013-11-23 10:39:12', 0.00, 0),
(232, 1005, 'team33', 4, 1672, '2013-11-23 10:37:30', 4, 1, '10.16.20.126', 0, 1, 4, 665, '2013-11-23 10:37:33', 0.00, 1),
(233, 1005, 'team3', 4, 1484, '2013-11-23 10:37:36', 4, 1, '10.16.20.96', 0, 1, 4, 420, '2013-11-23 10:37:38', 0.00, 1),
(234, 1007, 'team2', 0, 964, '2013-11-23 10:37:36', 4, 0, '10.16.20.97', 0, 1, 6, 408, '2013-11-23 10:37:37', 0.00, 1),
(235, 1008, 'team58', 0, 964, '2013-11-23 10:37:45', 6, 0, '10.16.20.45', 0, 1, 7, 123, '2013-11-23 10:37:48', 0.00, 0),
(236, 1003, 'team82', 0, 956, '2013-11-23 10:37:46', 6, 1, '10.16.20.58', 0, 1, 2, 57, '2013-11-23 10:37:47', 0.00, 0),
(237, 1011, 'team73', 0, 960, '2013-11-23 10:38:06', 6, 0, '10.16.20.235', 1, 1, 2, 88, '2013-11-23 10:38:07', 0.00, 0),
(238, 1003, 'team82', 0, 956, '2013-11-23 10:38:07', 6, 1, '10.16.20.58', 0, 1, 2, 56, '2013-11-23 10:38:12', 0.00, 0),
(239, 1001, 'team29', 0, 0, '2013-11-23 10:38:08', 11, 1, '10.16.20.133', 0, 1, 0, 481, '2013-11-23 10:38:12', 0.00, 0),
(240, 1001, 'team79', 0, 408, '2013-11-23 10:39:35', 6, 3, '10.16.20.55', 0, 1, 0, 428, '2013-11-23 10:39:37', 0.00, 0),
(243, 1016, 'team66', 0, 960, '2013-11-23 10:40:17', 6, 1, '10.16.20.22', 1, 1, 7, 86, '2013-11-23 10:40:17', 0.00, 0),
(244, 1008, 'team42', 7000, 964, '2013-11-23 10:40:18', 7, 1, '10.16.20.142', 0, 1, 7, 136, '2013-11-23 10:41:11', 0.00, 0),
(245, 1001, 'team79', 0, 408, '2013-11-23 10:40:27', 6, 3, '10.16.20.55', 0, 1, 0, 428, '2013-11-23 10:40:27', 0.00, 0),
(246, 1008, 'team39', 0, 964, '2013-11-23 10:40:37', 6, 1, '10.16.20.147', 0, 1, 7, 131, '2013-11-23 10:40:38', 0.00, 0),
(247, 1001, 'team11', 0, 1496, '2013-11-23 10:40:46', 6, 1, '10.16.20.84', 0, 1, 0, 699, '2013-11-23 10:40:48', 0.00, 0),
(248, 1001, 'team29', 816, 964, '2013-11-23 10:41:11', 6, 1, '10.16.20.133', 0, 1, 0, 525, '2013-11-23 10:41:13', 0.00, 0),
(249, 1010, 'team69', 0, 960, '2013-11-23 10:41:16', 6, 1, '10.16.20.16', 1, 1, 1, 103, '2013-11-23 10:41:17', 0.00, 0),
(250, 1007, 'team10', 0, 1480, '2013-11-23 10:41:29', 10, 1, '10.16.20.99', 0, 1, 6, 372, '2013-11-23 10:41:33', 0.00, 0),
(251, 1007, 'team14', 0, 964, '2013-11-23 10:41:43', 4, 0, '10.16.20.117', 0, 1, 6, 380, '2013-11-23 10:41:47', 0.00, 1),
(252, 1007, 'team52', 0, 1496, '2013-11-23 10:41:58', 4, 1, '10.16.20.36', 0, 1, 6, 378, '2013-11-23 10:42:03', 0.00, 1),
(253, 1008, 'team60', 6008, 964, '2013-11-23 10:42:08', 4, 1, '10.16.20.48', 0, 1, 7, 152, '2013-11-23 10:42:27', 0.00, 1),
(254, 1003, 'team82', 0, 960, '2013-11-23 10:42:20', 6, 1, '10.16.20.58', 0, 1, 2, 59, '2013-11-23 10:42:23', 0.00, 0),
(255, 1008, 'team40', 0, 964, '2013-11-23 10:42:23', 6, 1, '10.16.20.146', 0, 1, 7, 106, '2013-11-23 10:42:28', 0.00, 0),
(256, 1010, 'team77', 0, 960, '2013-11-23 10:42:36', 4, 1, '10.16.20.27', 1, 1, 1, 94, '2013-11-23 10:42:38', 0.00, 1),
(257, 1008, 'team71', 0, 964, '2013-11-23 10:43:10', 6, 1, '10.16.20.13', 0, 1, 7, 159, '2013-11-23 10:43:13', 0.00, 0),
(258, 1006, 'team23', 0, 960, '2013-11-23 10:43:11', 10, 0, '10.16.20.102', 0, 1, 5, 147, '2013-11-23 10:43:13', 0.00, 0),
(259, 1003, 'team82', 0, 960, '2013-11-23 10:43:12', 6, 1, '10.16.20.58', 0, 1, 2, 62, '2013-11-23 10:43:13', 0.00, 0),
(260, 1003, 'team82', 0, 960, '2013-11-23 10:43:36', 6, 1, '10.16.20.58', 0, 1, 2, 60, '2013-11-23 10:43:38', 0.00, 0),
(261, 1006, 'team83', 616, 964, '2013-11-23 10:43:41', 6, 0, '10.16.20.62', 0, 1, 5, 276, '2013-11-23 10:43:44', 0.00, 0),
(262, 1003, 'team82', 0, 960, '2013-11-23 10:44:02', 6, 1, '10.16.20.58', 0, 1, 2, 63, '2013-11-23 10:44:03', 0.00, 0),
(263, 1010, 'team70', 0, 960, '2013-11-23 10:44:05', 6, 1, '10.16.20.72', 1, 1, 1, 82, '2013-11-23 10:44:08', 0.00, 0),
(264, 1002, 'team17', 0, 964, '2013-11-23 10:44:08', 4, 1, '10.16.20.111', 0, 1, 1, 704, '2013-11-23 10:44:13', 0.00, 1),
(265, 1008, 'team71', 0, 0, '2013-11-23 10:44:15', 11, 1, '10.16.20.13', 0, 1, 7, 164, '2013-11-23 10:44:18', 0.00, 0),
(266, 1008, 'team44', 5976, 964, '2013-11-23 10:44:18', 4, 1, '10.16.20.138', 0, 1, 7, 155, '2013-11-23 10:44:32', 0.00, 1),
(267, 1003, 'team20', 0, 960, '2013-11-23 10:44:27', 6, 0, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:44:28', 0.00, 0),
(268, 1015, 'team73', 0, 960, '2013-11-23 10:44:28', 6, 1, '10.16.20.235', 1, 1, 6, 96, '2013-11-23 10:44:33', 0.00, 0),
(269, 1003, 'team82', 0, 960, '2013-11-23 10:44:38', 6, 1, '10.16.20.58', 0, 1, 2, 62, '2013-11-23 10:44:43', 0.00, 0),
(270, 1012, 'team38', 0, 960, '2013-11-23 10:44:44', 6, 0, '10.16.20.118', 1, 1, 3, 115, '2013-11-23 10:44:48', 0.00, 0),
(271, 1008, 'team55', 0, 964, '2013-11-23 10:44:50', 6, 1, '10.16.20.40', 0, 1, 7, 166, '2013-11-23 10:44:53', 0.00, 0),
(272, 1008, 'team71', 0, 0, '2013-11-23 10:44:59', 11, 1, '10.16.20.13', 0, 1, 7, 178, '2013-11-23 10:45:03', 0.00, 0),
(273, 1012, 'team38', 0, 960, '2013-11-23 10:45:13', 6, 0, '10.16.20.118', 1, 1, 3, 111, '2013-11-23 10:45:13', 0.00, 0),
(274, 1010, 'team48', 0, 960, '2013-11-23 10:45:20', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 10:45:23', 0.00, 0),
(277, 1012, 'team75', 0, 960, '2013-11-23 10:45:35', 6, 1, '10.16.20.24', 1, 1, 3, 110, '2013-11-23 10:45:38', 0.00, 0),
(278, 1001, 'team30', 0, 1484, '2013-11-23 10:45:39', 6, 1, '10.16.20.131', 0, 1, 0, 530, '2013-11-23 10:45:44', 0.00, 0),
(279, 1003, 'team20', 0, 960, '2013-11-23 10:45:53', 6, 0, '10.16.20.105', 0, 1, 2, 78, '2013-11-23 10:45:58', 0.00, 0),
(280, 1003, 'team82', 0, 960, '2013-11-23 10:45:54', 6, 1, '10.16.20.58', 0, 1, 2, 62, '2013-11-23 10:45:58', 0.00, 0),
(281, 1010, 'team53', 0, 960, '2013-11-23 10:46:10', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 10:46:13', 0.00, 0),
(282, 1010, 'team34', 0, 960, '2013-11-23 10:46:15', 4, 1, '10.16.20.124', 1, 1, 1, 94, '2013-11-23 10:46:18', 0.00, 1),
(283, 1001, 'team20', 0, 960, '2013-11-23 10:46:16', 6, 1, '10.16.20.105', 0, 1, 0, 74, '2013-11-23 10:46:18', 0.00, 0),
(284, 1011, 'team73', 0, 960, '2013-11-23 10:46:18', 4, 0, '10.16.20.235', 1, 1, 2, 97, '2013-11-23 10:46:23', 0.00, 1),
(285, 1003, 'team29', 0, 960, '2013-11-23 10:46:34', 4, 1, '10.16.20.133', 0, 1, 2, 89, '2013-11-23 10:46:38', 0.00, 1),
(286, 1003, 'team20', 0, 960, '2013-11-23 10:46:45', 6, 0, '10.16.20.105', 0, 1, 2, 74, '2013-11-23 10:46:48', 0.00, 0),
(287, 1003, 'team82', 0, 960, '2013-11-23 10:46:51', 6, 1, '10.16.20.58', 0, 1, 2, 73, '2013-11-23 10:46:53', 0.00, 0),
(288, 1011, 'team19', 0, 960, '2013-11-23 10:47:00', 4, 1, '10.16.20.107', 1, 1, 2, 92, '2013-11-23 10:47:03', 0.00, 1),
(289, 1011, 'team77', 0, 960, '2013-11-23 10:47:01', 4, 1, '10.16.20.27', 1, 1, 2, 93, '2013-11-23 10:47:03', 0.00, 1),
(290, 1006, 'team83', 532, 964, '2013-11-23 10:47:16', 4, 1, '10.16.20.62', 0, 1, 5, 234, '2013-11-23 10:47:19', 0.00, 1),
(291, 1006, 'team79', 432, 1484, '2013-11-23 10:47:17', 6, 1, '10.16.20.55', 0, 1, 5, 263, '2013-11-23 10:47:20', 0.00, 0),
(292, 1008, 'team46', 7000, 964, '2013-11-23 10:47:17', 7, 1, '10.16.20.101', 0, 1, 7, 137, '2013-11-23 10:47:59', 0.00, 0),
(293, 1008, 'team55', 0, 964, '2013-11-23 10:47:33', 6, 1, '10.16.20.40', 0, 1, 7, 168, '2013-11-23 10:47:33', 0.00, 0),
(294, 1012, 'team24', 0, 0, '2013-11-23 10:47:34', 11, 1, '10.16.20.100', 1, 1, 3, 5, '2013-11-23 10:47:38', 0.00, 0),
(295, 1012, 'team73', 0, 960, '2013-11-23 10:47:42', 6, 1, '10.16.20.235', 1, 1, 3, 88, '2013-11-23 10:47:43', 0.00, 0),
(296, 1005, 'team5', 0, 1276, '2013-11-23 10:47:43', 4, 0, '10.16.20.92', 0, 1, 4, 604, '2013-11-23 10:47:48', 0.00, 1),
(297, 1003, 'team20', 0, 960, '2013-11-23 10:47:45', 6, 1, '10.16.20.105', 0, 1, 2, 75, '2013-11-23 10:47:48', 0.00, 0),
(298, 1011, 'team66', 0, 960, '2013-11-23 10:47:53', 4, 1, '10.16.20.22', 1, 1, 2, 92, '2013-11-23 10:47:53', 0.00, 1),
(299, 1003, 'team82', 0, 960, '2013-11-23 10:47:59', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:48:03', 0.00, 0),
(300, 1005, 'team14', 0, 964, '2013-11-23 10:48:10', 4, 0, '10.16.20.117', 0, 1, 4, 558, '2013-11-23 10:48:13', 0.00, 1),
(301, 1008, 'team7', 0, 1484, '2013-11-23 10:48:16', 6, 1, '10.16.20.87', 0, 1, 7, 204, '2013-11-23 10:48:19', 0.00, 0),
(302, 1003, 'team82', 0, 960, '2013-11-23 10:48:24', 6, 1, '10.16.20.58', 0, 1, 2, 72, '2013-11-23 10:48:28', 0.00, 0),
(303, 1006, 'team79', 360, 1484, '2013-11-23 10:48:36', 6, 1, '10.16.20.55', 0, 1, 5, 277, '2013-11-23 10:48:39', 0.00, 0),
(304, 1005, 'team1', 0, 964, '2013-11-23 10:48:49', 4, 1, '10.16.20.98', 0, 1, 4, 509, '2013-11-23 10:48:53', 0.00, 1),
(305, 1009, 'team74', 0, 960, '2013-11-23 10:48:58', 6, 1, '10.16.20.21', 1, 1, 0, 92, '2013-11-23 10:49:03', 0.00, 0),
(306, 1008, 'team85', 0, 964, '2013-11-23 10:49:01', 6, 1, '10.16.20.63', 0, 1, 7, 319, '2013-11-23 10:49:03', 0.00, 0),
(307, 1003, 'team82', 0, 960, '2013-11-23 10:49:06', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:49:08', 0.00, 0),
(308, 1007, 'team44', 0, 1496, '2013-11-23 10:49:22', 4, 1, '10.16.20.138', 0, 1, 6, 379, '2013-11-23 10:49:24', 0.00, 1),
(309, 1006, 'team79', 536, 1484, '2013-11-23 10:49:22', 6, 1, '10.16.20.55', 0, 1, 5, 301, '2013-11-23 10:49:25', 0.00, 0),
(310, 1012, 'team78', 0, 960, '2013-11-23 10:49:26', 6, 1, '10.16.20.53', 1, 1, 3, 113, '2013-11-23 10:49:28', 0.00, 0),
(311, 1002, 'team3', 4, 1484, '2013-11-23 10:49:29', 4, 1, '10.16.20.96', 0, 1, 1, 1294, '2013-11-23 10:49:34', 0.00, 1),
(312, 1003, 'team82', 0, 960, '2013-11-23 10:49:35', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:49:38', 0.00, 0),
(313, 1013, 'team76', 0, 960, '2013-11-23 10:49:36', 6, 0, '10.16.20.54', 1, 1, 4, 87, '2013-11-23 10:49:38', 0.00, 0),
(314, 1008, 'team85', 0, 964, '2013-11-23 10:49:41', 6, 0, '10.16.20.63', 0, 1, 7, 319, '2013-11-23 10:49:43', 0.00, 0),
(315, 1001, 'team89', 180, 3312, '2013-11-23 10:49:45', 4, 1, '10.16.20.1', 0, 1, 0, 794, '2013-11-23 10:49:49', 0.00, 1),
(316, 1001, 'team30', 0, 1484, '2013-11-23 10:49:48', 6, 1, '10.16.20.131', 0, 1, 0, 599, '2013-11-23 10:49:54', 0.00, 0),
(317, 1003, 'team82', 0, 960, '2013-11-23 10:50:07', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:50:08', 0.00, 0),
(318, 1003, 'team82', 0, 960, '2013-11-23 10:50:27', 6, 1, '10.16.20.58', 0, 1, 2, 76, '2013-11-23 10:50:28', 0.00, 0),
(319, 1010, 'team53', 0, 960, '2013-11-23 10:50:41', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 10:50:43', 0.00, 0),
(320, 1003, 'team82', 0, 960, '2013-11-23 10:51:03', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:51:08', 0.00, 0),
(321, 1008, 'team39', 0, 960, '2013-11-23 10:51:04', 6, 1, '10.16.20.147', 0, 1, 7, 116, '2013-11-23 10:51:08', 0.00, 0),
(322, 1012, 'team75', 0, 960, '2013-11-23 10:51:07', 4, 1, '10.16.20.24', 1, 1, 3, 111, '2013-11-23 10:51:08', 0.00, 1),
(323, 1008, 'team85', 0, 964, '2013-11-23 10:51:24', 6, 0, '10.16.20.63', 0, 1, 7, 320, '2013-11-23 10:51:28', 0.00, 0),
(324, 1011, 'team76', 0, 960, '2013-11-23 10:51:30', 6, 0, '10.16.20.54', 1, 1, 2, 93, '2013-11-23 10:51:33', 0.00, 0),
(325, 1003, 'team82', 0, 960, '2013-11-23 10:51:30', 6, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:51:33', 0.00, 0),
(326, 1009, 'team74', 0, 960, '2013-11-23 10:51:34', 6, 1, '10.16.20.21', 1, 1, 0, 92, '2013-11-23 10:51:38', 0.00, 0),
(327, 1011, 'team38', 0, 960, '2013-11-23 10:51:34', 6, 1, '10.16.20.118', 1, 1, 2, 96, '2013-11-23 10:51:38', 0.00, 0),
(328, 1006, 'team18', 512, 964, '2013-11-23 10:51:34', 6, 1, '10.16.20.109', 0, 1, 5, 358, '2013-11-23 10:51:39', 0.00, 0),
(329, 1013, 'team49', 0, 960, '2013-11-23 10:51:34', 6, 1, '10.16.20.32', 1, 1, 4, 89, '2013-11-23 10:51:38', 0.00, 0),
(330, 1006, 'team90', 0, 0, '2013-11-23 10:52:06', 11, 1, '10.16.20.8', 0, 1, 5, 663, '2013-11-23 10:52:08', 0.00, 0),
(331, 1008, 'team10', 0, 964, '2013-11-23 10:52:09', 6, 0, '10.16.20.99', 0, 1, 7, 203, '2013-11-23 10:52:13', 0.00, 0),
(332, 1003, 'team82', 0, 960, '2013-11-23 10:52:13', 4, 1, '10.16.20.58', 0, 1, 2, 75, '2013-11-23 10:52:13', 0.00, 1),
(333, 1010, 'team53', 0, 960, '2013-11-23 10:52:29', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 10:52:33', 0.00, 0),
(334, 1014, 'team66', 0, 960, '2013-11-23 10:52:58', 6, 1, '10.16.20.22', 1, 1, 5, 78, '2013-11-23 10:52:58', 0.00, 0),
(335, 1010, 'team69', 0, 960, '2013-11-23 10:52:58', 6, 1, '10.16.20.16', 1, 1, 1, 104, '2013-11-23 10:53:03', 0.00, 0),
(336, 1001, 'team11', 0, 1496, '2013-11-23 10:53:13', 6, 1, '10.16.20.84', 0, 1, 0, 705, '2013-11-23 10:53:19', 0.00, 0),
(337, 1006, 'team18', 512, 964, '2013-11-23 10:53:33', 6, 1, '10.16.20.109', 0, 1, 5, 359, '2013-11-23 10:53:34', 0.00, 0),
(338, 1010, 'team53', 0, 960, '2013-11-23 10:53:49', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 10:53:53', 0.00, 0),
(339, 1006, 'team44', 1820, 1484, '2013-11-23 10:53:50', 6, 1, '10.16.20.138', 0, 1, 5, 289, '2013-11-23 10:53:56', 0.00, 0),
(340, 1001, 'team20', 0, 960, '2013-11-23 10:53:51', 6, 0, '10.16.20.105', 0, 1, 0, 76, '2013-11-23 10:53:53', 0.00, 0),
(341, 1010, 'team43', 0, 960, '2013-11-23 10:53:59', 6, 1, '10.16.20.140', 1, 1, 1, 104, '2013-11-23 10:54:03', 0.00, 0),
(342, 1003, 'team20', 0, 960, '2013-11-23 10:54:15', 6, 0, '10.16.20.105', 0, 1, 2, 76, '2013-11-23 10:54:18', 0.00, 0),
(343, 1007, 'team10', 0, 1480, '2013-11-23 10:54:20', 10, 1, '10.16.20.99', 0, 1, 6, 374, '2013-11-23 10:54:24', 0.00, 0),
(344, 1001, 'team4', 68, 976, '2013-11-23 10:54:27', 9, 1, '10.16.20.94', 0, 1, 0, 545, '2013-11-23 10:54:28', 0.00, 0),
(345, 1003, 'team20', 0, 960, '2013-11-23 10:54:30', 6, 1, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:54:33', 0.00, 0),
(346, 1009, 'team74', 0, 960, '2013-11-23 10:54:42', 6, 1, '10.16.20.21', 1, 1, 0, 92, '2013-11-23 10:54:43', 0.00, 0),
(347, 1003, 'team20', 0, 960, '2013-11-23 10:54:59', 6, 0, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:55:03', 0.00, 0),
(348, 1011, 'team12', 0, 960, '2013-11-23 10:55:10', 4, 1, '10.16.20.83', 1, 1, 2, 92, '2013-11-23 10:55:13', 0.00, 1),
(349, 1009, 'team66', 0, 960, '2013-11-23 10:55:13', 6, 1, '10.16.20.22', 1, 1, 0, 88, '2013-11-23 10:55:13', 0.00, 0),
(350, 1014, 'team69', 0, 960, '2013-11-23 10:55:23', 6, 1, '10.16.20.16', 1, 1, 5, 78, '2013-11-23 10:55:23', 0.00, 0),
(351, 1003, 'team20', 0, 960, '2013-11-23 10:55:23', 6, 1, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:55:23', 0.00, 0),
(352, 1006, 'team44', 1272, 1484, '2013-11-23 10:55:27', 4, 1, '10.16.20.138', 0, 1, 5, 290, '2013-11-23 10:55:30', 0.00, 1),
(353, 1005, 'team2', 0, 1004, '2013-11-23 10:55:37', 4, 1, '10.16.20.97', 0, 1, 4, 515, '2013-11-23 10:55:38', 0.00, 1),
(354, 1003, 'team20', 0, 960, '2013-11-23 10:55:46', 6, 0, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:55:48', 0.00, 0),
(355, 1003, 'team20', 0, 960, '2013-11-23 10:56:04', 6, 1, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:56:08', 0.00, 0),
(356, 1003, 'team20', 0, 960, '2013-11-23 10:56:22', 4, 0, '10.16.20.105', 0, 1, 2, 77, '2013-11-23 10:56:23', 0.00, 1),
(357, 1007, 'team10', 0, 1484, '2013-11-23 10:56:33', 10, 1, '10.16.20.99', 0, 1, 6, 308, '2013-11-23 10:56:34', 0.00, 0),
(358, 1003, 'team89', 0, 0, '2013-11-23 10:56:34', 11, 1, '10.16.20.1', 0, 1, 2, 255, '2013-11-23 10:56:38', 0.00, 0),
(359, 1008, 'team71', 5944, 964, '2013-11-23 10:56:36', 4, 1, '10.16.20.13', 0, 1, 7, 147, '2013-11-23 10:56:52', 0.00, 1),
(360, 1004, 'team35', 0, 964, '2013-11-23 10:56:52', 6, 1, '110.96.32.164', 0, 1, 3, 2108, '2013-11-23 10:56:53', 0.00, 0),
(361, 1011, 'team6', 0, 960, '2013-11-23 10:57:02', 4, 1, '10.16.20.89', 1, 1, 2, 92, '2013-11-23 10:57:03', 0.00, 1),
(362, 1003, 'team89', 0, 960, '2013-11-23 10:57:14', 6, 1, '10.16.20.1', 0, 1, 2, 254, '2013-11-23 10:57:18', 0.00, 0),
(363, 1006, 'team18', 504, 964, '2013-11-23 10:57:31', 6, 1, '10.16.20.109', 0, 1, 5, 368, '2013-11-23 10:57:34', 0.00, 0),
(364, 1013, 'team69', 0, 960, '2013-11-23 10:57:42', 6, 1, '10.16.20.16', 1, 1, 4, 85, '2013-11-23 10:57:43', 0.00, 0),
(365, 1011, 'team53', 0, 960, '2013-11-23 10:58:18', 6, 1, '10.16.20.38', 1, 1, 2, 92, '2013-11-23 10:58:18', 0.00, 0),
(366, 1006, 'team17', 0, 1008, '2013-11-23 10:59:03', 10, 1, '10.16.20.111', 0, 1, 5, 447, '2013-11-23 10:59:03', 0.00, 0),
(367, 1008, 'team23', 0, 964, '2013-11-23 10:59:45', 6, 1, '10.16.20.102', 0, 1, 7, 183, '2013-11-23 10:59:48', 0.00, 0),
(368, 1008, 'team23', 0, 964, '2013-11-23 10:59:58', 6, 0, '10.16.20.102', 0, 1, 7, 183, '2013-11-23 11:00:03', 0.00, 0),
(369, 1009, 'team51', 0, 960, '2013-11-23 11:00:16', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 11:00:18', 0.00, 0),
(370, 1010, 'team6', 0, 960, '2013-11-23 11:00:20', 4, 1, '10.16.20.89', 1, 1, 1, 94, '2013-11-23 11:00:23', 0.00, 1),
(371, 1009, 'team66', 0, 960, '2013-11-23 11:00:22', 6, 1, '10.16.20.22', 1, 1, 0, 88, '2013-11-23 11:00:23', 0.00, 0),
(372, 1012, 'team56', 0, 960, '2013-11-23 11:00:24', 6, 1, '10.16.20.41', 1, 1, 3, 110, '2013-11-23 11:00:28', 0.00, 0),
(373, 1001, 'team79', 0, 408, '2013-11-23 11:00:32', 6, 3, '10.16.20.55', 0, 1, 0, 475, '2013-11-23 11:00:33', 0.00, 0),
(374, 1006, 'team90', 0, 0, '2013-11-23 11:00:34', 11, 1, '10.16.20.8', 0, 1, 5, 655, '2013-11-23 11:00:38', 0.00, 0),
(375, 1010, 'team51', 0, 960, '2013-11-23 11:01:26', 6, 1, '10.16.20.34', 1, 1, 1, 78, '2013-11-23 11:01:28', 0.00, 0),
(376, 1006, 'team54', 0, 960, '2013-11-23 11:01:41', 10, 1, '10.16.20.39', 0, 1, 5, 456, '2013-11-23 11:01:43', 0.00, 0),
(377, 1009, 'team43', 0, 960, '2013-11-23 11:01:44', 6, 1, '10.16.20.140', 1, 1, 0, 89, '2013-11-23 11:01:48', 0.00, 0),
(378, 1012, 'team12', 0, 960, '2013-11-23 11:01:48', 4, 1, '10.16.20.83', 1, 1, 3, 111, '2013-11-23 11:01:48', 0.00, 1),
(379, 1011, 'team38', 0, 960, '2013-11-23 11:01:58', 6, 0, '10.16.20.118', 1, 1, 2, 96, '2013-11-23 11:01:58', 0.00, 0),
(380, 1006, 'team79', 564, 1484, '2013-11-23 11:02:28', 6, 1, '10.16.20.55', 0, 1, 5, 299, '2013-11-23 11:02:35', 0.00, 0),
(381, 1006, 'team54', 0, 960, '2013-11-23 11:03:26', 10, 1, '10.16.20.39', 0, 1, 5, 470, '2013-11-23 11:03:28', 0.00, 0),
(382, 1007, 'team10', 0, 1484, '2013-11-23 11:03:52', 10, 1, '10.16.20.99', 0, 1, 6, 310, '2013-11-23 11:03:54', 0.00, 0),
(383, 1011, 'team34', 0, 960, '2013-11-23 11:04:27', 4, 1, '10.16.20.124', 1, 1, 2, 93, '2013-11-23 11:04:28', 0.00, 1),
(384, 1009, 'team75', 0, 960, '2013-11-23 11:04:54', 4, 1, '10.16.20.24', 1, 1, 0, 88, '2013-11-23 11:04:58', 0.00, 1),
(385, 1012, 'team66', 0, 960, '2013-11-23 11:04:58', 6, 1, '10.16.20.22', 1, 1, 3, 107, '2013-11-23 11:04:58', 0.00, 0),
(386, 1012, 'team56', 0, 960, '2013-11-23 11:05:01', 6, 1, '10.16.20.41', 1, 1, 3, 111, '2013-11-23 11:05:03', 0.00, 0),
(387, 1010, 'team78', 0, 960, '2013-11-23 11:05:05', 6, 1, '10.16.20.53', 1, 1, 1, 104, '2013-11-23 11:05:08', 0.00, 0),
(388, 1005, 'team44', 0, 1484, '2013-11-23 11:05:14', 6, 1, '10.16.20.138', 0, 1, 4, 469, '2013-11-23 11:05:19', 0.00, 0),
(389, 1007, 'team83', 0, 980, '2013-11-23 11:05:28', 4, 0, '10.16.20.62', 0, 1, 6, 439, '2013-11-23 11:05:28', 0.00, 1),
(390, 1008, 'team39', 0, 964, '2013-11-23 11:05:41', 6, 1, '10.16.20.147', 0, 1, 7, 146, '2013-11-23 11:05:44', 0.00, 0),
(391, 1010, 'team51', 0, 960, '2013-11-23 11:05:49', 4, 1, '10.16.20.34', 1, 1, 1, 94, '2013-11-23 11:05:53', 0.00, 1),
(392, 1013, 'team24', 0, 0, '2013-11-23 11:06:07', 11, 1, '10.16.20.100', 1, 1, 4, 12, '2013-11-23 11:06:08', 0.00, 0),
(393, 1007, 'team10', 0, 1484, '2013-11-23 11:06:22', 10, 1, '10.16.20.99', 0, 1, 6, 327, '2013-11-23 11:06:24', 0.00, 0),
(394, 1011, 'team51', 0, 960, '2013-11-23 11:06:25', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 11:06:28', 0.00, 0),
(395, 1008, 'team42', 7000, 964, '2013-11-23 11:06:46', 7, 1, '10.16.20.142', 0, 1, 7, 140, '2013-11-23 11:07:25', 0.00, 0),
(396, 1008, 'team39', 0, 964, '2013-11-23 11:07:14', 6, 1, '10.16.20.147', 0, 1, 7, 144, '2013-11-23 11:07:19', 0.00, 0),
(397, 1005, 'team44', 4, 1484, '2013-11-23 11:07:26', 9, 1, '10.16.20.138', 0, 1, 4, 597, '2013-11-23 11:07:29', 0.00, 0),
(398, 1006, 'team79', 1856, 1484, '2013-11-23 11:07:44', 6, 1, '10.16.20.55', 0, 1, 5, 298, '2013-11-23 11:07:51', 0.00, 0),
(399, 1013, 'team38', 0, 960, '2013-11-23 11:08:09', 4, 0, '10.16.20.118', 1, 1, 4, 85, '2013-11-23 11:08:13', 0.00, 1),
(400, 1013, 'team73', 0, 960, '2013-11-23 11:08:10', 6, 1, '10.16.20.235', 1, 1, 4, 85, '2013-11-23 11:08:13', 0.00, 0),
(401, 1010, 'team70', 0, 960, '2013-11-23 11:08:21', 6, 1, '10.16.20.72', 1, 1, 1, 102, '2013-11-23 11:08:23', 0.00, 0),
(402, 1007, 'team89', 0, 976, '2013-11-23 11:08:22', 4, 1, '10.16.20.1', 0, 1, 6, 561, '2013-11-23 11:08:23', 0.00, 1),
(403, 1012, 'team66', 0, 960, '2013-11-23 11:08:29', 6, 1, '10.16.20.22', 1, 1, 3, 109, '2013-11-23 11:08:33', 0.00, 0),
(404, 1006, 'team17', 4, 1116, '2013-11-23 11:08:55', 10, 1, '10.16.20.111', 0, 1, 5, 441, '2013-11-23 11:08:58', 0.00, 0),
(405, 1002, 'team1', 0, 964, '2013-11-23 11:08:55', 4, 1, '10.16.20.98', 0, 1, 1, 783, '2013-11-23 11:08:58', 0.00, 1),
(406, 1008, 'team30', 0, 1484, '2013-11-23 11:09:09', 6, 1, '10.16.20.131', 0, 1, 7, 218, '2013-11-23 11:09:14', 0.00, 0),
(407, 1006, 'team79', 1884, 1484, '2013-11-23 11:09:17', 6, 1, '10.16.20.55', 0, 1, 5, 303, '2013-11-23 11:09:21', 0.00, 0),
(408, 1008, 'team42', 7000, 964, '2013-11-23 11:09:35', 7, 1, '10.16.20.142', 0, 1, 7, 149, '2013-11-23 11:10:13', 0.00, 0),
(409, 1007, 'team5', 0, 1524, '2013-11-23 11:09:35', 4, 1, '10.16.20.92', 0, 1, 6, 513, '2013-11-23 11:09:39', 0.00, 1),
(410, 1008, 'team40', 7000, 964, '2013-11-23 11:09:45', 7, 1, '10.16.20.146', 0, 1, 7, 127, '2013-11-23 11:10:28', 0.00, 0),
(411, 1008, 'team35', 3860, 964, '2013-11-23 11:10:06', 4, 1, '10.16.8.43', 0, 1, 7, 151, '2013-11-23 11:10:18', 0.00, 1),
(412, 1008, 'team39', 0, 964, '2013-11-23 11:10:13', 6, 1, '10.16.20.147', 0, 1, 7, 146, '2013-11-23 11:10:13', 0.00, 0),
(413, 1008, 'team42', 7000, 964, '2013-11-23 11:10:20', 7, 1, '10.16.20.142', 0, 1, 7, 146, '2013-11-23 11:10:56', 0.00, 0),
(414, 1013, 'team75', 0, 960, '2013-11-23 11:10:22', 4, 1, '10.16.20.24', 1, 1, 4, 85, '2013-11-23 11:10:23', 0.00, 1),
(415, 1006, 'team79', 1936, 1484, '2013-11-23 11:10:30', 6, 1, '10.16.20.55', 0, 1, 5, 353, '2013-11-23 11:10:37', 0.00, 0),
(416, 1008, 'team39', 5920, 964, '2013-11-23 11:10:56', 4, 1, '10.16.20.147', 0, 1, 7, 149, '2013-11-23 11:11:12', 0.00, 1),
(417, 1005, 'team35', 0, 964, '2013-11-23 11:11:23', 4, 1, '110.96.32.164', 0, 1, 4, 904, '2013-11-23 11:11:29', 0.00, 1),
(418, 1011, 'team32', 0, 960, '2013-11-23 11:11:39', 6, 1, '10.16.20.128', 1, 1, 2, 88, '2013-11-23 11:11:43', 0.00, 0),
(419, 1006, 'team52', 0, 0, '2013-11-23 11:11:39', 11, 1, '10.16.20.36', 0, 1, 5, 318, '2013-11-23 11:11:44', 0.00, 0),
(420, 1006, 'team79', 1816, 1484, '2013-11-23 11:11:44', 4, 1, '10.16.20.55', 0, 1, 5, 350, '2013-11-23 11:11:51', 0.00, 1),
(421, 1007, 'team18', 0, 0, '2013-11-23 11:11:52', 11, 1, '10.16.20.109', 0, 1, 6, 251, '2013-11-23 11:11:53', 0.00, 0),
(422, 1011, 'team38', 0, 960, '2013-11-23 11:12:11', 4, 0, '10.16.20.118', 1, 1, 2, 93, '2013-11-23 11:12:14', 0.00, 1),
(423, 1016, 'team49', 0, 960, '2013-11-23 11:12:11', 6, 1, '10.16.20.32', 1, 1, 7, 86, '2013-11-23 11:12:13', 0.00, 0),
(424, 1003, 'team35', 0, 960, '2013-11-23 11:12:15', 6, 1, '10.16.8.43', 0, 1, 2, 81, '2013-11-23 11:12:18', 0.00, 0);
INSERT INTO `solution` (`solution_id`, `problem_id`, `user_id`, `time`, `memory`, `in_date`, `result`, `language`, `ip`, `contest_id`, `valid`, `num`, `code_length`, `judgetime`, `pass_rate`, `balloon`) VALUES
(425, 1013, 'team74', 0, 960, '2013-11-23 11:12:15', 6, 1, '10.16.20.21', 1, 1, 4, 91, '2013-11-23 11:12:18', 0.00, 0),
(426, 1009, 'team51', 0, 960, '2013-11-23 11:12:21', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 11:12:23', 0.00, 0),
(427, 1003, 'team58', 0, 960, '2013-11-23 11:13:00', 4, 1, '10.16.20.45', 0, 1, 2, 84, '2013-11-23 11:13:04', 0.00, 1),
(428, 1006, 'team17', 4, 1348, '2013-11-23 11:13:15', 10, 1, '10.16.20.111', 0, 1, 5, 448, '2013-11-23 11:13:19', 0.00, 0),
(429, 1011, 'team53', 0, 960, '2013-11-23 11:13:45', 6, 1, '10.16.20.38', 1, 1, 2, 92, '2013-11-23 11:13:48', 0.00, 0),
(430, 1003, 'team35', 0, 960, '2013-11-23 11:13:50', 6, 1, '10.16.8.43', 0, 1, 2, 81, '2013-11-23 11:13:53', 0.00, 0),
(431, 1003, 'team54', 0, 960, '2013-11-23 11:14:16', 4, 1, '10.16.20.39', 0, 1, 2, 100, '2013-11-23 11:14:19', 0.00, 1),
(432, 1011, 'team69', 0, 960, '2013-11-23 11:14:19', 6, 1, '10.16.20.16', 1, 1, 2, 92, '2013-11-23 11:14:23', 0.00, 0),
(433, 1015, 'team34', 0, 960, '2013-11-23 11:14:56', 6, 1, '10.16.20.124', 1, 1, 6, 92, '2013-11-23 11:14:59', 0.00, 0),
(434, 1002, 'team14', 0, 964, '2013-11-23 11:15:00', 6, 0, '10.16.20.117', 0, 1, 1, 738, '2013-11-23 11:15:04', 0.00, 0),
(435, 1013, 'team6', 0, 960, '2013-11-23 11:15:13', 6, 1, '10.16.20.89', 1, 1, 4, 100, '2013-11-23 11:15:14', 0.00, 0),
(436, 1011, 'team53', 0, 960, '2013-11-23 11:15:23', 6, 1, '10.16.20.38', 1, 1, 2, 91, '2013-11-23 11:15:24', 0.00, 0),
(437, 1008, 'team84', 7000, 964, '2013-11-23 11:16:03', 7, 1, '10.16.20.60', 0, 1, 7, 160, '2013-11-23 11:16:43', 0.00, 0),
(438, 1016, 'team34', 0, 960, '2013-11-23 11:16:09', 6, 1, '10.16.20.124', 1, 1, 7, 87, '2013-11-23 11:16:14', 0.00, 0),
(439, 1003, 'team36', 0, 0, '2013-11-23 11:16:14', 11, 1, '10.16.20.120', 0, 1, 2, 158, '2013-11-23 11:16:19', 0.00, 0),
(440, 1007, 'team16', 0, 0, '2013-11-23 11:16:22', 11, 0, '10.16.20.113', 0, 1, 6, 543, '2013-11-23 11:16:23', 0.00, 0),
(441, 1003, 'team36', 0, 960, '2013-11-23 11:17:00', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:17:04', 0.00, 0),
(442, 1008, 'team40', 6016, 964, '2013-11-23 11:17:09', 4, 1, '10.16.20.146', 0, 1, 7, 135, '2013-11-23 11:17:28', 0.00, 1),
(443, 1008, 'team58', 3352, 964, '2013-11-23 11:17:17', 6, 1, '10.16.20.45', 0, 1, 7, 152, '2013-11-23 11:17:26', 0.00, 0),
(444, 1007, 'team16', 0, 1832, '2013-11-23 11:17:20', 4, 0, '10.16.20.113', 0, 1, 6, 496, '2013-11-23 11:17:24', 0.00, 1),
(445, 1006, 'team52', 1504, 1484, '2013-11-23 11:17:29', 6, 1, '10.16.20.36', 0, 1, 5, 319, '2013-11-23 11:17:36', 0.00, 0),
(446, 1005, 'team83', 0, 964, '2013-11-23 11:17:29', 4, 1, '10.16.20.62', 0, 1, 4, 472, '2013-11-23 11:17:34', 0.00, 1),
(447, 1003, 'team36', 0, 960, '2013-11-23 11:17:43', 6, 0, '10.16.20.120', 0, 1, 2, 93, '2013-11-23 11:17:49', 0.00, 0),
(448, 1003, 'team15', 0, 960, '2013-11-23 11:18:03', 6, 1, '10.16.20.115', 0, 1, 2, 84, '2013-11-23 11:18:09', 0.00, 0),
(449, 1013, 'team66', 0, 960, '2013-11-23 11:18:22', 6, 1, '10.16.20.22', 1, 1, 4, 82, '2013-11-23 11:18:24', 0.00, 0),
(450, 1006, 'team71', 0, 0, '2013-11-23 11:18:28', 11, 1, '10.16.20.13', 0, 1, 5, 263, '2013-11-23 11:18:28', 0.00, 0),
(451, 1003, 'team36', 0, 960, '2013-11-23 11:18:29', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:18:34', 0.00, 0),
(452, 1014, 'team77', 0, 960, '2013-11-23 11:18:33', 6, 1, '10.16.20.27', 1, 1, 5, 83, '2013-11-23 11:18:34', 0.00, 0),
(453, 1003, 'team15', 0, 960, '2013-11-23 11:18:33', 6, 1, '10.16.20.115', 0, 1, 2, 85, '2013-11-23 11:18:34', 0.00, 0),
(454, 1016, 'team34', 0, 960, '2013-11-23 11:18:41', 6, 1, '10.16.20.124', 1, 1, 7, 87, '2013-11-23 11:18:44', 0.00, 0),
(455, 1008, 'team42', 5992, 964, '2013-11-23 11:18:45', 4, 1, '10.16.20.142', 0, 1, 7, 151, '2013-11-23 11:19:03', 0.00, 1),
(456, 1006, 'team71', 0, 0, '2013-11-23 11:18:53', 11, 1, '10.16.20.13', 0, 1, 5, 255, '2013-11-23 11:18:53', 0.00, 0),
(457, 1003, 'team15', 0, 960, '2013-11-23 11:18:55', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:18:59', 0.00, 0),
(458, 1007, 'team1', 0, 964, '2013-11-23 11:18:59', 4, 1, '10.16.20.98', 0, 1, 6, 644, '2013-11-23 11:19:04', 0.00, 1),
(459, 1013, 'team43', 0, 960, '2013-11-23 11:19:01', 6, 1, '10.16.20.140', 1, 1, 4, 101, '2013-11-23 11:19:04', 0.00, 0),
(460, 1003, 'team36', 0, 960, '2013-11-23 11:19:03', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:19:04', 0.00, 0),
(461, 1011, 'team76', 0, 960, '2013-11-23 11:19:18', 4, 0, '10.16.20.54', 1, 1, 2, 95, '2013-11-23 11:19:19', 0.00, 1),
(462, 1014, 'team67', 0, 0, '2013-11-23 11:19:27', 11, 1, '10.16.20.18', 1, 1, 5, 82, '2013-11-23 11:19:28', 0.00, 0),
(463, 1015, 'team48', 0, 960, '2013-11-23 11:19:32', 6, 1, '10.16.20.136', 1, 1, 6, 92, '2013-11-23 11:19:34', 0.00, 0),
(464, 1003, 'team36', 0, 960, '2013-11-23 11:19:38', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:19:39', 0.00, 0),
(465, 1013, 'team32', 0, 960, '2013-11-23 11:19:52', 6, 1, '10.16.20.128', 1, 1, 4, 111, '2013-11-23 11:19:54', 0.00, 0),
(466, 1008, 'team46', 0, 964, '2013-11-23 11:19:57', 6, 0, '10.16.20.101', 0, 1, 7, 391, '2013-11-23 11:19:59', 0.00, 0),
(467, 1014, 'team67', 0, 960, '2013-11-23 11:20:04', 4, 1, '10.16.20.18', 1, 1, 5, 87, '2013-11-23 11:20:09', 0.00, 1),
(468, 1011, 'team74', 0, 960, '2013-11-23 11:20:06', 6, 1, '10.16.20.21', 1, 1, 2, 97, '2013-11-23 11:20:09', 0.00, 0),
(469, 1003, 'team36', 0, 960, '2013-11-23 11:20:13', 6, 0, '10.16.20.120', 0, 1, 2, 97, '2013-11-23 11:20:14', 0.00, 0),
(470, 1003, 'team15', 0, 960, '2013-11-23 11:20:16', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:20:19', 0.00, 0),
(471, 1006, 'team52', 1548, 1484, '2013-11-23 11:20:31', 6, 1, '10.16.20.36', 0, 1, 5, 319, '2013-11-23 11:20:36', 0.00, 0),
(472, 1008, 'team23', 0, 964, '2013-11-23 11:20:45', 6, 1, '10.16.20.102', 0, 1, 7, 203, '2013-11-23 11:20:49', 0.00, 0),
(473, 1003, 'team15', 0, 960, '2013-11-23 11:20:46', 6, 1, '10.16.20.115', 0, 1, 2, 88, '2013-11-23 11:20:49', 0.00, 0),
(474, 1008, 'team58', 5968, 964, '2013-11-23 11:20:53', 4, 1, '10.16.20.45', 0, 1, 7, 151, '2013-11-23 11:21:07', 0.00, 1),
(475, 1003, 'team36', 0, 960, '2013-11-23 11:21:02', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:21:04', 0.00, 0),
(476, 1008, 'team23', 0, 964, '2013-11-23 11:21:03', 6, 0, '10.16.20.102', 0, 1, 7, 203, '2013-11-23 11:21:04', 0.00, 0),
(477, 1013, 'team73', 0, 960, '2013-11-23 11:21:06', 4, 1, '10.16.20.235', 1, 1, 4, 85, '2013-11-23 11:21:09', 0.00, 1),
(478, 1012, 'team66', 0, 960, '2013-11-23 11:21:09', 6, 1, '10.16.20.22', 1, 1, 3, 112, '2013-11-23 11:21:14', 0.00, 0),
(479, 1009, 'team12', 0, 960, '2013-11-23 11:21:12', 6, 1, '10.16.20.83', 1, 1, 0, 88, '2013-11-23 11:21:14', 0.00, 0),
(480, 1016, 'team67', 0, 960, '2013-11-23 11:21:23', 4, 1, '10.16.20.18', 1, 1, 7, 87, '2013-11-23 11:21:24', 0.00, 1),
(481, 1002, 'team83', 0, 964, '2013-11-23 11:21:29', 4, 1, '10.16.20.62', 0, 1, 1, 723, '2013-11-23 11:21:34', 0.00, 1),
(482, 1003, 'team36', 0, 960, '2013-11-23 11:21:32', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:21:34', 0.00, 0),
(483, 1014, 'team78', 0, 960, '2013-11-23 11:21:32', 6, 1, '10.16.20.53', 1, 1, 5, 88, '2013-11-23 11:21:34', 0.00, 0),
(484, 1003, 'team15', 0, 960, '2013-11-23 11:21:33', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:21:34', 0.00, 0),
(485, 1006, 'team57', 588, 964, '2013-11-23 11:21:36', 6, 1, '10.16.20.43', 0, 1, 5, 280, '2013-11-23 11:21:40', 0.00, 0),
(486, 1003, 'team15', 0, 960, '2013-11-23 11:21:54', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:21:59', 0.00, 0),
(487, 1014, 'team43', 0, 960, '2013-11-23 11:22:07', 6, 1, '10.16.20.140', 1, 1, 5, 88, '2013-11-23 11:22:09', 0.00, 0),
(488, 1003, 'team36', 0, 960, '2013-11-23 11:22:07', 6, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:22:09', 0.00, 0),
(489, 1008, 'team55', 0, 964, '2013-11-23 11:22:08', 6, 1, '10.16.20.40', 0, 1, 7, 193, '2013-11-23 11:22:09', 0.00, 0),
(490, 1006, 'team71', 0, 0, '2013-11-23 11:22:08', 11, 0, '10.16.20.13', 0, 1, 5, 272, '2013-11-23 11:22:09', 0.00, 0),
(491, 1009, 'team67', 0, 960, '2013-11-23 11:22:27', 6, 1, '10.16.20.18', 1, 1, 0, 88, '2013-11-23 11:22:29', 0.00, 0),
(492, 1016, 'team69', 0, 960, '2013-11-23 11:22:28', 6, 1, '10.16.20.16', 1, 1, 7, 86, '2013-11-23 11:22:29', 0.00, 0),
(493, 1003, 'team15', 0, 960, '2013-11-23 11:22:31', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:22:34', 0.00, 0),
(494, 1003, 'team36', 0, 960, '2013-11-23 11:22:40', 6, 0, '10.16.20.120', 0, 1, 2, 95, '2013-11-23 11:22:44', 0.00, 0),
(495, 1008, 'team46', 0, 964, '2013-11-23 11:22:54', 6, 0, '10.16.20.101', 0, 1, 7, 157, '2013-11-23 11:22:59', 0.00, 0),
(496, 1006, 'team71', 0, 0, '2013-11-23 11:23:02', 11, 0, '10.16.20.13', 0, 1, 5, 263, '2013-11-23 11:23:04', 0.00, 0),
(497, 1003, 'team36', 0, 960, '2013-11-23 11:23:09', 4, 0, '10.16.20.120', 0, 1, 2, 96, '2013-11-23 11:23:14', 0.00, 1),
(498, 1003, 'team15', 0, 960, '2013-11-23 11:23:38', 6, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:23:39', 0.00, 0),
(499, 1013, 'team53', 0, 960, '2013-11-23 11:23:54', 4, 1, '10.16.20.38', 1, 1, 4, 85, '2013-11-23 11:23:59', 0.00, 1),
(500, 1013, 'team48', 0, 960, '2013-11-23 11:24:06', 6, 1, '10.16.20.136', 1, 1, 4, 111, '2013-11-23 11:24:09', 0.00, 0),
(501, 1003, 'team15', 0, 960, '2013-11-23 11:24:19', 4, 1, '10.16.20.115', 0, 1, 2, 87, '2013-11-23 11:24:24', 0.00, 1),
(502, 1003, 'team83', 0, 960, '2013-11-23 11:24:23', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:24:24', 0.00, 0),
(503, 1003, 'team83', 0, 960, '2013-11-23 11:24:52', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:24:54', 0.00, 0),
(504, 1003, 'team52', 0, 1480, '2013-11-23 11:25:01', 4, 1, '10.16.20.36', 0, 1, 2, 107, '2013-11-23 11:25:04', 0.00, 1),
(505, 1001, 'team59', 0, 0, '2013-11-23 11:25:08', 11, 1, '10.16.20.46', 0, 1, 0, 303, '2013-11-23 11:25:09', 0.00, 0),
(506, 1013, 'team6', 0, 960, '2013-11-23 11:25:13', 6, 1, '10.16.20.89', 1, 1, 4, 100, '2013-11-23 11:25:14', 0.00, 0),
(507, 1003, 'team83', 0, 960, '2013-11-23 11:25:13', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:25:14', 0.00, 0),
(508, 1013, 'team43', 0, 960, '2013-11-23 11:25:20', 6, 1, '10.16.20.140', 1, 1, 4, 100, '2013-11-23 11:25:24', 0.00, 0),
(509, 1003, 'team44', 0, 1480, '2013-11-23 11:25:27', 4, 1, '10.16.20.138', 0, 1, 2, 106, '2013-11-23 11:25:29', 0.00, 1),
(510, 1003, 'team83', 0, 960, '2013-11-23 11:25:31', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:25:34', 0.00, 0),
(511, 1003, 'team83', 0, 960, '2013-11-23 11:25:49', 6, 1, '10.16.20.62', 0, 1, 2, 80, '2013-11-23 11:25:54', 0.00, 0),
(512, 1003, 'team83', 0, 960, '2013-11-23 11:26:03', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:26:04', 0.00, 0),
(513, 1003, 'team83', 0, 960, '2013-11-23 11:26:14', 6, 1, '10.16.20.62', 0, 1, 2, 79, '2013-11-23 11:26:19', 0.00, 0),
(514, 1008, 'team30', 0, 1484, '2013-11-23 11:26:21', 6, 1, '10.16.20.131', 0, 1, 7, 145, '2013-11-23 11:26:24', 0.00, 0),
(515, 1003, 'team83', 0, 960, '2013-11-23 11:26:37', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:26:39', 0.00, 0),
(516, 1004, 'team35', 0, 964, '2013-11-23 11:26:49', 6, 1, '110.96.32.164', 0, 1, 3, 2421, '2013-11-23 11:26:54', 0.00, 0),
(517, 1009, 'team70', 0, 960, '2013-11-23 11:26:50', 6, 1, '10.16.20.72', 1, 1, 0, 91, '2013-11-23 11:26:54', 0.00, 0),
(518, 1003, 'team83', 0, 960, '2013-11-23 11:26:53', 6, 1, '10.16.20.62', 0, 1, 2, 78, '2013-11-23 11:26:54', 0.00, 0),
(519, 1003, 'team83', 0, 960, '2013-11-23 11:27:03', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:27:04', 0.00, 0),
(520, 1007, 'team79', 0, 1484, '2013-11-23 11:27:03', 4, 1, '10.16.20.55', 0, 1, 6, 503, '2013-11-23 11:27:04', 0.00, 1),
(521, 1006, 'team71', 0, 960, '2013-11-23 11:27:05', 10, 0, '10.16.20.13', 0, 1, 5, 262, '2013-11-23 11:27:09', 0.00, 0),
(522, 1001, 'team92', 316, 980, '2013-11-23 11:27:06', 6, 1, '10.16.20.11', 0, 1, 0, 531, '2013-11-23 11:27:09', 0.00, 0),
(523, 1003, 'team83', 0, 960, '2013-11-23 11:27:16', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:27:19', 0.00, 0),
(524, 1003, 'team31', 0, 964, '2013-11-23 11:27:20', 6, 0, '10.16.20.129', 0, 1, 2, 109, '2013-11-23 11:27:24', 0.00, 0),
(525, 1003, 'team83', 0, 960, '2013-11-23 11:27:28', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:27:29', 0.00, 0),
(526, 1011, 'team64', 0, 960, '2013-11-23 11:27:28', 6, 1, '10.16.20.17', 1, 1, 2, 96, '2013-11-23 11:27:29', 0.00, 0),
(527, 1003, 'team83', 0, 960, '2013-11-23 11:27:39', 6, 1, '10.16.20.62', 0, 1, 2, 82, '2013-11-23 11:27:44', 0.00, 0),
(528, 1003, 'team83', 0, 960, '2013-11-23 11:27:51', 6, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:27:54', 0.00, 0),
(529, 1001, 'team1', 24, 976, '2013-11-23 11:27:53', 6, 1, '10.16.20.98', 0, 1, 0, 193, '2013-11-23 11:27:54', 0.00, 0),
(530, 1003, 'team83', 0, 960, '2013-11-23 11:28:03', 4, 1, '10.16.20.62', 0, 1, 2, 81, '2013-11-23 11:28:04', 0.00, 1),
(531, 1009, 'team67', 0, 960, '2013-11-23 11:28:20', 4, 1, '10.16.20.18', 1, 1, 0, 88, '2013-11-23 11:28:24', 0.00, 1),
(532, 1008, 'team46', 7000, 1484, '2013-11-23 11:28:27', 7, 1, '10.16.20.101', 0, 1, 7, 132, '2013-11-23 11:29:39', 0.00, 0),
(533, 1008, 'team11', 0, 1484, '2013-11-23 11:28:30', 6, 1, '10.16.20.84', 0, 1, 7, 130, '2013-11-23 11:28:35', 0.00, 0),
(534, 1012, 'team56', 0, 960, '2013-11-23 11:28:31', 6, 1, '10.16.20.41', 1, 1, 3, 109, '2013-11-23 11:28:34', 0.00, 0),
(535, 1012, 'team70', 0, 960, '2013-11-23 11:28:45', 6, 1, '10.16.20.72', 1, 1, 3, 109, '2013-11-23 11:28:49', 0.00, 0),
(536, 1001, 'team16', 0, 0, '2013-11-23 11:29:02', 11, 0, '10.16.20.113', 0, 1, 0, 588, '2013-11-23 11:29:04', 0.00, 0),
(537, 1012, 'team34', 0, 960, '2013-11-23 11:29:02', 6, 1, '10.16.20.124', 1, 1, 3, 109, '2013-11-23 11:29:04', 0.00, 0),
(538, 1015, 'team73', 0, 960, '2013-11-23 11:29:12', 6, 1, '10.16.20.235', 1, 1, 6, 87, '2013-11-23 11:29:14', 0.00, 0),
(539, 1010, 'team64', 0, 960, '2013-11-23 11:29:15', 6, 1, '10.16.20.17', 1, 1, 1, 109, '2013-11-23 11:29:19', 0.00, 0),
(540, 1005, 'team58', 0, 964, '2013-11-23 11:29:21', 4, 1, '10.16.20.45', 0, 1, 4, 509, '2013-11-23 11:29:24', 0.00, 1),
(541, 1003, 'team14', 0, 960, '2013-11-23 11:29:29', 6, 0, '10.16.20.117', 0, 1, 2, 72, '2013-11-23 11:29:34', 0.00, 0),
(542, 1016, 'team53', 0, 960, '2013-11-23 11:29:29', 6, 1, '10.16.20.38', 1, 1, 7, 86, '2013-11-23 11:29:34', 0.00, 0),
(543, 1011, 'team67', 0, 960, '2013-11-23 11:29:35', 4, 1, '10.16.20.18', 1, 1, 2, 93, '2013-11-23 11:29:39', 0.00, 1),
(544, 1009, 'team77', 0, 960, '2013-11-23 11:29:38', 6, 1, '10.16.20.27', 1, 1, 0, 88, '2013-11-23 11:29:39', 0.00, 0),
(545, 1013, 'team19', 0, 960, '2013-11-23 11:29:45', 6, 1, '10.16.20.107', 1, 1, 4, 98, '2013-11-23 11:29:49', 0.00, 0),
(546, 1003, 'team35', 0, 960, '2013-11-23 11:29:52', 6, 1, '10.16.8.43', 0, 1, 2, 82, '2013-11-23 11:29:54', 0.00, 0),
(547, 1003, 'team14', 0, 960, '2013-11-23 11:29:57', 4, 0, '10.16.20.117', 0, 1, 2, 72, '2013-11-23 11:29:59', 0.00, 1),
(548, 1008, 'team11', 0, 1484, '2013-11-23 11:30:07', 6, 1, '10.16.20.84', 0, 1, 7, 238, '2013-11-23 11:30:09', 0.00, 0),
(549, 1008, 'team82', 0, 964, '2013-11-23 11:30:13', 6, 1, '10.16.20.58', 0, 1, 7, 218, '2013-11-23 11:30:14', 0.00, 0),
(550, 1014, 'team43', 0, 960, '2013-11-23 11:30:19', 4, 1, '10.16.20.140', 1, 1, 5, 87, '2013-11-23 11:30:24', 0.00, 1),
(551, 1001, 'team59', 0, 0, '2013-11-23 11:30:27', 11, 0, '10.16.20.46', 0, 1, 0, 303, '2013-11-23 11:30:29', 0.00, 0),
(552, 1004, 'team33', 4, 1500, '2013-11-23 11:30:37', 6, 1, '10.16.20.126', 0, 1, 3, 2491, '2013-11-23 11:30:40', 0.00, 0),
(553, 1016, 'team64', 0, 960, '2013-11-23 11:30:45', 6, 1, '10.16.20.17', 1, 1, 7, 87, '2013-11-23 11:30:49', 0.00, 0),
(554, 1012, 'team56', 0, 960, '2013-11-23 11:31:13', 6, 1, '10.16.20.41', 1, 1, 3, 110, '2013-11-23 11:31:14', 0.00, 0),
(555, 1001, 'team16', 76, 976, '2013-11-23 11:31:16', 6, 1, '10.16.20.113', 0, 1, 0, 590, '2013-11-23 11:31:19', 0.00, 0),
(556, 1001, 'team3', 4, 1484, '2013-11-23 11:31:28', 10, 1, '10.16.20.96', 0, 1, 0, 477, '2013-11-23 11:31:29', 0.00, 0),
(557, 1010, 'team67', 0, 960, '2013-11-23 11:31:30', 6, 1, '10.16.20.18', 1, 1, 1, 93, '2013-11-23 11:31:34', 0.00, 0),
(558, 1001, 'team17', 3224, 964, '2013-11-23 11:31:31', 6, 1, '10.16.20.111', 0, 1, 0, 677, '2013-11-23 11:31:37', 0.00, 0),
(559, 1015, 'team48', 0, 960, '2013-11-23 11:31:32', 6, 1, '10.16.20.136', 1, 1, 6, 91, '2013-11-23 11:31:34', 0.00, 0),
(560, 1008, 'team11', 0, 1484, '2013-11-23 11:31:40', 6, 1, '10.16.20.84', 0, 1, 7, 162, '2013-11-23 11:31:45', 0.00, 0),
(561, 1006, 'team42', 592, 964, '2013-11-23 11:32:12', 4, 1, '10.16.20.142', 0, 1, 5, 257, '2013-11-23 11:32:15', 0.00, 1),
(562, 1006, 'team92', 0, 960, '2013-11-23 11:32:30', 10, 1, '10.16.20.11', 0, 1, 5, 457, '2013-11-23 11:32:34', 0.00, 0),
(563, 1009, 'team24', 0, 0, '2013-11-23 11:32:36', 11, 1, '10.16.20.100', 1, 1, 0, 18, '2013-11-23 11:32:39', 0.00, 0),
(564, 1012, 'team76', 0, 960, '2013-11-23 11:32:38', 6, 0, '10.16.20.54', 1, 1, 3, 113, '2013-11-23 11:32:39', 0.00, 0),
(565, 1005, 'team54', 0, 0, '2013-11-23 11:32:40', 11, 1, '10.16.20.39', 0, 1, 4, 511, '2013-11-23 11:32:44', 0.00, 0),
(566, 1001, 'team17', 3460, 964, '2013-11-23 11:32:47', 4, 1, '10.16.20.111', 0, 1, 0, 680, '2013-11-23 11:32:52', 0.00, 1),
(567, 1012, 'team6', 0, 960, '2013-11-23 11:33:26', 6, 1, '10.16.20.89', 1, 1, 3, 110, '2013-11-23 11:33:29', 0.00, 0),
(568, 1008, 'team85', 6472, 964, '2013-11-23 11:33:27', 4, 1, '10.16.20.63', 0, 1, 7, 134, '2013-11-23 11:33:43', 0.00, 1),
(569, 1012, 'team67', 0, 960, '2013-11-23 11:33:39', 6, 1, '10.16.20.18', 1, 1, 3, 112, '2013-11-23 11:33:39', 0.00, 0),
(570, 1003, 'team7', 0, 1480, '2013-11-23 11:33:41', 6, 1, '10.16.20.87', 0, 1, 2, 97, '2013-11-23 11:33:44', 0.00, 0),
(571, 1012, 'team74', 0, 0, '2013-11-23 11:33:49', 11, 1, '10.16.20.21', 1, 1, 3, 115, '2013-11-23 11:33:49', 0.00, 0),
(572, 1003, 'team7', 0, 1480, '2013-11-23 11:34:07', 6, 1, '10.16.20.87', 0, 1, 2, 99, '2013-11-23 11:34:09', 0.00, 0),
(573, 1013, 'team66', 0, 960, '2013-11-23 11:34:44', 6, 1, '10.16.20.22', 1, 1, 4, 85, '2013-11-23 11:34:49', 0.00, 0),
(574, 1003, 'team7', 0, 1480, '2013-11-23 11:34:50', 6, 1, '10.16.20.87', 0, 1, 2, 100, '2013-11-23 11:34:54', 0.00, 0),
(575, 1008, 'team82', 0, 964, '2013-11-23 11:34:59', 6, 1, '10.16.20.58', 0, 1, 7, 227, '2013-11-23 11:34:59', 0.00, 0),
(576, 1001, 'team3', 10000, 1484, '2013-11-23 11:35:11', 7, 1, '10.16.20.96', 0, 1, 0, 491, '2013-11-23 11:35:27', 0.00, 0),
(577, 1002, 'team89', 0, 964, '2013-11-23 11:35:11', 4, 1, '10.16.20.1', 0, 1, 1, 1431, '2013-11-23 11:35:14', 0.00, 1),
(578, 1011, 'team32', 0, 960, '2013-11-23 11:35:15', 6, 1, '10.16.20.128', 1, 1, 2, 88, '2013-11-23 11:35:19', 0.00, 0),
(579, 1003, 'team7', 0, 1480, '2013-11-23 11:35:19', 6, 1, '10.16.20.87', 0, 1, 2, 99, '2013-11-23 11:35:24', 0.00, 0),
(580, 1003, 'team42', 0, 960, '2013-11-23 11:35:26', 6, 1, '10.16.20.142', 0, 1, 2, 85, '2013-11-23 11:35:29', 0.00, 0),
(581, 1012, 'team74', 0, 0, '2013-11-23 11:35:31', 11, 1, '10.16.20.21', 1, 1, 3, 115, '2013-11-23 11:35:34', 0.00, 0),
(582, 1006, 'team52', 1756, 1484, '2013-11-23 11:35:32', 6, 1, '10.16.20.36', 0, 1, 5, 304, '2013-11-23 11:35:37', 0.00, 0),
(583, 1012, 'team6', 0, 960, '2013-11-23 11:35:35', 6, 1, '10.16.20.89', 1, 1, 3, 111, '2013-11-23 11:35:39', 0.00, 0),
(584, 1003, 'team47', 0, 960, '2013-11-23 11:35:46', 6, 0, '10.16.20.137', 0, 1, 2, 174, '2013-11-23 11:35:49', 0.00, 0),
(585, 1003, 'team7', 0, 1480, '2013-11-23 11:35:46', 4, 1, '10.16.20.87', 0, 1, 2, 99, '2013-11-23 11:35:50', 0.00, 1),
(586, 1016, 'team64', 0, 960, '2013-11-23 11:35:48', 6, 1, '10.16.20.17', 1, 1, 7, 87, '2013-11-23 11:35:49', 0.00, 0),
(587, 1006, 'team90', 2000, 0, '2013-11-23 11:35:55', 8, 1, '10.16.20.8', 0, 1, 5, 743, '2013-11-23 11:36:03', 0.00, 0),
(588, 1002, 'team14', 0, 964, '2013-11-23 11:35:58', 6, 0, '10.16.20.117', 0, 1, 1, 924, '2013-11-23 11:35:59', 0.00, 0),
(589, 1005, 'team79', 0, 1484, '2013-11-23 11:36:32', 4, 1, '10.16.20.55', 0, 1, 4, 507, '2013-11-23 11:36:35', 0.00, 1),
(590, 1013, 'team48', 0, 960, '2013-11-23 11:36:43', 6, 1, '10.16.20.136', 1, 1, 4, 111, '2013-11-23 11:36:44', 0.00, 0),
(591, 1013, 'team49', 0, 960, '2013-11-23 11:36:58', 4, 1, '10.16.20.32', 1, 1, 4, 89, '2013-11-23 11:36:59', 0.00, 1),
(592, 1006, 'team92', 2000, 7912, '2013-11-23 11:37:05', 7, 1, '10.16.20.11', 0, 1, 5, 528, '2013-11-23 11:37:13', 0.00, 0),
(593, 1006, 'team90', 1140, 46968, '2013-11-23 11:37:07', 4, 1, '10.16.20.8', 0, 1, 5, 742, '2013-11-23 11:37:11', 0.00, 1),
(594, 1003, 'team16', 0, 1480, '2013-11-23 11:37:10', 6, 1, '10.16.20.113', 0, 1, 2, 96, '2013-11-23 11:37:15', 0.00, 0),
(595, 1003, 'team4', 0, 960, '2013-11-23 11:37:11', 6, 1, '10.16.20.94', 0, 1, 2, 153, '2013-11-23 11:37:14', 0.00, 0),
(596, 1006, 'team54', 600, 964, '2013-11-23 11:37:28', 4, 1, '10.16.20.39', 0, 1, 5, 263, '2013-11-23 11:37:30', 0.00, 1),
(597, 1014, 'team38', 0, 960, '2013-11-23 11:37:40', 6, 0, '10.16.20.118', 1, 1, 5, 88, '2013-11-23 11:37:44', 0.00, 0),
(598, 1003, 'team4', 0, 960, '2013-11-23 11:37:50', 6, 1, '10.16.20.94', 0, 1, 2, 153, '2013-11-23 11:37:54', 0.00, 0),
(599, 1001, 'team3', 6788, 1484, '2013-11-23 11:37:51', 4, 1, '10.16.20.96', 0, 1, 0, 498, '2013-11-23 11:38:04', 0.00, 1),
(600, 1005, 'team44', 4, 1484, '2013-11-23 11:37:53', 4, 1, '10.16.20.138', 0, 1, 4, 528, '2013-11-23 11:37:55', 0.00, 1),
(601, 1014, 'team53', 0, 960, '2013-11-23 11:37:56', 6, 1, '10.16.20.38', 1, 1, 5, 85, '2013-11-23 11:37:59', 0.00, 0),
(602, 1003, 'team35', 0, 960, '2013-11-23 11:38:11', 6, 1, '10.16.8.43', 0, 1, 2, 79, '2013-11-23 11:38:14', 0.00, 0),
(603, 1003, 'team42', 0, 960, '2013-11-23 11:38:27', 4, 1, '10.16.20.142', 0, 1, 2, 83, '2013-11-23 11:38:29', 0.00, 1),
(604, 1008, 'team89', 6020, 964, '2013-11-23 11:38:31', 4, 1, '10.16.20.1', 0, 1, 7, 340, '2013-11-23 11:38:48', 0.00, 1),
(605, 1003, 'team4', 0, 960, '2013-11-23 11:38:32', 4, 1, '10.16.20.94', 0, 1, 2, 153, '2013-11-23 11:38:34', 0.00, 1),
(606, 1013, 'team32', 0, 960, '2013-11-23 11:38:51', 6, 1, '10.16.20.128', 1, 1, 4, 84, '2013-11-23 11:38:54', 0.00, 0),
(607, 1006, 'team2', 588, 964, '2013-11-23 11:38:59', 4, 1, '10.16.20.97', 0, 1, 5, 254, '2013-11-23 11:39:00', 0.00, 1),
(608, 1003, 'team39', 0, 960, '2013-11-23 11:38:59', 6, 1, '10.16.20.147', 0, 1, 2, 88, '2013-11-23 11:38:59', 0.00, 0),
(609, 1013, 'team43', 0, 960, '2013-11-23 11:39:10', 6, 1, '10.16.20.140', 1, 1, 4, 111, '2013-11-23 11:39:14', 0.00, 0),
(610, 1001, 'team44', 0, 1484, '2013-11-23 11:39:12', 10, 1, '10.16.20.138', 0, 1, 0, 487, '2013-11-23 11:39:15', 0.00, 0),
(611, 1007, 'team91', 0, 1820, '2013-11-23 11:39:30', 4, 1, '10.16.20.10', 0, 1, 6, 398, '2013-11-23 11:39:34', 0.00, 1),
(612, 1006, 'team52', 1852, 1484, '2013-11-23 11:39:34', 6, 1, '10.16.20.36', 0, 1, 5, 305, '2013-11-23 11:39:42', 0.00, 0),
(613, 1001, 'team92', 320, 980, '2013-11-23 11:39:50', 6, 1, '10.16.20.11', 0, 1, 0, 534, '2013-11-23 11:39:54', 0.00, 0),
(614, 1003, 'team89', 0, 960, '2013-11-23 11:39:54', 6, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:39:59', 0.00, 0),
(615, 1010, 'team76', 0, 960, '2013-11-23 11:39:58', 6, 0, '10.16.20.54', 1, 1, 1, 106, '2013-11-23 11:39:59', 0.00, 0),
(616, 1003, 'team16', 0, 960, '2013-11-23 11:40:01', 6, 1, '10.16.20.113', 0, 1, 2, 82, '2013-11-23 11:40:04', 0.00, 0),
(617, 1001, 'team4', 36, 976, '2013-11-23 11:40:16', 6, 1, '10.16.20.94', 0, 1, 0, 439, '2013-11-23 11:40:19', 0.00, 0),
(618, 1003, 'team39', 0, 960, '2013-11-23 11:40:31', 6, 1, '10.16.20.147', 0, 1, 2, 88, '2013-11-23 11:40:34', 0.00, 0),
(619, 1003, 'team16', 0, 960, '2013-11-23 11:40:37', 4, 1, '10.16.20.113', 0, 1, 2, 82, '2013-11-23 11:40:39', 0.00, 1),
(620, 1009, 'team78', 0, 960, '2013-11-23 11:40:40', 4, 1, '10.16.20.53', 1, 1, 0, 88, '2013-11-23 11:40:44', 0.00, 1),
(621, 1013, 'team66', 0, 960, '2013-11-23 11:40:40', 6, 1, '10.16.20.22', 1, 1, 4, 85, '2013-11-23 11:40:44', 0.00, 0),
(622, 1003, 'team89', 0, 960, '2013-11-23 11:40:52', 6, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:40:54', 0.00, 0),
(623, 1003, 'team35', 0, 960, '2013-11-23 11:40:55', 6, 1, '10.16.8.43', 0, 1, 2, 83, '2013-11-23 11:40:59', 0.00, 0),
(624, 1013, 'team6', 0, 960, '2013-11-23 11:41:03', 6, 1, '10.16.20.89', 1, 1, 4, 100, '2013-11-23 11:41:04', 0.00, 0),
(625, 1003, 'team89', 0, 960, '2013-11-23 11:41:27', 6, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:41:29', 0.00, 0),
(626, 1003, 'team35', 0, 960, '2013-11-23 11:41:34', 6, 1, '10.16.8.43', 0, 1, 2, 84, '2013-11-23 11:41:39', 0.00, 0),
(627, 1003, 'team39', 0, 960, '2013-11-23 11:41:39', 4, 1, '10.16.20.147', 0, 1, 2, 81, '2013-11-23 11:41:44', 0.00, 1),
(628, 1003, 'team89', 0, 960, '2013-11-23 11:41:55', 6, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:41:59', 0.00, 0),
(629, 1003, 'team35', 0, 960, '2013-11-23 11:42:14', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:42:14', 0.00, 0),
(630, 1003, 'team89', 0, 960, '2013-11-23 11:42:16', 6, 1, '10.16.20.1', 0, 1, 2, 280, '2013-11-23 11:42:19', 0.00, 0),
(631, 1012, 'team73', 0, 960, '2013-11-23 11:42:20', 6, 1, '10.16.20.235', 1, 1, 3, 103, '2013-11-23 11:42:24', 0.00, 0),
(632, 1003, 'team89', 0, 960, '2013-11-23 11:42:45', 6, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:42:49', 0.00, 0),
(633, 1010, 'team67', 0, 960, '2013-11-23 11:42:56', 6, 1, '10.16.20.18', 1, 1, 1, 97, '2013-11-23 11:42:59', 0.00, 0),
(634, 1011, 'team63', 0, 960, '2013-11-23 11:42:57', 6, 1, '10.16.20.50', 1, 1, 2, 97, '2013-11-23 11:42:59', 0.00, 0),
(635, 1012, 'team19', 0, 960, '2013-11-23 11:42:58', 4, 1, '10.16.20.107', 1, 1, 3, 115, '2013-11-23 11:42:59', 0.00, 1),
(636, 1003, 'team89', 0, 960, '2013-11-23 11:43:09', 4, 1, '10.16.20.1', 0, 1, 2, 281, '2013-11-23 11:43:14', 0.00, 1),
(637, 1003, 'team35', 0, 960, '2013-11-23 11:43:10', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:43:14', 0.00, 0),
(638, 1001, 'team44', 0, 1484, '2013-11-23 11:43:24', 10, 1, '10.16.20.138', 0, 1, 0, 499, '2013-11-23 11:43:30', 0.00, 0),
(639, 1012, 'team73', 0, 960, '2013-11-23 11:43:27', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 11:43:29', 0.00, 0),
(640, 1011, 'team74', 0, 960, '2013-11-23 11:43:31', 6, 1, '10.16.20.21', 1, 1, 2, 93, '2013-11-23 11:43:34', 0.00, 0),
(641, 1005, 'team54', 0, 0, '2013-11-23 11:43:47', 11, 1, '10.16.20.39', 0, 1, 4, 556, '2013-11-23 11:43:49', 0.00, 0),
(642, 1012, 'team73', 0, 960, '2013-11-23 11:44:00', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 11:44:04', 0.00, 0),
(643, 1012, 'team53', 0, 960, '2013-11-23 11:44:09', 6, 1, '10.16.20.38', 1, 1, 3, 111, '2013-11-23 11:44:09', 0.00, 0),
(644, 1003, 'team35', 0, 960, '2013-11-23 11:44:11', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:44:14', 0.00, 0),
(645, 1001, 'team92', 12, 980, '2013-11-23 11:44:26', 6, 1, '10.16.20.11', 0, 1, 0, 528, '2013-11-23 11:44:29', 0.00, 0),
(646, 1003, 'team35', 0, 960, '2013-11-23 11:44:50', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:44:54', 0.00, 0),
(647, 1006, 'team14', 0, 960, '2013-11-23 11:45:21', 10, 0, '10.16.20.117', 0, 1, 5, 284, '2013-11-23 11:45:24', 0.00, 0),
(648, 1016, 'team49', 0, 960, '2013-11-23 11:45:21', 4, 1, '10.16.20.32', 1, 1, 7, 86, '2013-11-23 11:45:24', 0.00, 1),
(649, 1006, 'team17', 2000, 0, '2013-11-23 11:45:28', 8, 1, '10.16.20.111', 0, 1, 5, 454, '2013-11-23 11:45:33', 0.00, 0),
(650, 1010, 'team48', 0, 960, '2013-11-23 11:45:48', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 11:45:49', 0.00, 0),
(651, 1003, 'team35', 0, 960, '2013-11-23 11:46:12', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:46:14', 0.00, 0),
(652, 1001, 'team44', 576, 1484, '2013-11-23 11:46:13', 6, 1, '10.16.20.138', 0, 1, 0, 499, '2013-11-23 11:46:17', 0.00, 0),
(653, 1001, 'team11', 0, 976, '2013-11-23 11:46:27', 6, 0, '10.16.20.84', 0, 1, 0, 310, '2013-11-23 11:46:29', 0.00, 0),
(654, 1006, 'team35', 568, 964, '2013-11-23 11:46:28', 4, 1, '10.16.8.43', 0, 1, 5, 286, '2013-11-23 11:46:30', 0.00, 1),
(655, 1010, 'team67', 0, 960, '2013-11-23 11:46:41', 6, 1, '10.16.20.18', 1, 1, 1, 98, '2013-11-23 11:46:44', 0.00, 0),
(656, 1006, 'team14', 0, 960, '2013-11-23 11:46:54', 10, 1, '10.16.20.117', 0, 1, 5, 309, '2013-11-23 11:46:59', 0.00, 0),
(657, 1016, 'team64', 0, 960, '2013-11-23 11:46:57', 6, 1, '10.16.20.17', 1, 1, 7, 87, '2013-11-23 11:46:59', 0.00, 0),
(658, 1001, 'team11', 0, 976, '2013-11-23 11:47:01', 6, 0, '10.16.20.84', 0, 1, 0, 311, '2013-11-23 11:47:04', 0.00, 0),
(659, 1003, 'team35', 0, 960, '2013-11-23 11:47:13', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:47:14', 0.00, 0),
(660, 1005, 'team54', 0, 0, '2013-11-23 11:47:14', 11, 1, '10.16.20.39', 0, 1, 4, 517, '2013-11-23 11:47:19', 0.00, 0),
(661, 1008, 'team82', 0, 964, '2013-11-23 11:47:15', 6, 1, '10.16.20.58', 0, 1, 7, 369, '2013-11-23 11:47:19', 0.00, 0),
(662, 1006, 'team14', 0, 960, '2013-11-23 11:47:31', 10, 0, '10.16.20.117', 0, 1, 5, 310, '2013-11-23 11:47:34', 0.00, 0),
(663, 1009, 'team76', 0, 960, '2013-11-23 11:47:37', 6, 0, '10.16.20.54', 1, 1, 0, 90, '2013-11-23 11:47:39', 0.00, 0),
(664, 1016, 'team34', 0, 960, '2013-11-23 11:47:57', 6, 1, '10.16.20.124', 1, 1, 7, 87, '2013-11-23 11:47:59', 0.00, 0),
(665, 1003, 'team71', 0, 960, '2013-11-23 11:48:18', 6, 0, '10.16.20.13', 0, 1, 2, 101, '2013-11-23 11:48:19', 0.00, 0),
(666, 1003, 'team35', 0, 960, '2013-11-23 11:48:19', 6, 1, '10.16.8.43', 0, 1, 2, 86, '2013-11-23 11:48:19', 0.00, 0),
(667, 1012, 'team73', 0, 960, '2013-11-23 11:48:33', 6, 1, '10.16.20.235', 1, 1, 3, 116, '2013-11-23 11:48:34', 0.00, 0),
(668, 1012, 'team63', 0, 960, '2013-11-23 11:48:36', 4, 1, '10.16.20.50', 1, 1, 3, 115, '2013-11-23 11:48:39', 0.00, 1),
(669, 1003, 'team35', 0, 960, '2013-11-23 11:48:47', 6, 1, '10.16.8.43', 0, 1, 2, 89, '2013-11-23 11:48:49', 0.00, 0),
(670, 1003, 'team71', 0, 960, '2013-11-23 11:48:48', 6, 1, '10.16.20.13', 0, 1, 2, 99, '2013-11-23 11:48:49', 0.00, 0),
(671, 1003, 'team35', 0, 960, '2013-11-23 11:49:15', 4, 1, '10.16.8.43', 0, 1, 2, 90, '2013-11-23 11:49:19', 0.00, 1),
(672, 1011, 'team70', 0, 960, '2013-11-23 11:49:26', 6, 1, '10.16.20.72', 1, 1, 2, 93, '2013-11-23 11:49:29', 0.00, 0),
(673, 1015, 'team48', 0, 960, '2013-11-23 11:49:35', 6, 1, '10.16.20.136', 1, 1, 6, 92, '2013-11-23 11:49:39', 0.00, 0),
(674, 1009, 'team64', 0, 960, '2013-11-23 11:49:35', 6, 1, '10.16.20.17', 1, 1, 0, 88, '2013-11-23 11:49:39', 0.00, 0),
(675, 1006, 'team60', 2000, 7836, '2013-11-23 11:49:58', 7, 1, '10.16.20.48', 0, 1, 5, 544, '2013-11-23 11:50:03', 0.00, 0),
(676, 1003, 'team71', 0, 960, '2013-11-23 11:50:02', 6, 1, '10.16.20.13', 0, 1, 2, 102, '2013-11-23 11:50:04', 0.00, 0),
(677, 1001, 'team11', 0, 976, '2013-11-23 11:50:09', 6, 1, '10.16.20.84', 0, 1, 0, 358, '2013-11-23 11:50:14', 0.00, 0),
(678, 1016, 'team34', 0, 960, '2013-11-23 11:50:24', 6, 1, '10.16.20.124', 1, 1, 7, 87, '2013-11-23 11:50:24', 0.00, 0),
(679, 1001, 'team11', 0, 976, '2013-11-23 11:50:24', 6, 0, '10.16.20.84', 0, 1, 0, 358, '2013-11-23 11:50:29', 0.00, 0),
(680, 1012, 'team69', 0, 960, '2013-11-23 11:50:34', 6, 1, '10.16.20.16', 1, 1, 3, 110, '2013-11-23 11:50:39', 0.00, 0),
(681, 1003, 'team55', 0, 0, '2013-11-23 11:50:54', 11, 1, '10.16.20.40', 0, 1, 2, 66, '2013-11-23 11:50:59', 0.00, 0),
(682, 1006, 'team23', 4, 964, '2013-11-23 11:50:59', 6, 1, '10.16.20.102', 0, 1, 5, 193, '2013-11-23 11:50:59', 0.00, 0),
(683, 1011, 'team53', 0, 960, '2013-11-23 11:51:08', 4, 1, '10.16.20.38', 1, 1, 2, 93, '2013-11-23 11:51:09', 0.00, 1),
(684, 1006, 'team23', 4, 964, '2013-11-23 11:51:09', 6, 0, '10.16.20.102', 0, 1, 5, 193, '2013-11-23 11:51:09', 0.00, 0),
(685, 1001, 'team33', 0, 0, '2013-11-23 11:51:31', 11, 1, '10.16.20.126', 0, 1, 0, 1163, '2013-11-23 11:51:35', 0.00, 0),
(686, 1003, 'team55', 0, 960, '2013-11-23 11:51:32', 6, 1, '10.16.20.40', 0, 1, 2, 67, '2013-11-23 11:51:34', 0.00, 0),
(687, 1013, 'team19', 0, 960, '2013-11-23 11:51:36', 6, 1, '10.16.20.107', 1, 1, 4, 89, '2013-11-23 11:51:39', 0.00, 0),
(688, 1003, 'team85', 0, 960, '2013-11-23 11:51:48', 4, 1, '10.16.20.63', 0, 1, 2, 220, '2013-11-23 11:51:49', 0.00, 1),
(689, 1014, 'team32', 0, 960, '2013-11-23 11:51:49', 6, 1, '10.16.20.128', 1, 1, 5, 81, '2013-11-23 11:51:49', 0.00, 0),
(690, 1012, 'team53', 0, 960, '2013-11-23 11:51:50', 6, 1, '10.16.20.38', 1, 1, 3, 109, '2013-11-23 11:51:54', 0.00, 0),
(691, 1001, 'team30', 0, 1484, '2013-11-23 11:51:50', 6, 1, '10.16.20.131', 0, 1, 0, 612, '2013-11-23 11:51:55', 0.00, 0),
(692, 1001, 'team33', 10000, 1484, '2013-11-23 11:51:59', 7, 1, '10.16.20.126', 0, 1, 0, 1186, '2013-11-23 11:52:18', 0.00, 0),
(693, 1003, 'team71', 0, 960, '2013-11-23 11:52:01', 6, 0, '10.16.20.13', 0, 1, 2, 98, '2013-11-23 11:52:04', 0.00, 0),
(694, 1010, 'team78', 0, 960, '2013-11-23 11:52:06', 6, 1, '10.16.20.53', 1, 1, 1, 104, '2013-11-23 11:52:09', 0.00, 0),
(695, 1002, 'team5', 0, 964, '2013-11-23 11:52:13', 4, 0, '10.16.20.92', 0, 1, 1, 743, '2013-11-23 11:52:14', 0.00, 1),
(696, 1003, 'team55', 0, 960, '2013-11-23 11:52:17', 6, 1, '10.16.20.40', 0, 1, 2, 66, '2013-11-23 11:52:19', 0.00, 0),
(697, 1012, 'team77', 0, 960, '2013-11-23 11:52:29', 6, 1, '10.16.20.27', 1, 1, 3, 110, '2013-11-23 11:52:34', 0.00, 0),
(698, 1003, 'team55', 0, 960, '2013-11-23 11:52:40', 6, 1, '10.16.20.40', 0, 1, 2, 65, '2013-11-23 11:52:44', 0.00, 0),
(699, 1003, 'team71', 0, 960, '2013-11-23 11:52:46', 6, 1, '10.16.20.13', 0, 1, 2, 96, '2013-11-23 11:52:49', 0.00, 0),
(700, 1007, 'team3', 0, 1484, '2013-11-23 11:52:56', 4, 1, '10.16.20.96', 0, 1, 6, 336, '2013-11-23 11:53:00', 0.00, 1),
(701, 1003, 'team71', 0, 960, '2013-11-23 11:53:12', 6, 1, '10.16.20.13', 0, 1, 2, 97, '2013-11-23 11:53:14', 0.00, 0),
(702, 1003, 'team55', 0, 960, '2013-11-23 11:53:22', 6, 1, '10.16.20.40', 0, 1, 2, 67, '2013-11-23 11:53:24', 0.00, 0),
(703, 1008, 'team84', 5968, 964, '2013-11-23 11:53:30', 4, 1, '10.16.20.60', 0, 1, 7, 153, '2013-11-23 11:53:48', 0.00, 1),
(704, 1011, 'team74', 0, 960, '2013-11-23 11:54:11', 4, 1, '10.16.20.21', 1, 1, 2, 92, '2013-11-23 11:54:14', 0.00, 1),
(705, 1003, 'team71', 0, 960, '2013-11-23 11:54:11', 6, 1, '10.16.20.13', 0, 1, 2, 97, '2013-11-23 11:54:14', 0.00, 0),
(706, 1011, 'team24', 0, 0, '2013-11-23 11:54:18', 11, 1, '10.16.20.100', 1, 1, 2, 15, '2013-11-23 11:54:19', 0.00, 0),
(707, 1011, 'team64', 0, 960, '2013-11-23 11:54:25', 6, 1, '10.16.20.17', 1, 1, 2, 92, '2013-11-23 11:54:29', 0.00, 0),
(708, 1003, 'team71', 0, 960, '2013-11-23 11:54:31', 6, 1, '10.16.20.13', 0, 1, 2, 97, '2013-11-23 11:54:34', 0.00, 0),
(709, 1013, 'team19', 0, 960, '2013-11-23 11:55:02', 6, 1, '10.16.20.107', 1, 1, 4, 85, '2013-11-23 11:55:04', 0.00, 0),
(710, 1006, 'team14', 624, 964, '2013-11-23 11:55:11', 4, 0, '10.16.20.117', 0, 1, 5, 272, '2013-11-23 11:55:16', 0.00, 1),
(711, 1003, 'team55', 0, 960, '2013-11-23 11:55:24', 6, 1, '10.16.20.40', 0, 1, 2, 67, '2013-11-23 11:55:24', 0.00, 0),
(712, 1010, 'team66', 0, 960, '2013-11-23 11:55:28', 6, 1, '10.16.20.22', 1, 1, 1, 94, '2013-11-23 11:55:29', 0.00, 0),
(713, 1015, 'team73', 0, 960, '2013-11-23 11:55:38', 6, 1, '10.16.20.235', 1, 1, 6, 92, '2013-11-23 11:55:39', 0.00, 0),
(714, 1003, 'team55', 0, 960, '2013-11-23 11:55:49', 4, 1, '10.16.20.40', 0, 1, 2, 67, '2013-11-23 11:55:49', 0.00, 1),
(715, 1012, 'team69', 0, 960, '2013-11-23 11:55:58', 4, 1, '10.16.20.16', 1, 1, 3, 111, '2013-11-23 11:55:59', 0.00, 1),
(716, 1008, 'team82', 0, 964, '2013-11-23 11:56:54', 6, 1, '10.16.20.58', 0, 1, 7, 121, '2013-11-23 11:57:00', 0.00, 0),
(717, 1003, 'team71', 0, 960, '2013-11-23 11:57:18', 6, 0, '10.16.20.13', 0, 1, 2, 79, '2013-11-23 11:57:19', 0.00, 0),
(718, 1014, 'team64', 0, 960, '2013-11-23 11:57:36', 6, 1, '10.16.20.17', 1, 1, 5, 80, '2013-11-23 11:57:39', 0.00, 0),
(719, 1008, 'team23', 12, 964, '2013-11-23 11:57:37', 6, 0, '10.16.20.102', 0, 1, 7, 133, '2013-11-23 11:57:40', 0.00, 0),
(720, 1013, 'team12', 0, 960, '2013-11-23 11:57:47', 6, 1, '10.16.20.83', 1, 1, 4, 100, '2013-11-23 11:57:49', 0.00, 0),
(721, 1003, 'team71', 0, 960, '2013-11-23 11:58:14', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 11:58:14', 0.00, 0),
(722, 1011, 'team63', 0, 960, '2013-11-23 11:58:20', 6, 1, '10.16.20.50', 1, 1, 2, 96, '2013-11-23 11:58:24', 0.00, 0),
(723, 1008, 'team82', 0, 964, '2013-11-23 11:58:32', 6, 1, '10.16.20.58', 0, 1, 7, 134, '2013-11-23 11:58:35', 0.00, 0),
(724, 1012, 'team38', 0, 960, '2013-11-23 11:59:09', 6, 0, '10.16.20.118', 1, 1, 3, 110, '2013-11-23 11:59:09', 0.00, 0),
(725, 1003, 'team71', 0, 960, '2013-11-23 11:59:40', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 11:59:44', 0.00, 0),
(726, 1008, 'team82', 0, 964, '2013-11-23 11:59:50', 6, 1, '10.16.20.58', 0, 1, 7, 131, '2013-11-23 11:59:55', 0.00, 0),
(727, 1001, 'team2', 3052, 964, '2013-11-23 12:00:00', 4, 1, '10.16.20.97', 0, 1, 0, 574, '2013-11-23 12:00:08', 0.00, 1),
(728, 1008, 'team82', 0, 964, '2013-11-23 12:00:15', 6, 1, '10.16.20.58', 0, 1, 7, 131, '2013-11-23 12:00:20', 0.00, 0),
(729, 1003, 'team71', 0, 960, '2013-11-23 12:00:18', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 12:00:19', 0.00, 0),
(730, 1002, 'team79', 4, 1484, '2013-11-23 12:00:19', 4, 1, '10.16.20.55', 0, 1, 1, 835, '2013-11-23 12:00:20', 0.00, 1),
(731, 1006, 'team15', 612, 964, '2013-11-23 12:00:26', 4, 1, '10.16.20.115', 0, 1, 5, 315, '2013-11-23 12:00:31', 0.00, 1),
(732, 1003, 'team71', 0, 960, '2013-11-23 12:00:37', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 12:00:39', 0.00, 0),
(733, 1001, 'team33', 520, 1592, '2013-11-23 12:00:42', 6, 1, '10.16.20.126', 0, 1, 0, 57973, '2013-11-23 12:00:48', 0.00, 0),
(734, 1003, 'team71', 0, 960, '2013-11-23 12:00:58', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 12:00:59', 0.00, 0),
(735, 1003, 'team71', 0, 960, '2013-11-23 12:01:16', 6, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 12:01:19', 0.00, 0),
(736, 1008, 'team82', 0, 964, '2013-11-23 12:01:16', 6, 1, '10.16.20.58', 0, 1, 7, 109, '2013-11-23 12:01:20', 0.00, 0),
(737, 1008, 'team11', 0, 1484, '2013-11-23 12:01:29', 6, 1, '10.16.20.84', 0, 1, 7, 224, '2013-11-23 12:01:30', 0.00, 0),
(738, 1003, 'team71', 0, 960, '2013-11-23 12:01:31', 4, 1, '10.16.20.13', 0, 1, 2, 74, '2013-11-23 12:01:35', 0.00, 1),
(739, 1014, 'team74', 0, 960, '2013-11-23 12:01:52', 6, 1, '10.16.20.21', 1, 1, 5, 87, '2013-11-23 12:01:54', 0.00, 0),
(740, 1009, 'team77', 0, 960, '2013-11-23 12:02:11', 6, 1, '10.16.20.27', 1, 1, 0, 88, '2013-11-23 12:02:14', 0.00, 0),
(741, 1013, 'team70', 0, 960, '2013-11-23 12:02:22', 6, 1, '10.16.20.72', 1, 1, 4, 85, '2013-11-23 12:02:24', 0.00, 0),
(742, 1009, 'team51', 0, 960, '2013-11-23 12:02:23', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 12:02:24', 0.00, 0),
(743, 1012, 'team34', 0, 960, '2013-11-23 12:02:26', 6, 1, '10.16.20.124', 1, 1, 3, 111, '2013-11-23 12:02:29', 0.00, 0),
(744, 1005, 'team46', 0, 0, '2013-11-23 12:02:57', 11, 1, '10.16.20.101', 0, 1, 4, 1351, '2013-11-23 12:03:00', 0.00, 0),
(745, 1006, 'team92', 0, 0, '2013-11-23 12:03:09', 11, 1, '10.16.20.11', 0, 1, 5, 676, '2013-11-23 12:03:09', 0.00, 0),
(746, 1012, 'team73', 0, 960, '2013-11-23 12:03:17', 6, 1, '10.16.20.235', 1, 1, 3, 114, '2013-11-23 12:03:19', 0.00, 0),
(747, 1011, 'team70', 0, 960, '2013-11-23 12:03:38', 6, 1, '10.16.20.72', 1, 1, 2, 93, '2013-11-23 12:03:40', 0.00, 0),
(748, 1014, 'team74', 0, 960, '2013-11-23 12:03:48', 6, 1, '10.16.20.21', 1, 1, 5, 85, '2013-11-23 12:03:49', 0.00, 0),
(749, 1011, 'team32', 0, 960, '2013-11-23 12:04:09', 4, 1, '10.16.20.128', 1, 1, 2, 88, '2013-11-23 12:04:10', 0.00, 1),
(750, 1013, 'team76', 0, 960, '2013-11-23 12:04:21', 6, 0, '10.16.20.54', 1, 1, 4, 88, '2013-11-23 12:04:25', 0.00, 0),
(751, 1009, 'team24', 0, 960, '2013-11-23 12:04:32', 6, 1, '10.16.20.100', 1, 1, 0, 88, '2013-11-23 12:04:35', 0.00, 0),
(752, 1008, 'team82', 0, 964, '2013-11-23 12:04:59', 6, 1, '10.16.20.58', 0, 1, 7, 144, '2013-11-23 12:05:05', 0.00, 0),
(753, 1002, 'team14', 0, 964, '2013-11-23 12:05:01', 6, 0, '10.16.20.117', 0, 1, 1, 922, '2013-11-23 12:05:05', 0.00, 0),
(754, 1001, 'team79', 0, 408, '2013-11-23 12:05:12', 6, 3, '10.16.20.55', 0, 1, 0, 475, '2013-11-23 12:05:14', 0.00, 0),
(755, 1009, 'team70', 0, 960, '2013-11-23 12:05:23', 6, 1, '10.16.20.72', 1, 1, 0, 89, '2013-11-23 12:05:25', 0.00, 0),
(756, 1011, 'team63', 0, 960, '2013-11-23 12:05:51', 6, 1, '10.16.20.50', 1, 1, 2, 97, '2013-11-23 12:05:55', 0.00, 0),
(757, 1005, 'team42', 0, 964, '2013-11-23 12:06:00', 4, 1, '10.16.20.142', 0, 1, 4, 504, '2013-11-23 12:06:05', 0.00, 1),
(758, 1001, 'team11', 6872, 976, '2013-11-23 12:06:08', 9, 0, '10.16.20.84', 0, 1, 0, 349, '2013-11-23 12:06:50', 0.00, 0),
(759, 1008, 'team59', 0, 964, '2013-11-23 12:06:16', 6, 1, '10.16.20.46', 0, 1, 7, 102, '2013-11-23 12:06:20', 0.00, 0),
(760, 1011, 'team24', 0, 960, '2013-11-23 12:06:23', 4, 1, '10.16.20.100', 1, 1, 2, 93, '2013-11-23 12:06:25', 0.00, 1),
(761, 1013, 'team76', 0, 960, '2013-11-23 12:06:48', 6, 0, '10.16.20.54', 1, 1, 4, 87, '2013-11-23 12:06:50', 0.00, 0),
(762, 1012, 'team67', 0, 960, '2013-11-23 12:07:02', 5, 1, '10.16.20.18', 1, 1, 3, 112, '2013-11-23 12:07:05', 0.00, 0),
(763, 1014, 'team63', 0, 960, '2013-11-23 12:07:42', 6, 1, '10.16.20.50', 1, 1, 5, 78, '2013-11-23 12:07:45', 0.00, 0),
(764, 1008, 'team59', 0, 964, '2013-11-23 12:07:45', 6, 0, '10.16.20.46', 0, 1, 7, 102, '2013-11-23 12:07:50', 0.00, 0),
(765, 1008, 'team11', 0, 1484, '2013-11-23 12:08:00', 6, 1, '10.16.20.84', 0, 1, 7, 219, '2013-11-23 12:08:05', 0.00, 0),
(766, 1001, 'team33', 452, 1592, '2013-11-23 12:08:01', 4, 1, '10.16.20.126', 0, 1, 0, 60379, '2013-11-23 12:08:08', 0.00, 1),
(767, 1015, 'team12', 0, 960, '2013-11-23 12:08:58', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 12:09:00', 0.00, 0),
(768, 1005, 'team31', 1000, 960, '2013-11-23 12:09:00', 7, 0, '10.16.20.129', 0, 1, 4, 230, '2013-11-23 12:09:15', 0.00, 0),
(769, 1012, 'team77', 0, 960, '2013-11-23 12:09:00', 6, 1, '10.16.20.27', 1, 1, 3, 110, '2013-11-23 12:09:05', 0.00, 0),
(770, 1012, 'team34', 0, 960, '2013-11-23 12:09:10', 6, 1, '10.16.20.124', 1, 1, 3, 111, '2013-11-23 12:09:15', 0.00, 0),
(771, 1012, 'team6', 0, 960, '2013-11-23 12:09:21', 4, 1, '10.16.20.89', 1, 1, 3, 111, '2013-11-23 12:09:25', 0.00, 1),
(772, 1013, 'team24', 0, 960, '2013-11-23 12:09:35', 6, 1, '10.16.20.100', 1, 1, 4, 85, '2013-11-23 12:09:40', 0.00, 0),
(773, 1001, 'team4', 36, 976, '2013-11-23 12:09:51', 6, 1, '10.16.20.94', 0, 1, 0, 433, '2013-11-23 12:09:55', 0.00, 0),
(774, 1009, 'team51', 0, 960, '2013-11-23 12:10:11', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 12:10:15', 0.00, 0),
(775, 1006, 'team23', 584, 964, '2013-11-23 12:10:11', 6, 1, '10.16.20.102', 0, 1, 5, 218, '2013-11-23 12:10:16', 0.00, 0),
(776, 1009, 'team53', 0, 960, '2013-11-23 12:10:15', 4, 1, '10.16.20.38', 1, 1, 0, 88, '2013-11-23 12:10:20', 0.00, 1),
(777, 1006, 'team23', 632, 964, '2013-11-23 12:10:26', 6, 0, '10.16.20.102', 0, 1, 5, 218, '2013-11-23 12:10:31', 0.00, 0),
(778, 1005, 'team52', 0, 1484, '2013-11-23 12:10:28', 4, 1, '10.16.20.36', 0, 1, 4, 545, '2013-11-23 12:10:30', 0.00, 1),
(779, 1005, 'team31', 1000, 960, '2013-11-23 12:10:46', 7, 0, '10.16.20.129', 0, 1, 4, 230, '2013-11-23 12:11:00', 0.00, 0),
(780, 1007, 'team36', 0, 0, '2013-11-23 12:10:50', 11, 1, '10.16.20.120', 0, 1, 6, 440, '2013-11-23 12:10:55', 0.00, 0),
(781, 1014, 'team63', 0, 960, '2013-11-23 12:10:51', 6, 1, '10.16.20.50', 1, 1, 5, 85, '2013-11-23 12:10:55', 0.00, 0),
(782, 1012, 'team67', 0, 960, '2013-11-23 12:10:52', 4, 1, '10.16.20.18', 1, 1, 3, 115, '2013-11-23 12:10:55', 0.00, 1),
(783, 1010, 'team78', 0, 960, '2013-11-23 12:10:53', 6, 1, '10.16.20.53', 1, 1, 1, 106, '2013-11-23 12:10:55', 0.00, 0),
(784, 1004, 'team35', 0, 1700, '2013-11-23 12:11:30', 4, 1, '110.96.32.164', 0, 1, 3, 4916, '2013-11-23 12:11:36', 0.00, 1),
(785, 1007, 'team36', 0, 964, '2013-11-23 12:11:52', 10, 0, '10.16.20.120', 0, 1, 6, 374, '2013-11-23 12:11:55', 0.00, 0),
(786, 1002, 'team54', 0, 964, '2013-11-23 12:12:34', 4, 1, '10.16.20.39', 0, 1, 1, 691, '2013-11-23 12:12:35', 0.00, 1),
(787, 1005, 'team46', 52, 1484, '2013-11-23 12:12:39', 9, 1, '10.16.20.101', 0, 1, 4, 1363, '2013-11-23 12:12:41', 0.00, 0),
(788, 1013, 'team32', 0, 960, '2013-11-23 12:12:43', 4, 1, '10.16.20.128', 1, 1, 4, 85, '2013-11-23 12:12:45', 0.00, 1),
(789, 1006, 'team60', 2000, 7836, '2013-11-23 12:12:44', 7, 1, '10.16.20.48', 0, 1, 5, 670, '2013-11-23 12:12:49', 0.00, 0),
(790, 1008, 'team59', 5876, 964, '2013-11-23 12:12:59', 6, 1, '10.16.20.46', 0, 1, 7, 123, '2013-11-23 12:13:12', 0.00, 0),
(791, 1013, 'team66', 0, 960, '2013-11-23 12:13:19', 6, 1, '10.16.20.22', 1, 1, 4, 85, '2013-11-23 12:13:20', 0.00, 0),
(792, 1008, 'team82', 6292, 964, '2013-11-23 12:13:39', 4, 1, '10.16.20.58', 0, 1, 7, 155, '2013-11-23 12:13:55', 0.00, 1),
(793, 1008, 'team11', 0, 0, '2013-11-23 12:13:51', 11, 1, '10.16.20.84', 0, 1, 7, 225, '2013-11-23 12:13:55', 0.00, 0),
(794, 1004, 'team40', 0, 964, '2013-11-23 12:14:17', 6, 1, '10.16.20.146', 0, 1, 3, 536, '2013-11-23 12:14:20', 0.00, 0),
(795, 1010, 'team53', 0, 960, '2013-11-23 12:14:28', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 12:14:30', 0.00, 0),
(796, 1013, 'team70', 0, 960, '2013-11-23 12:14:36', 6, 1, '10.16.20.72', 1, 1, 4, 86, '2013-11-23 12:14:40', 0.00, 0),
(797, 1008, 'team59', 5904, 964, '2013-11-23 12:14:55', 6, 0, '10.16.20.46', 0, 1, 7, 123, '2013-11-23 12:15:12', 0.00, 0),
(798, 1009, 'team38', 0, 960, '2013-11-23 12:15:01', 4, 0, '10.16.20.118', 1, 1, 0, 88, '2013-11-23 12:15:05', 0.00, 1),
(799, 1013, 'team56', 0, 960, '2013-11-23 12:15:07', 6, 1, '10.16.20.41', 1, 1, 4, 85, '2013-11-23 12:15:10', 0.00, 0),
(800, 1008, 'team11', 0, 1484, '2013-11-23 12:15:09', 6, 1, '10.16.20.84', 0, 1, 7, 219, '2013-11-23 12:15:11', 0.00, 0),
(801, 1006, 'team17', 624, 4868, '2013-11-23 12:15:17', 4, 1, '10.16.20.111', 0, 1, 5, 587, '2013-11-23 12:15:21', 0.00, 1),
(802, 1013, 'team76', 0, 960, '2013-11-23 12:15:27', 6, 0, '10.16.20.54', 1, 1, 4, 87, '2013-11-23 12:15:30', 0.00, 0),
(803, 1005, 'team16', 4, 1524, '2013-11-23 12:15:40', 6, 1, '10.16.20.113', 0, 1, 4, 463, '2013-11-23 12:15:40', 0.00, 0),
(804, 1006, 'team60', 2000, 7780, '2013-11-23 12:15:48', 7, 0, '10.16.20.48', 0, 1, 5, 672, '2013-11-23 12:15:54', 0.00, 0),
(805, 1012, 'team34', 0, 960, '2013-11-23 12:16:13', 6, 1, '10.16.20.124', 1, 1, 3, 110, '2013-11-23 12:16:15', 0.00, 0),
(806, 1003, 'team30', 0, 1480, '2013-11-23 12:16:20', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:16:21', 0.00, 0),
(807, 1003, 'team30', 0, 1480, '2013-11-23 12:16:40', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:16:40', 0.00, 0),
(808, 1005, 'team46', 56, 1484, '2013-11-23 12:16:41', 9, 1, '10.16.20.101', 0, 1, 4, 1389, '2013-11-23 12:16:46', 0.00, 0),
(809, 1015, 'team48', 0, 960, '2013-11-23 12:16:45', 4, 1, '10.16.20.136', 1, 1, 6, 91, '2013-11-23 12:16:50', 0.00, 1),
(810, 1003, 'team30', 0, 1480, '2013-11-23 12:17:07', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:17:11', 0.00, 0),
(811, 1008, 'team11', 0, 1484, '2013-11-23 12:17:19', 6, 1, '10.16.20.84', 0, 1, 7, 219, '2013-11-23 12:17:21', 0.00, 0),
(812, 1003, 'team30', 0, 1480, '2013-11-23 12:17:28', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:17:31', 0.00, 0),
(813, 1003, 'team30', 0, 1480, '2013-11-23 12:17:48', 6, 1, '10.16.20.131', 0, 1, 2, 199, '2013-11-23 12:17:51', 0.00, 0),
(814, 1008, 'team59', 5732, 964, '2013-11-23 12:17:49', 6, 0, '10.16.20.46', 0, 1, 7, 136, '2013-11-23 12:18:00', 0.00, 0),
(815, 1009, 'team34', 0, 960, '2013-11-23 12:18:06', 6, 1, '10.16.20.124', 1, 1, 0, 88, '2013-11-23 12:18:10', 0.00, 0),
(816, 1003, 'team30', 0, 1480, '2013-11-23 12:18:08', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:18:11', 0.00, 0),
(817, 1008, 'team10', 0, 964, '2013-11-23 12:18:11', 6, 0, '10.16.20.99', 0, 1, 7, 148, '2013-11-23 12:18:15', 0.00, 0),
(818, 1003, 'team30', 0, 1480, '2013-11-23 12:18:25', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:18:31', 0.00, 0),
(819, 1009, 'team51', 0, 960, '2013-11-23 12:18:32', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 12:18:35', 0.00, 0),
(820, 1008, 'team11', 0, 1484, '2013-11-23 12:18:40', 6, 1, '10.16.20.84', 0, 1, 7, 152, '2013-11-23 12:18:46', 0.00, 0),
(821, 1003, 'team30', 0, 1480, '2013-11-23 12:18:44', 6, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:18:46', 0.00, 0),
(822, 1013, 'team48', 0, 960, '2013-11-23 12:18:44', 6, 1, '10.16.20.136', 1, 1, 4, 111, '2013-11-23 12:18:45', 0.00, 0),
(823, 1003, 'team30', 0, 1480, '2013-11-23 12:19:00', 4, 1, '10.16.20.131', 0, 1, 2, 201, '2013-11-23 12:19:06', 0.00, 1),
(824, 1013, 'team76', 0, 960, '2013-11-23 12:19:10', 4, 0, '10.16.20.54', 1, 1, 4, 87, '2013-11-23 12:19:15', 0.00, 1),
(825, 1008, 'team23', 0, 1484, '2013-11-23 12:19:37', 6, 1, '10.16.20.102', 0, 1, 7, 108, '2013-11-23 12:19:41', 0.00, 0),
(826, 1014, 'team49', 0, 960, '2013-11-23 12:19:55', 6, 1, '10.16.20.32', 1, 1, 5, 87, '2013-11-23 12:19:55', 0.00, 0),
(827, 1005, 'team57', 1000, 1000, '2013-11-23 12:20:16', 7, 1, '10.16.20.43', 0, 1, 4, 541, '2013-11-23 12:20:22', 0.00, 0),
(828, 1003, 'team92', 0, 0, '2013-11-23 12:20:21', 11, 1, '10.16.20.11', 0, 1, 2, 4, '2013-11-23 12:20:25', 0.00, 0),
(829, 1011, 'team48', 0, 960, '2013-11-23 12:20:50', 6, 1, '10.16.20.136', 1, 1, 2, 91, '2013-11-23 12:20:55', 0.00, 0),
(830, 1004, 'team40', 0, 0, '2013-11-23 12:20:52', 11, 1, '10.16.20.146', 0, 1, 3, 527, '2013-11-23 12:20:55', 0.00, 0),
(831, 1008, 'team11', 0, 1484, '2013-11-23 12:21:02', 6, 1, '10.16.20.84', 0, 1, 7, 245, '2013-11-23 12:21:06', 0.00, 0),
(832, 1003, 'team92', 0, 960, '2013-11-23 12:21:23', 6, 1, '10.16.20.11', 0, 1, 2, 78, '2013-11-23 12:21:25', 0.00, 0),
(833, 1015, 'team12', 0, 960, '2013-11-23 12:21:25', 6, 1, '10.16.20.83', 1, 1, 6, 92, '2013-11-23 12:21:30', 0.00, 0),
(834, 1015, 'team63', 0, 960, '2013-11-23 12:21:27', 6, 1, '10.16.20.50', 1, 1, 6, 91, '2013-11-23 12:21:30', 0.00, 0),
(835, 1002, 'team14', 0, 968, '2013-11-23 12:21:27', 6, 0, '10.16.20.117', 0, 1, 1, 1221, '2013-11-23 12:21:30', 0.00, 0),
(836, 1011, 'team70', 0, 960, '2013-11-23 12:21:30', 6, 1, '10.16.20.72', 1, 1, 2, 97, '2013-11-23 12:21:35', 0.00, 0),
(837, 1003, 'team46', 0, 960, '2013-11-23 12:21:53', 4, 1, '10.16.20.101', 0, 1, 2, 65, '2013-11-23 12:21:55', 0.00, 1),
(838, 1016, 'team64', 0, 960, '2013-11-23 12:22:10', 6, 1, '10.16.20.17', 1, 1, 7, 87, '2013-11-23 12:22:15', 0.00, 0),
(839, 1006, 'team92', 0, 0, '2013-11-23 12:22:54', 11, 1, '10.16.20.11', 0, 1, 5, 760, '2013-11-23 12:22:55', 0.00, 0),
(840, 1008, 'team30', 0, 1484, '2013-11-23 12:23:18', 6, 1, '10.16.20.131', 0, 1, 7, 136, '2013-11-23 12:23:21', 0.00, 0),
(841, 1010, 'team63', 0, 960, '2013-11-23 12:23:44', 6, 1, '10.16.20.50', 1, 1, 1, 93, '2013-11-23 12:23:45', 0.00, 0);
INSERT INTO `solution` (`solution_id`, `problem_id`, `user_id`, `time`, `memory`, `in_date`, `result`, `language`, `ip`, `contest_id`, `valid`, `num`, `code_length`, `judgetime`, `pass_rate`, `balloon`) VALUES
(842, 1016, 'team19', 0, 960, '2013-11-23 12:23:48', 6, 1, '10.16.20.107', 1, 1, 7, 87, '2013-11-23 12:23:50', 0.00, 0),
(843, 1013, 'team78', 0, 960, '2013-11-23 12:24:04', 6, 1, '10.16.20.53', 1, 1, 4, 100, '2013-11-23 12:24:05', 0.00, 0),
(844, 1005, 'team16', 4, 1524, '2013-11-23 12:24:25', 6, 1, '10.16.20.113', 0, 1, 4, 469, '2013-11-23 12:24:31', 0.00, 0),
(845, 1002, 'team31', 1000, 960, '2013-11-23 12:24:38', 7, 0, '10.16.20.130', 0, 1, 1, 706, '2013-11-23 12:24:50', 0.00, 0),
(846, 1010, 'team78', 0, 960, '2013-11-23 12:25:00', 6, 1, '10.16.20.53', 1, 1, 1, 106, '2013-11-23 12:25:05', 0.00, 0),
(847, 1003, 'team59', 0, 960, '2013-11-23 12:25:08', 4, 0, '10.16.20.46', 0, 1, 2, 59, '2013-11-23 12:25:10', 0.00, 1),
(848, 1006, 'team39', 592, 964, '2013-11-23 12:25:13', 4, 1, '10.16.20.147', 0, 1, 5, 295, '2013-11-23 12:25:16', 0.00, 1),
(849, 1009, 'team77', 0, 960, '2013-11-23 12:25:58', 4, 1, '10.16.20.27', 1, 1, 0, 88, '2013-11-23 12:26:00', 0.00, 1),
(850, 1002, 'team14', 0, 968, '2013-11-23 12:26:03', 4, 0, '10.16.20.117', 0, 1, 1, 1278, '2013-11-23 12:26:05', 0.00, 1),
(851, 1001, 'team11', 0, 976, '2013-11-23 12:26:03', 6, 0, '10.16.20.84', 0, 1, 0, 382, '2013-11-23 12:26:05', 0.00, 0),
(852, 1008, 'team46', 0, 964, '2013-11-23 12:26:11', 6, 1, '10.16.20.101', 0, 1, 7, 256, '2013-11-23 12:26:15', 0.00, 0),
(853, 1010, 'team48', 0, 960, '2013-11-23 12:26:26', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 12:26:30', 0.00, 0),
(854, 1006, 'team40', 592, 964, '2013-11-23 12:26:45', 4, 1, '10.16.20.146', 0, 1, 5, 270, '2013-11-23 12:26:51', 0.00, 1),
(855, 1014, 'team49', 0, 960, '2013-11-23 12:27:25', 4, 1, '10.16.20.32', 1, 1, 5, 87, '2013-11-23 12:27:30', 0.00, 1),
(856, 1009, 'team24', 0, 960, '2013-11-23 12:27:47', 6, 1, '10.16.20.100', 1, 1, 0, 88, '2013-11-23 12:27:50', 0.00, 0),
(857, 1011, 'team63', 0, 960, '2013-11-23 12:27:50', 4, 1, '10.16.20.50', 1, 1, 2, 88, '2013-11-23 12:27:55', 0.00, 1),
(858, 1013, 'team56', 0, 960, '2013-11-23 12:28:02', 6, 1, '10.16.20.41', 1, 1, 4, 85, '2013-11-23 12:28:05', 0.00, 0),
(859, 1008, 'team23', 0, 964, '2013-11-23 12:28:16', 6, 0, '10.16.20.102', 0, 1, 7, 182, '2013-11-23 12:28:20', 0.00, 0),
(860, 1003, 'team40', 0, 960, '2013-11-23 12:28:22', 4, 1, '10.16.20.146', 0, 1, 2, 74, '2013-11-23 12:28:25', 0.00, 1),
(861, 1001, 'team11', 0, 976, '2013-11-23 12:28:25', 6, 1, '10.16.20.84', 0, 1, 0, 358, '2013-11-23 12:28:30', 0.00, 0),
(862, 1008, 'team30', 0, 1484, '2013-11-23 12:29:03', 6, 1, '10.16.20.131', 0, 1, 7, 212, '2013-11-23 12:29:06', 0.00, 0),
(863, 1014, 'team74', 0, 960, '2013-11-23 12:29:19', 6, 1, '10.16.20.21', 1, 1, 5, 85, '2013-11-23 12:29:20', 0.00, 0),
(864, 1016, 'team6', 0, 960, '2013-11-23 12:29:24', 6, 1, '10.16.20.89', 1, 1, 7, 87, '2013-11-23 12:29:25', 0.00, 0),
(865, 1001, 'team52', 6188, 1484, '2013-11-23 12:29:32', 4, 1, '10.16.20.36', 0, 1, 0, 484, '2013-11-23 12:29:44', 0.00, 1),
(866, 1009, 'team51', 0, 960, '2013-11-23 12:29:42', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 12:29:45', 0.00, 0),
(867, 1008, 'team11', 0, 1484, '2013-11-23 12:29:42', 6, 1, '10.16.20.84', 0, 1, 7, 154, '2013-11-23 12:29:46', 0.00, 0),
(868, 1006, 'team72', 0, 0, '2013-11-23 12:30:36', 11, 1, '10.16.20.14', 0, 1, 5, 399, '2013-11-23 12:30:40', 0.00, 0),
(869, 1015, 'team69', 0, 960, '2013-11-23 12:31:08', 6, 1, '10.16.20.16', 1, 1, 6, 91, '2013-11-23 12:31:10', 0.00, 0),
(870, 1007, 'team47', 0, 964, '2013-11-23 12:31:17', 4, 0, '10.16.20.137', 0, 1, 6, 318, '2013-11-23 12:31:20', 0.00, 1),
(871, 1008, 'team46', 0, 964, '2013-11-23 12:31:21', 6, 0, '10.16.20.101', 0, 1, 7, 168, '2013-11-23 12:31:25', 0.00, 0),
(872, 1016, 'team66', 0, 960, '2013-11-23 12:32:09', 6, 1, '10.16.20.22', 1, 1, 7, 87, '2013-11-23 12:32:10', 0.00, 0),
(873, 1001, 'team1', 3060, 964, '2013-11-23 12:32:27', 4, 1, '10.16.20.98', 0, 1, 0, 747, '2013-11-23 12:32:33', 0.00, 1),
(874, 1006, 'team72', 0, 960, '2013-11-23 12:32:28', 10, 1, '10.16.20.14', 0, 1, 5, 396, '2013-11-23 12:32:30', 0.00, 0),
(875, 1013, 'team24', 0, 960, '2013-11-23 12:32:29', 6, 1, '10.16.20.100', 1, 1, 4, 86, '2013-11-23 12:32:30', 0.00, 0),
(876, 1014, 'team19', 0, 960, '2013-11-23 12:32:51', 4, 1, '10.16.20.107', 1, 1, 5, 87, '2013-11-23 12:32:55', 0.00, 1),
(877, 1014, 'team66', 0, 960, '2013-11-23 12:32:52', 6, 1, '10.16.20.22', 1, 1, 5, 85, '2013-11-23 12:32:55', 0.00, 0),
(878, 1008, 'team11', 0, 0, '2013-11-23 12:33:09', 11, 0, '10.16.20.84', 0, 1, 7, 111, '2013-11-23 12:33:10', 0.00, 0),
(879, 1002, 'team33', 0, 1492, '2013-11-23 12:33:10', 4, 1, '10.16.20.126', 0, 1, 1, 969, '2013-11-23 12:33:11', 0.00, 1),
(880, 1005, 'team57', 1000, 1000, '2013-11-23 12:33:30', 7, 1, '10.16.20.43', 0, 1, 4, 539, '2013-11-23 12:33:32', 0.00, 0),
(881, 1008, 'team10', 0, 964, '2013-11-23 12:33:30', 6, 0, '10.16.20.99', 0, 1, 7, 234, '2013-11-23 12:33:35', 0.00, 0),
(882, 1009, 'team63', 0, 960, '2013-11-23 12:33:46', 6, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 12:33:50', 0.00, 0),
(883, 1009, 'team73', 0, 960, '2013-11-23 12:34:01', 6, 1, '10.16.20.235', 1, 1, 0, 92, '2013-11-23 12:34:05', 0.00, 0),
(884, 1008, 'team11', 0, 964, '2013-11-23 12:34:23', 6, 0, '10.16.20.84', 0, 1, 7, 122, '2013-11-23 12:34:25', 0.00, 0),
(885, 1007, 'team35', 0, 1484, '2013-11-23 12:34:33', 4, 1, '10.16.8.43', 0, 1, 6, 520, '2013-11-23 12:34:36', 0.00, 1),
(886, 1013, 'team34', 0, 960, '2013-11-23 12:34:42', 6, 1, '10.16.20.124', 1, 1, 4, 85, '2013-11-23 12:34:45', 0.00, 0),
(887, 1014, 'team38', 0, 960, '2013-11-23 12:34:48', 6, 0, '10.16.20.118', 1, 1, 5, 83, '2013-11-23 12:34:50', 0.00, 0),
(888, 1015, 'team69', 0, 960, '2013-11-23 12:35:07', 6, 1, '10.16.20.16', 1, 1, 6, 91, '2013-11-23 12:35:10', 0.00, 0),
(889, 1007, 'team40', 1000, 960, '2013-11-23 12:35:20', 7, 1, '10.16.20.146', 0, 1, 6, 374, '2013-11-23 12:35:35', 0.00, 0),
(890, 1006, 'team72', 0, 960, '2013-11-23 12:35:21', 10, 0, '10.16.20.14', 0, 1, 5, 340, '2013-11-23 12:35:25', 0.00, 0),
(891, 1016, 'team12', 0, 960, '2013-11-23 12:35:29', 6, 1, '10.16.20.83', 1, 1, 7, 87, '2013-11-23 12:35:30', 0.00, 0),
(892, 1002, 'team58', 0, 0, '2013-11-23 12:35:51', 11, 1, '10.16.20.45', 0, 1, 1, 382, '2013-11-23 12:35:56', 0.00, 0),
(893, 1007, 'team35', 0, 1484, '2013-11-23 12:35:56', 4, 1, '110.96.32.162', 0, 1, 6, 376, '2013-11-23 12:36:01', 0.00, 1),
(894, 1006, 'team92', 1320, 14856, '2013-11-23 12:35:58', 4, 1, '10.16.20.11', 0, 1, 5, 1062, '2013-11-23 12:36:02', 0.00, 1),
(895, 1016, 'team75', 0, 960, '2013-11-23 12:36:00', 6, 1, '10.16.20.24', 1, 1, 7, 86, '2013-11-23 12:36:05', 0.00, 0),
(896, 1015, 'team12', 0, 960, '2013-11-23 12:36:02', 6, 1, '10.16.20.83', 1, 1, 6, 92, '2013-11-23 12:36:05', 0.00, 0),
(897, 1008, 'team10', 0, 0, '2013-11-23 12:36:10', 11, 1, '10.16.20.99', 0, 1, 7, 166, '2013-11-23 12:36:10', 0.00, 0),
(898, 1002, 'team35', 0, 1492, '2013-11-23 12:36:10', 4, 1, '123.121.32.227', 0, 1, 1, 1224, '2013-11-23 12:36:11', 0.00, 1),
(899, 1008, 'team59', 5780, 964, '2013-11-23 12:36:21', 6, 0, '10.16.20.46', 0, 1, 7, 127, '2013-11-23 12:36:36', 0.00, 0),
(900, 1009, 'team63', 0, 960, '2013-11-23 12:36:30', 6, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 12:36:35', 0.00, 0),
(901, 1008, 'team10', 0, 964, '2013-11-23 12:36:40', 6, 0, '10.16.20.99', 0, 1, 7, 166, '2013-11-23 12:36:40', 0.00, 0),
(902, 1002, 'team58', 0, 964, '2013-11-23 12:36:43', 4, 1, '10.16.20.45', 0, 1, 1, 787, '2013-11-23 12:36:45', 0.00, 1),
(903, 1015, 'team63', 0, 960, '2013-11-23 12:37:41', 6, 1, '10.16.20.50', 1, 1, 6, 87, '2013-11-23 12:37:45', 0.00, 0),
(904, 1013, 'team78', 0, 960, '2013-11-23 12:38:02', 6, 1, '10.16.20.53', 1, 1, 4, 100, '2013-11-23 12:38:05', 0.00, 0),
(905, 1008, 'team46', 0, 964, '2013-11-23 12:38:03', 6, 1, '10.16.20.101', 0, 1, 7, 162, '2013-11-23 12:38:05', 0.00, 0),
(906, 1013, 'team56', 0, 960, '2013-11-23 12:38:11', 4, 1, '10.16.20.41', 1, 1, 4, 85, '2013-11-23 12:38:15', 0.00, 1),
(907, 1016, 'team64', 0, 960, '2013-11-23 12:38:30', 6, 1, '10.16.20.17', 1, 1, 7, 86, '2013-11-23 12:38:35', 0.00, 0),
(908, 1005, 'team15', 0, 964, '2013-11-23 12:38:44', 4, 1, '10.16.20.115', 0, 1, 4, 529, '2013-11-23 12:38:45', 0.00, 1),
(909, 1003, 'team31', 0, 964, '2013-11-23 12:38:55', 6, 0, '10.16.20.129', 0, 1, 2, 89, '2013-11-23 12:38:55', 0.00, 0),
(910, 1007, 'team72', 0, 0, '2013-11-23 12:38:55', 11, 1, '10.16.20.14', 0, 1, 6, 340, '2013-11-23 12:38:55', 0.00, 0),
(911, 1008, 'team11', 0, 964, '2013-11-23 12:39:12', 6, 0, '10.16.20.84', 0, 1, 7, 125, '2013-11-23 12:39:15', 0.00, 0),
(912, 1007, 'team72', 0, 960, '2013-11-23 12:39:31', 10, 1, '10.16.20.14', 0, 1, 6, 339, '2013-11-23 12:39:35', 0.00, 0),
(913, 1008, 'team11', 0, 964, '2013-11-23 12:40:03', 6, 0, '10.16.20.84', 0, 1, 7, 128, '2013-11-23 12:40:05', 0.00, 0),
(914, 1007, 'team40', 1000, 960, '2013-11-23 12:40:40', 7, 1, '10.16.20.146', 0, 1, 6, 390, '2013-11-23 12:40:55', 0.00, 0),
(915, 1003, 'team31', 0, 964, '2013-11-23 12:41:06', 6, 1, '10.16.20.129', 0, 1, 2, 104, '2013-11-23 12:41:10', 0.00, 0),
(916, 1008, 'team11', 0, 964, '2013-11-23 12:41:11', 6, 0, '10.16.20.84', 0, 1, 7, 131, '2013-11-23 12:41:16', 0.00, 0),
(917, 1013, 'team70', 0, 960, '2013-11-23 12:41:23', 6, 1, '10.16.20.72', 1, 1, 4, 86, '2013-11-23 12:41:25', 0.00, 0),
(918, 1008, 'team59', 6492, 964, '2013-11-23 12:41:37', 6, 0, '10.16.20.46', 0, 1, 7, 135, '2013-11-23 12:41:54', 0.00, 0),
(919, 1013, 'team43', 0, 960, '2013-11-23 12:41:41', 6, 1, '10.16.20.140', 1, 1, 4, 111, '2013-11-23 12:41:45', 0.00, 0),
(920, 1012, 'team48', 0, 960, '2013-11-23 12:41:52', 4, 1, '10.16.20.136', 1, 1, 3, 111, '2013-11-23 12:41:55', 0.00, 1),
(921, 1014, 'team56', 0, 960, '2013-11-23 12:41:56', 6, 1, '10.16.20.41', 1, 1, 5, 93, '2013-11-23 12:42:00', 0.00, 0),
(922, 1007, 'team54', 0, 964, '2013-11-23 12:41:58', 4, 1, '10.16.20.39', 0, 1, 6, 454, '2013-11-23 12:42:01', 0.00, 1),
(923, 1005, 'team40', 0, 964, '2013-11-23 12:42:01', 4, 1, '10.16.20.146', 0, 1, 4, 515, '2013-11-23 12:42:06', 0.00, 1),
(924, 1013, 'team34', 0, 960, '2013-11-23 12:42:15', 6, 1, '10.16.20.124', 1, 1, 4, 85, '2013-11-23 12:42:15', 0.00, 0),
(925, 1001, 'team42', 0, 976, '2013-11-23 12:42:37', 6, 1, '10.16.20.142', 0, 1, 0, 546, '2013-11-23 12:42:40', 0.00, 0),
(926, 1011, 'team69', 0, 960, '2013-11-23 12:42:49', 4, 1, '10.16.20.16', 1, 1, 2, 92, '2013-11-23 12:42:51', 0.00, 1),
(927, 1015, 'team43', 0, 960, '2013-11-23 12:42:55', 6, 1, '10.16.20.140', 1, 1, 6, 89, '2013-11-23 12:42:55', 0.00, 0),
(928, 1005, 'team39', 0, 960, '2013-11-23 12:43:02', 10, 1, '10.16.20.147', 0, 1, 4, 539, '2013-11-23 12:43:05', 0.00, 0),
(929, 1015, 'team63', 0, 960, '2013-11-23 12:43:29', 4, 1, '10.16.20.50', 1, 1, 6, 87, '2013-11-23 12:43:31', 0.00, 1),
(930, 1012, 'team77', 0, 960, '2013-11-23 12:43:34', 6, 1, '10.16.20.27', 1, 1, 3, 110, '2013-11-23 12:43:35', 0.00, 0),
(931, 1009, 'team34', 0, 960, '2013-11-23 12:43:44', 6, 1, '10.16.20.124', 1, 1, 0, 88, '2013-11-23 12:43:45', 0.00, 0),
(932, 1005, 'team39', 0, 960, '2013-11-23 12:43:52', 10, 1, '10.16.20.147', 0, 1, 4, 546, '2013-11-23 12:43:55', 0.00, 0),
(933, 1016, 'team38', 0, 960, '2013-11-23 12:44:28', 6, 0, '10.16.20.118', 1, 1, 7, 87, '2013-11-23 12:44:30', 0.00, 0),
(934, 1001, 'team84', 76, 964, '2013-11-23 12:44:33', 6, 1, '10.16.20.60', 0, 1, 0, 607, '2013-11-23 12:44:36', 0.00, 0),
(935, 1016, 'team73', 0, 960, '2013-11-23 12:44:36', 6, 0, '10.16.20.235', 1, 1, 7, 97, '2013-11-23 12:44:40', 0.00, 0),
(936, 1007, 'team18', 0, 964, '2013-11-23 12:45:44', 4, 1, '10.16.20.109', 0, 1, 6, 302, '2013-11-23 12:45:46', 0.00, 1),
(937, 1009, 'team43', 0, 960, '2013-11-23 12:45:47', 6, 1, '10.16.20.140', 1, 1, 0, 88, '2013-11-23 12:45:50', 0.00, 0),
(938, 1008, 'team46', 0, 964, '2013-11-23 12:45:54', 6, 1, '10.16.20.101', 0, 1, 7, 205, '2013-11-23 12:45:56', 0.00, 0),
(939, 1013, 'team74', 0, 960, '2013-11-23 12:47:07', 4, 1, '10.16.20.21', 1, 1, 4, 89, '2013-11-23 12:47:11', 0.00, 1),
(940, 1007, 'team60', 0, 1484, '2013-11-23 12:47:27', 10, 1, '10.16.20.48', 0, 1, 6, 314, '2013-11-23 12:47:31', 0.00, 0),
(941, 1012, 'team77', 0, 960, '2013-11-23 12:47:34', 4, 1, '10.16.20.27', 1, 1, 3, 111, '2013-11-23 12:47:36', 0.00, 1),
(942, 1001, 'team88', 0, 964, '2013-11-23 12:47:34', 6, 1, '10.16.20.69', 0, 1, 0, 875, '2013-11-23 12:47:36', 0.00, 0),
(943, 1010, 'team53', 0, 960, '2013-11-23 12:47:59', 6, 1, '10.16.20.38', 1, 1, 1, 104, '2013-11-23 12:48:00', 0.00, 0),
(944, 1005, 'team36', 0, 964, '2013-11-23 12:48:05', 10, 0, '10.16.20.120', 0, 1, 4, 479, '2013-11-23 12:48:06', 0.00, 0),
(945, 1009, 'team74', 0, 960, '2013-11-23 12:48:16', 6, 1, '10.16.20.21', 1, 1, 0, 92, '2013-11-23 12:48:20', 0.00, 0),
(946, 1008, 'team23', 0, 964, '2013-11-23 12:48:24', 6, 1, '10.16.20.102', 0, 1, 7, 197, '2013-11-23 12:48:26', 0.00, 0),
(947, 1008, 'team23', 0, 964, '2013-11-23 12:48:36', 6, 0, '10.16.20.102', 0, 1, 7, 197, '2013-11-23 12:48:41', 0.00, 0),
(948, 1012, 'team38', 0, 960, '2013-11-23 12:49:30', 5, 0, '10.16.20.118', 1, 1, 3, 112, '2013-11-23 12:49:31', 0.00, 0),
(949, 1005, 'team39', 0, 960, '2013-11-23 12:49:30', 10, 1, '10.16.20.147', 0, 1, 4, 522, '2013-11-23 12:49:31', 0.00, 0),
(950, 1002, 'team44', 0, 964, '2013-11-23 12:49:45', 4, 1, '10.16.20.138', 0, 1, 1, 656, '2013-11-23 12:49:46', 0.00, 1),
(951, 1016, 'team12', 0, 960, '2013-11-23 12:49:51', 4, 1, '10.16.20.83', 1, 1, 7, 86, '2013-11-23 12:49:56', 0.00, 1),
(952, 1013, 'team6', 0, 960, '2013-11-23 12:50:18', 6, 1, '10.16.20.89', 1, 1, 4, 85, '2013-11-23 12:50:21', 0.00, 0),
(953, 1012, 'team38', 0, 960, '2013-11-23 12:50:49', 4, 0, '10.16.20.118', 1, 1, 3, 111, '2013-11-23 12:50:51', 0.00, 1),
(954, 1013, 'team34', 0, 960, '2013-11-23 12:51:02', 4, 1, '10.16.20.124', 1, 1, 4, 85, '2013-11-23 12:51:06', 0.00, 1),
(955, 1006, 'team52', 1820, 1484, '2013-11-23 12:51:22', 4, 1, '10.16.20.36', 0, 1, 5, 321, '2013-11-23 12:51:29', 0.00, 1),
(956, 1013, 'team24', 0, 960, '2013-11-23 12:51:32', 6, 1, '10.16.20.100', 1, 1, 4, 85, '2013-11-23 12:51:36', 0.00, 0),
(957, 1004, 'team33', 0, 1500, '2013-11-23 12:52:11', 4, 1, '10.16.20.126', 0, 1, 3, 3126, '2013-11-23 12:52:17', 0.00, 1),
(958, 1005, 'team39', 0, 964, '2013-11-23 12:52:29', 4, 1, '10.16.20.147', 0, 1, 4, 539, '2013-11-23 12:52:31', 0.00, 1),
(959, 1001, 'team35', 10000, 1484, '2013-11-23 12:52:56', 7, 1, '110.96.32.164', 0, 1, 0, 2155, '2013-11-23 12:53:12', 0.00, 0),
(960, 1002, 'team16', 0, 964, '2013-11-23 12:53:09', 4, 0, '10.16.20.113', 0, 1, 1, 958, '2013-11-23 12:53:11', 0.00, 1),
(961, 1001, 'team5', 0, 0, '2013-11-23 12:53:16', 11, 1, '10.16.20.92', 0, 1, 0, 688, '2013-11-23 12:53:21', 0.00, 0),
(962, 1015, 'team75', 0, 960, '2013-11-23 12:53:25', 6, 1, '10.16.20.24', 1, 1, 6, 88, '2013-11-23 12:53:26', 0.00, 0),
(963, 1014, 'team76', 0, 960, '2013-11-23 12:53:28', 6, 0, '10.16.20.54', 1, 1, 5, 88, '2013-11-23 12:53:31', 0.00, 0),
(964, 1009, 'team48', 0, 960, '2013-11-23 12:53:56', 6, 1, '10.16.20.136', 1, 1, 0, 92, '2013-11-23 12:54:01', 0.00, 0),
(965, 1001, 'team79', 0, 0, '2013-11-23 12:53:59', 11, 1, '10.16.20.55', 0, 1, 0, 652, '2013-11-23 12:54:01', 0.00, 0),
(966, 1013, 'team24', 0, 960, '2013-11-23 12:54:24', 6, 1, '10.16.20.100', 1, 1, 4, 85, '2013-11-23 12:54:26', 0.00, 0),
(967, 1001, 'team79', 444, 1484, '2013-11-23 12:54:42', 4, 1, '10.16.20.55', 0, 1, 0, 717, '2013-11-23 12:54:49', 0.00, 1),
(968, 1016, 'team69', 0, 960, '2013-11-23 12:54:58', 6, 1, '10.16.20.16', 1, 1, 7, 88, '2013-11-23 12:55:01', 0.00, 0),
(969, 1001, 'team42', 12, 976, '2013-11-23 12:55:02', 6, 1, '10.16.20.142', 0, 1, 0, 164, '2013-11-23 12:55:06', 0.00, 0),
(970, 1013, 'team6', 0, 960, '2013-11-23 12:55:05', 6, 1, '10.16.20.89', 1, 1, 4, 85, '2013-11-23 12:55:06', 0.00, 0),
(971, 1010, 'team67', 0, 960, '2013-11-23 12:55:46', 4, 1, '10.16.20.18', 1, 1, 1, 98, '2013-11-23 12:55:51', 0.00, 1),
(972, 1001, 'team5', 10000, 5392, '2013-11-23 12:55:52', 7, 1, '10.16.20.92', 0, 1, 0, 749, '2013-11-23 12:56:07', 0.00, 0),
(973, 1013, 'team69', 0, 960, '2013-11-23 12:55:52', 6, 1, '10.16.20.16', 1, 1, 4, 85, '2013-11-23 12:55:56', 0.00, 0),
(974, 1001, 'team42', 0, 976, '2013-11-23 12:56:01', 6, 1, '10.16.20.142', 0, 1, 0, 155, '2013-11-23 12:56:06', 0.00, 0),
(975, 1008, 'team23', 0, 964, '2013-11-23 12:56:23', 6, 1, '10.16.20.102', 0, 1, 7, 144, '2013-11-23 12:56:26', 0.00, 0),
(976, 1008, 'team23', 0, 964, '2013-11-23 12:56:35', 6, 0, '10.16.20.102', 0, 1, 7, 144, '2013-11-23 12:56:36', 0.00, 0),
(977, 1015, 'team12', 0, 960, '2013-11-23 12:56:43', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 12:56:46', 0.00, 0),
(978, 1011, 'team43', 0, 960, '2013-11-23 12:56:44', 6, 1, '10.16.20.140', 1, 1, 2, 92, '2013-11-23 12:56:46', 0.00, 0),
(979, 1016, 'team75', 0, 960, '2013-11-23 12:56:49', 4, 1, '10.16.20.24', 1, 1, 7, 87, '2013-11-23 12:56:51', 0.00, 1),
(980, 1002, 'team91', 1000, 964, '2013-11-23 12:57:41', 7, 1, '10.16.20.10', 0, 1, 1, 709, '2013-11-23 12:57:56', 0.00, 0),
(981, 1011, 'team51', 0, 960, '2013-11-23 12:58:11', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 12:58:16', 0.00, 0),
(982, 1008, 'team23', 0, 964, '2013-11-23 12:58:12', 6, 0, '10.16.20.102', 0, 1, 7, 167, '2013-11-23 12:58:16', 0.00, 0),
(983, 1007, 'team58', 0, 964, '2013-11-23 12:58:14', 4, 1, '10.16.20.45', 0, 1, 6, 441, '2013-11-23 12:58:16', 0.00, 1),
(984, 1011, 'team51', 0, 960, '2013-11-23 12:58:42', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 12:58:46', 0.00, 0),
(985, 1001, 'team42', 12, 976, '2013-11-23 12:58:52', 6, 1, '10.16.20.142', 0, 1, 0, 164, '2013-11-23 12:58:56', 0.00, 0),
(986, 1011, 'team48', 0, 960, '2013-11-23 12:59:07', 4, 1, '10.16.20.136', 1, 1, 2, 93, '2013-11-23 12:59:11', 0.00, 1),
(987, 1011, 'team51', 0, 960, '2013-11-23 12:59:15', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 12:59:16', 0.00, 0),
(988, 1010, 'team53', 0, 960, '2013-11-23 12:59:32', 4, 1, '10.16.20.38', 1, 1, 1, 94, '2013-11-23 12:59:36', 0.00, 1),
(989, 1013, 'team66', 0, 960, '2013-11-23 12:59:32', 4, 1, '10.16.20.22', 1, 1, 4, 85, '2013-11-23 12:59:36', 0.00, 1),
(990, 1001, 'team35', 10000, 1488, '2013-11-23 12:59:36', 7, 1, '110.96.32.164', 0, 1, 0, 2411, '2013-11-23 12:59:54', 0.00, 0),
(991, 1016, 'team70', 0, 960, '2013-11-23 12:59:46', 6, 1, '10.16.20.72', 1, 1, 7, 87, '2013-11-23 12:59:51', 0.00, 0),
(992, 1007, 'team60', 0, 1484, '2013-11-23 13:00:00', 10, 1, '10.16.20.48', 0, 1, 6, 402, '2013-11-23 13:00:01', 0.00, 0),
(993, 1011, 'team51', 0, 960, '2013-11-23 13:00:02', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 13:00:06', 0.00, 0),
(994, 1014, 'team78', 0, 960, '2013-11-23 13:00:17', 6, 1, '10.16.20.53', 1, 1, 5, 87, '2013-11-23 13:00:21', 0.00, 0),
(995, 1015, 'team43', 0, 960, '2013-11-23 13:00:45', 6, 1, '10.16.20.140', 1, 1, 6, 93, '2013-11-23 13:00:46', 0.00, 0),
(996, 1010, 'team49', 0, 960, '2013-11-23 13:01:13', 4, 1, '10.16.20.32', 1, 1, 1, 98, '2013-11-23 13:01:16', 0.00, 1),
(997, 1016, 'team19', 0, 960, '2013-11-23 13:01:17', 6, 1, '10.16.20.107', 1, 1, 7, 86, '2013-11-23 13:01:21', 0.00, 0),
(998, 1016, 'team70', 0, 960, '2013-11-23 13:01:36', 6, 1, '10.16.20.72', 1, 1, 7, 87, '2013-11-23 13:01:41', 0.00, 0),
(999, 1015, 'team34', 0, 960, '2013-11-23 13:02:01', 6, 1, '10.16.20.124', 1, 1, 6, 92, '2013-11-23 13:02:06', 0.00, 0),
(1000, 1001, 'team35', 888, 1488, '2013-11-23 13:02:04', 4, 1, '110.96.32.164', 0, 1, 0, 2504, '2013-11-23 13:02:10', 0.00, 1),
(1001, 1003, 'team88', 0, 960, '2013-11-23 13:02:04', 4, 1, '10.16.20.69', 0, 1, 2, 207, '2013-11-23 13:02:06', 0.00, 1),
(1002, 1002, 'team23', 0, 964, '2013-11-23 13:02:39', 4, 0, '10.16.20.102', 0, 1, 1, 783, '2013-11-23 13:02:41', 0.00, 1),
(1003, 1003, 'team60', 0, 1480, '2013-11-23 13:02:52', 4, 1, '10.16.20.48', 0, 1, 2, 91, '2013-11-23 13:02:56', 0.00, 1),
(1004, 1007, 'team71', 0, 964, '2013-11-23 13:03:16', 4, 0, '10.16.20.13', 0, 1, 6, 375, '2013-11-23 13:03:21', 0.00, 1),
(1005, 1003, 'team92', 0, 960, '2013-11-23 13:03:23', 6, 1, '10.16.20.11', 0, 1, 2, 80, '2013-11-23 13:03:26', 0.00, 0),
(1006, 1015, 'team34', 0, 960, '2013-11-23 13:03:32', 6, 1, '10.16.20.124', 1, 1, 6, 92, '2013-11-23 13:03:36', 0.00, 0),
(1007, 1003, 'team92', 0, 960, '2013-11-23 13:03:46', 6, 1, '10.16.20.11', 0, 1, 2, 80, '2013-11-23 13:03:51', 0.00, 0),
(1008, 1013, 'team69', 0, 960, '2013-11-23 13:03:48', 6, 1, '10.16.20.16', 1, 1, 4, 85, '2013-11-23 13:03:51', 0.00, 0),
(1009, 1003, 'team92', 0, 960, '2013-11-23 13:04:07', 4, 1, '10.16.20.11', 0, 1, 2, 80, '2013-11-23 13:04:11', 0.00, 1),
(1010, 1007, 'team10', 0, 1484, '2013-11-23 13:04:10', 10, 1, '10.16.20.99', 0, 1, 6, 431, '2013-11-23 13:04:11', 0.00, 0),
(1011, 1011, 'team51', 0, 960, '2013-11-23 13:04:16', 6, 1, '10.16.20.34', 1, 1, 2, 88, '2013-11-23 13:04:21', 0.00, 0),
(1012, 1011, 'team70', 0, 960, '2013-11-23 13:04:39', 6, 1, '10.16.20.72', 1, 1, 2, 93, '2013-11-23 13:04:41', 0.00, 0),
(1013, 1001, 'team35', 10000, 1492, '2013-11-23 13:04:56', 7, 1, '123.121.32.227', 0, 1, 0, 856, '2013-11-23 13:05:12', 0.00, 0),
(1014, 1013, 'team77', 0, 960, '2013-11-23 13:04:57', 6, 1, '10.16.20.27', 1, 1, 4, 85, '2013-11-23 13:05:01', 0.00, 0),
(1015, 1009, 'team63', 0, 960, '2013-11-23 13:04:58', 6, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 13:05:01', 0.00, 0),
(1016, 1010, 'team69', 0, 960, '2013-11-23 13:05:03', 6, 1, '10.16.20.16', 1, 1, 1, 103, '2013-11-23 13:05:06', 0.00, 0),
(1017, 1009, 'team12', 0, 960, '2013-11-23 13:05:09', 6, 1, '10.16.20.83', 1, 1, 0, 88, '2013-11-23 13:05:11', 0.00, 0),
(1018, 1016, 'team70', 0, 960, '2013-11-23 13:05:15', 4, 1, '10.16.20.72', 1, 1, 7, 87, '2013-11-23 13:05:16', 0.00, 1),
(1019, 1012, 'team43', 0, 960, '2013-11-23 13:05:18', 5, 1, '10.16.20.140', 1, 1, 3, 112, '2013-11-23 13:05:21', 0.00, 0),
(1020, 1001, 'team83', 44, 1140, '2013-11-23 13:05:55', 4, 1, '10.16.20.62', 0, 1, 0, 511, '2013-11-23 13:05:56', 0.00, 1),
(1021, 1007, 'team92', 0, 964, '2013-11-23 13:06:04', 6, 1, '10.16.20.11', 0, 1, 6, 314, '2013-11-23 13:06:06', 0.00, 0),
(1022, 1001, 'team5', 10000, 5392, '2013-11-23 13:06:20', 7, 1, '10.16.20.92', 0, 1, 0, 749, '2013-11-23 13:06:32', 0.00, 0),
(1023, 1007, 'team23', 0, 964, '2013-11-23 13:06:28', 4, 1, '10.16.20.102', 0, 1, 6, 441, '2013-11-23 13:06:31', 0.00, 1),
(1024, 1011, 'team64', 0, 960, '2013-11-23 13:06:47', 6, 1, '10.16.20.17', 1, 1, 2, 91, '2013-11-23 13:06:51', 0.00, 0),
(1025, 1012, 'team56', 0, 960, '2013-11-23 13:07:05', 6, 1, '10.16.20.41', 1, 1, 3, 110, '2013-11-23 13:07:06', 0.00, 0),
(1026, 1013, 'team24', 0, 960, '2013-11-23 13:07:08', 4, 1, '10.16.20.100', 1, 1, 4, 85, '2013-11-23 13:07:11', 0.00, 1),
(1027, 1007, 'team39', 0, 0, '2013-11-23 13:07:28', 11, 1, '10.16.20.147', 0, 1, 6, 425, '2013-11-23 13:07:31', 0.00, 0),
(1028, 1014, 'team76', 0, 960, '2013-11-23 13:07:35', 4, 0, '10.16.20.54', 1, 1, 5, 89, '2013-11-23 13:07:36', 0.00, 1),
(1029, 1013, 'team6', 0, 960, '2013-11-23 13:08:00', 4, 1, '10.16.20.89', 1, 1, 4, 85, '2013-11-23 13:08:01', 0.00, 1),
(1030, 1014, 'team77', 0, 960, '2013-11-23 13:08:03', 4, 1, '10.16.20.27', 1, 1, 5, 87, '2013-11-23 13:08:06', 0.00, 1),
(1031, 1009, 'team63', 0, 960, '2013-11-23 13:08:18', 6, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 13:08:21', 0.00, 0),
(1032, 1016, 'team69', 0, 960, '2013-11-23 13:08:24', 4, 1, '10.16.20.16', 1, 1, 7, 87, '2013-11-23 13:08:26', 0.00, 1),
(1033, 1012, 'team70', 0, 960, '2013-11-23 13:08:25', 4, 1, '10.16.20.72', 1, 1, 3, 115, '2013-11-23 13:08:26', 0.00, 1),
(1034, 1007, 'team39', 648, 960, '2013-11-23 13:08:31', 10, 1, '10.16.20.147', 0, 1, 6, 451, '2013-11-23 13:08:40', 0.00, 0),
(1035, 1006, 'team31', 2000, 960, '2013-11-23 13:09:10', 7, 0, '10.16.20.130', 0, 1, 5, 321, '2013-11-23 13:09:31', 0.00, 0),
(1036, 1016, 'team63', 0, 960, '2013-11-23 13:09:16', 6, 1, '10.16.20.50', 1, 1, 7, 82, '2013-11-23 13:09:16', 0.00, 0),
(1037, 1012, 'team78', 0, 960, '2013-11-23 13:09:38', 6, 1, '10.16.20.53', 1, 1, 3, 111, '2013-11-23 13:09:41', 0.00, 0),
(1038, 1014, 'team6', 0, 960, '2013-11-23 13:09:45', 4, 1, '10.16.20.89', 1, 1, 5, 87, '2013-11-23 13:09:46', 0.00, 1),
(1039, 1012, 'team51', 0, 960, '2013-11-23 13:09:46', 6, 1, '10.16.20.34', 1, 1, 3, 110, '2013-11-23 13:09:51', 0.00, 0),
(1040, 1004, 'team40', 0, 964, '2013-11-23 13:09:48', 6, 1, '10.16.20.146', 0, 1, 3, 523, '2013-11-23 13:09:51', 0.00, 0),
(1041, 1012, 'team43', 0, 960, '2013-11-23 13:10:14', 5, 1, '10.16.20.140', 1, 1, 3, 112, '2013-11-23 13:10:16', 0.00, 0),
(1042, 1005, 'team57', 0, 1004, '2013-11-23 13:10:16', 4, 1, '10.16.20.43', 0, 1, 4, 543, '2013-11-23 13:10:21', 0.00, 1),
(1043, 1001, 'team5', 0, 0, '2013-11-23 13:10:17', 11, 0, '10.16.20.92', 0, 1, 0, 629, '2013-11-23 13:10:21', 0.00, 0),
(1044, 1009, 'team51', 0, 960, '2013-11-23 13:10:20', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 13:10:21', 0.00, 0),
(1045, 1005, 'team23', 0, 0, '2013-11-23 13:10:39', 11, 1, '10.16.20.102', 0, 1, 4, 504, '2013-11-23 13:10:41', 0.00, 0),
(1046, 1001, 'team5', 4244, 968, '2013-11-23 13:10:50', 4, 1, '10.16.20.92', 0, 1, 0, 631, '2013-11-23 13:10:55', 0.00, 1),
(1047, 1014, 'team48', 0, 960, '2013-11-23 13:10:55', 4, 1, '10.16.20.136', 1, 1, 5, 87, '2013-11-23 13:10:56', 0.00, 1),
(1048, 1007, 'team60', 0, 0, '2013-11-23 13:11:26', 11, 1, '10.16.20.48', 0, 1, 6, 484, '2013-11-23 13:11:31', 0.00, 0),
(1049, 1009, 'team12', 0, 960, '2013-11-23 13:11:41', 6, 1, '10.16.20.83', 1, 1, 0, 88, '2013-11-23 13:11:41', 0.00, 0),
(1050, 1012, 'team51', 0, 960, '2013-11-23 13:11:51', 6, 1, '10.16.20.34', 1, 1, 3, 109, '2013-11-23 13:11:56', 0.00, 0),
(1051, 1009, 'team12', 0, 960, '2013-11-23 13:12:25', 6, 1, '10.16.20.83', 1, 1, 0, 88, '2013-11-23 13:12:26', 0.00, 0),
(1052, 1007, 'team39', 600, 960, '2013-11-23 13:12:25', 10, 1, '10.16.20.147', 0, 1, 6, 466, '2013-11-23 13:12:30', 0.00, 0),
(1053, 1005, 'team23', 0, 964, '2013-11-23 13:12:34', 4, 1, '10.16.20.102', 0, 1, 4, 509, '2013-11-23 13:12:36', 0.00, 1),
(1054, 1012, 'team51', 0, 960, '2013-11-23 13:12:38', 6, 1, '10.16.20.34', 1, 1, 3, 110, '2013-11-23 13:12:41', 0.00, 0),
(1055, 1007, 'team60', 0, 1484, '2013-11-23 13:12:42', 10, 1, '10.16.20.48', 0, 1, 6, 486, '2013-11-23 13:12:47', 0.00, 0),
(1056, 1012, 'team43', 0, 960, '2013-11-23 13:12:45', 4, 1, '10.16.20.140', 1, 1, 3, 116, '2013-11-23 13:12:46', 0.00, 1),
(1057, 1007, 'team92', 0, 964, '2013-11-23 13:12:46', 4, 1, '10.16.20.11', 0, 1, 6, 367, '2013-11-23 13:12:46', 0.00, 1),
(1058, 1014, 'team74', 0, 960, '2013-11-23 13:12:52', 6, 1, '10.16.20.21', 1, 1, 5, 85, '2013-11-23 13:12:56', 0.00, 0),
(1059, 1008, 'team55', 0, 964, '2013-11-23 13:12:59', 6, 1, '10.16.20.40', 0, 1, 7, 151, '2013-11-23 13:13:01', 0.00, 0),
(1060, 1007, 'team39', 0, 964, '2013-11-23 13:13:16', 6, 1, '10.16.20.147', 0, 1, 6, 448, '2013-11-23 13:13:21', 0.00, 0),
(1061, 1004, 'team11', 0, 960, '2013-11-23 13:13:44', 6, 0, '10.16.20.84', 0, 1, 3, 266, '2013-11-23 13:13:46', 0.00, 0),
(1062, 1016, 'team19', 0, 960, '2013-11-23 13:13:49', 6, 1, '10.16.20.107', 1, 1, 7, 87, '2013-11-23 13:13:51', 0.00, 0),
(1063, 1003, 'team11', 0, 960, '2013-11-23 13:13:59', 6, 0, '10.16.20.84', 0, 1, 2, 266, '2013-11-23 13:14:01', 0.00, 0),
(1064, 1006, 'team31', 632, 964, '2013-11-23 13:14:03', 6, 0, '10.16.20.130', 0, 1, 5, 188, '2013-11-23 13:14:07', 0.00, 0),
(1065, 1016, 'team32', 0, 960, '2013-11-23 13:14:03', 6, 1, '10.16.20.128', 1, 1, 7, 82, '2013-11-23 13:14:06', 0.00, 0),
(1066, 1016, 'team63', 0, 960, '2013-11-23 13:14:19', 6, 1, '10.16.20.50', 1, 1, 7, 81, '2013-11-23 13:14:21', 0.00, 0),
(1067, 1016, 'team32', 0, 960, '2013-11-23 13:14:20', 6, 1, '10.16.20.128', 1, 1, 7, 82, '2013-11-23 13:14:21', 0.00, 0),
(1068, 1003, 'team23', 0, 0, '2013-11-23 13:14:36', 11, 1, '10.16.20.102', 0, 1, 2, 86, '2013-11-23 13:14:36', 0.00, 0),
(1069, 1003, 'team23', 0, 960, '2013-11-23 13:15:01', 4, 1, '10.16.20.102', 0, 1, 2, 84, '2013-11-23 13:15:06', 0.00, 1),
(1070, 1006, 'team57', 576, 964, '2013-11-23 13:15:42', 6, 1, '10.16.20.43', 0, 1, 5, 283, '2013-11-23 13:15:47', 0.00, 0),
(1071, 1008, 'team88', 0, 0, '2013-11-23 13:15:47', 11, 1, '10.16.20.69', 0, 1, 7, 260, '2013-11-23 13:15:51', 0.00, 0),
(1072, 1006, 'team29', 4, 960, '2013-11-23 13:16:00', 10, 1, '10.16.20.133', 0, 1, 5, 771, '2013-11-23 13:16:01', 0.00, 0),
(1073, 1007, 'team39', 1000, 960, '2013-11-23 13:16:12', 7, 1, '10.16.20.147', 0, 1, 6, 433, '2013-11-23 13:16:26', 0.00, 0),
(1074, 1007, 'team90', 0, 964, '2013-11-23 13:16:16', 6, 1, '10.16.20.8', 0, 1, 6, 303, '2013-11-23 13:16:21', 0.00, 0),
(1075, 1013, 'team63', 0, 960, '2013-11-23 13:16:39', 6, 1, '10.16.20.50', 1, 1, 4, 95, '2013-11-23 13:16:41', 0.00, 0),
(1076, 1009, 'team73', 0, 960, '2013-11-23 13:16:45', 6, 1, '10.16.20.235', 1, 1, 0, 88, '2013-11-23 13:16:46', 0.00, 0),
(1077, 1008, 'team55', 0, 964, '2013-11-23 13:16:51', 6, 1, '10.16.20.40', 0, 1, 7, 176, '2013-11-23 13:16:51', 0.00, 0),
(1078, 1016, 'team6', 0, 960, '2013-11-23 13:17:02', 6, 1, '10.16.20.89', 1, 1, 7, 87, '2013-11-23 13:17:06', 0.00, 0),
(1079, 1007, 'team39', 1000, 960, '2013-11-23 13:17:09', 7, 1, '10.16.20.147', 0, 1, 6, 446, '2013-11-23 13:17:21', 0.00, 0),
(1080, 1015, 'team73', 0, 960, '2013-11-23 13:17:14', 6, 1, '10.16.20.235', 1, 1, 6, 87, '2013-11-23 13:17:16', 0.00, 0),
(1081, 1013, 'team70', 0, 960, '2013-11-23 13:17:34', 6, 1, '10.16.20.72', 1, 1, 4, 85, '2013-11-23 13:17:36', 0.00, 0),
(1082, 1006, 'team23', 596, 964, '2013-11-23 13:17:58', 4, 1, '10.16.20.102', 0, 1, 5, 257, '2013-11-23 13:18:02', 0.00, 1),
(1083, 1012, 'team34', 0, 960, '2013-11-23 13:18:12', 6, 1, '10.16.20.124', 1, 1, 3, 111, '2013-11-23 13:18:16', 0.00, 0),
(1084, 1001, 'team42', 4, 976, '2013-11-23 13:18:29', 6, 1, '10.16.20.142', 0, 1, 0, 142, '2013-11-23 13:18:31', 0.00, 0),
(1085, 1008, 'team55', 0, 964, '2013-11-23 13:18:32', 6, 1, '10.16.20.40', 0, 1, 7, 191, '2013-11-23 13:18:36', 0.00, 0),
(1086, 1009, 'team51', 0, 960, '2013-11-23 13:19:31', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 13:19:31', 0.00, 0),
(1087, 1012, 'team73', 0, 0, '2013-11-23 13:19:51', 11, 1, '10.16.20.235', 1, 1, 3, 122, '2013-11-23 13:19:56', 0.00, 0),
(1088, 1014, 'team53', 0, 960, '2013-11-23 13:19:55', 6, 1, '10.16.20.38', 1, 1, 5, 85, '2013-11-23 13:19:56', 0.00, 0),
(1089, 1007, 'team4', 0, 1484, '2013-11-23 13:20:13', 4, 1, '10.16.20.94', 0, 1, 6, 321, '2013-11-23 13:20:17', 0.00, 1),
(1090, 1003, 'team11', 0, 960, '2013-11-23 13:20:13', 6, 0, '10.16.20.84', 0, 1, 2, 289, '2013-11-23 13:20:16', 0.00, 0),
(1091, 1001, 'team29', 840, 964, '2013-11-23 13:20:31', 6, 1, '10.16.20.133', 0, 1, 0, 540, '2013-11-23 13:20:32', 0.00, 0),
(1092, 1012, 'team34', 0, 960, '2013-11-23 13:20:32', 6, 1, '10.16.20.124', 1, 1, 3, 110, '2013-11-23 13:20:36', 0.00, 0),
(1093, 1015, 'team43', 0, 960, '2013-11-23 13:21:02', 6, 1, '10.16.20.140', 1, 1, 6, 88, '2013-11-23 13:21:06', 0.00, 0),
(1094, 1003, 'team11', 0, 960, '2013-11-23 13:21:16', 6, 0, '10.16.20.84', 0, 1, 2, 292, '2013-11-23 13:21:21', 0.00, 0),
(1095, 1012, 'team73', 0, 960, '2013-11-23 13:21:23', 6, 1, '10.16.20.235', 1, 1, 3, 113, '2013-11-23 13:21:26', 0.00, 0),
(1096, 1003, 'team11', 0, 960, '2013-11-23 13:21:40', 6, 0, '10.16.20.84', 0, 1, 2, 292, '2013-11-23 13:21:41', 0.00, 0),
(1097, 1012, 'team73', 0, 960, '2013-11-23 13:21:48', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:21:51', 0.00, 0),
(1098, 1007, 'team39', 0, 964, '2013-11-23 13:21:48', 4, 1, '10.16.20.147', 0, 1, 6, 441, '2013-11-23 13:21:51', 0.00, 1),
(1099, 1007, 'team90', 0, 964, '2013-11-23 13:21:49', 6, 1, '10.16.20.8', 0, 1, 6, 387, '2013-11-23 13:21:51', 0.00, 0),
(1100, 1016, 'team6', 0, 960, '2013-11-23 13:21:51', 4, 1, '10.16.20.89', 1, 1, 7, 86, '2013-11-23 13:21:56', 0.00, 1),
(1101, 1013, 'team77', 0, 960, '2013-11-23 13:22:01', 4, 1, '10.16.20.27', 1, 1, 4, 85, '2013-11-23 13:22:01', 0.00, 1),
(1102, 1012, 'team73', 0, 960, '2013-11-23 13:22:01', 6, 1, '10.16.20.235', 1, 1, 3, 111, '2013-11-23 13:22:06', 0.00, 0),
(1103, 1015, 'team75', 0, 960, '2013-11-23 13:22:17', 6, 1, '10.16.20.24', 1, 1, 6, 88, '2013-11-23 13:22:21', 0.00, 0),
(1104, 1012, 'team73', 0, 960, '2013-11-23 13:22:22', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 13:22:26', 0.00, 0),
(1105, 1013, 'team70', 0, 960, '2013-11-23 13:23:00', 4, 1, '10.16.20.72', 1, 1, 4, 85, '2013-11-23 13:23:01', 0.00, 1),
(1106, 1016, 'team32', 0, 960, '2013-11-23 13:23:04', 6, 1, '10.16.20.128', 1, 1, 7, 86, '2013-11-23 13:23:06', 0.00, 0),
(1107, 1013, 'team78', 0, 960, '2013-11-23 13:23:22', 6, 1, '10.16.20.53', 1, 1, 4, 100, '2013-11-23 13:23:26', 0.00, 0),
(1108, 1008, 'team55', 0, 964, '2013-11-23 13:23:24', 6, 1, '10.16.20.40', 0, 1, 7, 155, '2013-11-23 13:23:26', 0.00, 0),
(1109, 1009, 'team24', 0, 960, '2013-11-23 13:23:47', 6, 1, '10.16.20.100', 1, 1, 0, 92, '2013-11-23 13:23:51', 0.00, 0),
(1110, 1013, 'team69', 0, 960, '2013-11-23 13:23:50', 4, 1, '10.16.20.16', 1, 1, 4, 85, '2013-11-23 13:23:51', 0.00, 1),
(1111, 1015, 'team12', 0, 960, '2013-11-23 13:24:10', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 13:24:11', 0.00, 0),
(1112, 1015, 'team73', 0, 960, '2013-11-23 13:24:11', 6, 1, '10.16.20.235', 1, 1, 6, 95, '2013-11-23 13:24:16', 0.00, 0),
(1113, 1003, 'team11', 0, 960, '2013-11-23 13:24:11', 6, 0, '10.16.20.84', 0, 1, 2, 315, '2013-11-23 13:24:16', 0.00, 0),
(1114, 1011, 'team64', 0, 960, '2013-11-23 13:24:19', 4, 1, '10.16.20.17', 1, 1, 2, 93, '2013-11-23 13:24:21', 0.00, 1),
(1115, 1012, 'team66', 0, 960, '2013-11-23 13:24:20', 6, 1, '10.16.20.22', 1, 1, 3, 112, '2013-11-23 13:24:21', 0.00, 0),
(1116, 1011, 'team70', 0, 960, '2013-11-23 13:24:26', 4, 1, '10.16.20.72', 1, 1, 2, 93, '2013-11-23 13:24:26', 0.00, 1),
(1117, 1016, 'team48', 0, 960, '2013-11-23 13:24:32', 6, 1, '10.16.20.136', 1, 1, 7, 87, '2013-11-23 13:24:36', 0.00, 0),
(1118, 1005, 'team36', 0, 964, '2013-11-23 13:24:35', 4, 0, '10.16.20.120', 0, 1, 4, 648, '2013-11-23 13:24:36', 0.00, 1),
(1119, 1014, 'team53', 0, 960, '2013-11-23 13:24:50', 6, 1, '10.16.20.38', 1, 1, 5, 87, '2013-11-23 13:24:51', 0.00, 0),
(1120, 1016, 'team38', 0, 960, '2013-11-23 13:25:10', 6, 0, '10.16.20.118', 1, 1, 7, 87, '2013-11-23 13:25:11', 0.00, 0),
(1121, 1016, 'team53', 0, 960, '2013-11-23 13:25:37', 6, 1, '10.16.20.38', 1, 1, 7, 86, '2013-11-23 13:25:41', 0.00, 0),
(1122, 1009, 'team51', 0, 960, '2013-11-23 13:25:46', 6, 1, '10.16.20.34', 1, 1, 0, 88, '2013-11-23 13:25:46', 0.00, 0),
(1123, 1006, 'team72', 0, 960, '2013-11-23 13:25:54', 10, 1, '10.16.20.14', 0, 1, 5, 199, '2013-11-23 13:25:56', 0.00, 0),
(1124, 1003, 'team11', 0, 960, '2013-11-23 13:25:58', 6, 0, '10.16.20.84', 0, 1, 2, 269, '2013-11-23 13:26:01', 0.00, 0),
(1125, 1004, 'team40', 0, 964, '2013-11-23 13:26:29', 6, 1, '10.16.20.146', 0, 1, 3, 401, '2013-11-23 13:26:31', 0.00, 0),
(1126, 1003, 'team11', 0, 960, '2013-11-23 13:27:17', 6, 0, '10.16.20.84', 0, 1, 2, 306, '2013-11-23 13:27:21', 0.00, 0),
(1127, 1010, 'team19', 0, 960, '2013-11-23 13:27:38', 6, 1, '10.16.20.107', 1, 1, 1, 82, '2013-11-23 13:27:41', 0.00, 0),
(1128, 1007, 'team90', 0, 964, '2013-11-23 13:28:13', 4, 1, '10.16.20.8', 0, 1, 6, 465, '2013-11-23 13:28:16', 0.00, 1),
(1129, 1008, 'team31', 0, 964, '2013-11-23 13:28:18', 6, 0, '10.16.20.129', 0, 1, 7, 98, '2013-11-23 13:28:21', 0.00, 0),
(1130, 1001, 'team11', 0, 960, '2013-11-23 13:30:13', 10, 0, '10.16.20.84', 0, 1, 0, 356, '2013-11-23 13:30:16', 0.00, 0),
(1131, 1013, 'team48', 0, 960, '2013-11-23 13:30:15', 6, 1, '10.16.20.136', 1, 1, 4, 89, '2013-11-23 13:30:16', 0.00, 0),
(1132, 1016, 'team76', 0, 960, '2013-11-23 13:30:21', 6, 0, '10.16.20.54', 1, 1, 7, 89, '2013-11-23 13:30:21', 0.00, 0),
(1133, 1015, 'team53', 0, 960, '2013-11-23 13:30:38', 6, 1, '10.16.20.38', 1, 1, 6, 91, '2013-11-23 13:30:41', 0.00, 0),
(1134, 1014, 'team78', 0, 960, '2013-11-23 13:30:52', 6, 1, '10.16.20.53', 1, 1, 5, 85, '2013-11-23 13:30:56', 0.00, 0),
(1135, 1009, 'team12', 0, 960, '2013-11-23 13:31:13', 4, 1, '10.16.20.83', 1, 1, 0, 88, '2013-11-23 13:31:16', 0.00, 1),
(1136, 1012, 'team66', 0, 960, '2013-11-23 13:31:50', 4, 1, '10.16.20.22', 1, 1, 3, 111, '2013-11-23 13:31:51', 0.00, 1),
(1137, 1005, 'team4', 0, 960, '2013-11-23 13:32:15', 10, 1, '10.16.20.94', 0, 1, 4, 459, '2013-11-23 13:32:16', 0.00, 0),
(1138, 1014, 'team32', 0, 960, '2013-11-23 13:32:16', 6, 1, '10.16.20.128', 1, 1, 5, 86, '2013-11-23 13:32:16', 0.00, 0),
(1139, 1013, 'team63', 0, 960, '2013-11-23 13:32:21', 6, 1, '10.16.20.50', 1, 1, 4, 85, '2013-11-23 13:32:26', 0.00, 0),
(1140, 1012, 'team49', 0, 960, '2013-11-23 13:32:43', 4, 1, '10.16.20.32', 1, 1, 3, 115, '2013-11-23 13:32:46', 0.00, 1),
(1141, 1008, 'team31', 0, 964, '2013-11-23 13:32:43', 6, 0, '10.16.20.129', 0, 1, 7, 101, '2013-11-23 13:32:46', 0.00, 0),
(1142, 1016, 'team63', 0, 960, '2013-11-23 13:32:48', 6, 1, '10.16.20.50', 1, 1, 7, 82, '2013-11-23 13:32:51', 0.00, 0),
(1143, 1009, 'team24', 0, 960, '2013-11-23 13:33:13', 6, 1, '10.16.20.100', 1, 1, 0, 92, '2013-11-23 13:33:16', 0.00, 0),
(1144, 1006, 'team16', 608, 964, '2013-11-23 13:33:15', 4, 0, '10.16.20.113', 0, 1, 5, 259, '2013-11-23 13:33:18', 0.00, 1),
(1145, 1008, 'team31', 0, 964, '2013-11-23 13:33:33', 6, 0, '10.16.20.129', 0, 1, 7, 103, '2013-11-23 13:33:36', 0.00, 0),
(1146, 1013, 'team48', 0, 960, '2013-11-23 13:33:38', 6, 1, '10.16.20.136', 1, 1, 4, 88, '2013-11-23 13:33:41', 0.00, 0),
(1147, 1009, 'team24', 0, 960, '2013-11-23 13:33:46', 6, 1, '10.16.20.100', 1, 1, 0, 88, '2013-11-23 13:33:46', 0.00, 0),
(1148, 1016, 'team76', 0, 960, '2013-11-23 13:34:30', 6, 0, '10.16.20.54', 1, 1, 7, 89, '2013-11-23 13:34:31', 0.00, 0),
(1149, 1008, 'team31', 0, 964, '2013-11-23 13:34:35', 6, 1, '10.16.20.129', 0, 1, 7, 101, '2013-11-23 13:34:36', 0.00, 0),
(1150, 1007, 'team40', 0, 964, '2013-11-23 13:34:36', 4, 1, '10.16.20.146', 0, 1, 6, 439, '2013-11-23 13:34:36', 0.00, 1),
(1151, 1014, 'team75', 0, 960, '2013-11-23 13:34:39', 6, 1, '10.16.20.24', 1, 1, 5, 87, '2013-11-23 13:34:41', 0.00, 0),
(1152, 1012, 'team64', 0, 960, '2013-11-23 13:34:56', 6, 1, '10.16.20.17', 1, 1, 3, 110, '2013-11-23 13:34:56', 0.00, 0),
(1153, 1013, 'team12', 0, 960, '2013-11-23 13:34:57', 6, 1, '10.16.20.83', 1, 1, 4, 100, '2013-11-23 13:35:01', 0.00, 0),
(1154, 1013, 'team63', 0, 960, '2013-11-23 13:34:58', 4, 1, '10.16.20.50', 1, 1, 4, 85, '2013-11-23 13:35:01', 0.00, 1),
(1155, 1002, 'team42', 0, 964, '2013-11-23 13:35:03', 4, 1, '10.16.20.142', 0, 1, 1, 932, '2013-11-23 13:35:06', 0.00, 1),
(1156, 1012, 'team32', 0, 960, '2013-11-23 13:35:06', 6, 1, '10.16.20.128', 1, 1, 3, 111, '2013-11-23 13:35:06', 0.00, 0),
(1157, 1005, 'team4', 4, 964, '2013-11-23 13:35:07', 4, 1, '10.16.20.94', 0, 1, 4, 462, '2013-11-23 13:35:11', 0.00, 1),
(1158, 1002, 'team39', 0, 964, '2013-11-23 13:35:08', 6, 1, '10.16.20.147', 0, 1, 1, 829, '2013-11-23 13:35:11', 0.00, 0),
(1159, 1006, 'team57', 2000, 0, '2013-11-23 13:35:33', 8, 1, '10.16.20.43', 0, 1, 5, 421, '2013-11-23 13:35:44', 0.00, 0),
(1160, 1007, 'team46', 0, 960, '2013-11-23 13:35:33', 10, 1, '10.16.20.101', 0, 1, 6, 416, '2013-11-23 13:35:36', 0.00, 0),
(1161, 1016, 'team53', 0, 960, '2013-11-23 13:36:12', 6, 1, '10.16.20.38', 1, 1, 7, 86, '2013-11-23 13:36:16', 0.00, 0),
(1162, 1006, 'team57', 0, 1348, '2013-11-23 13:36:19', 10, 1, '10.16.20.43', 0, 1, 5, 418, '2013-11-23 13:36:21', 0.00, 0),
(1163, 1008, 'team31', 0, 964, '2013-11-23 13:36:23', 6, 1, '10.16.20.129', 0, 1, 7, 98, '2013-11-23 13:36:26', 0.00, 0),
(1164, 1002, 'team29', 0, 964, '2013-11-23 13:36:52', 4, 1, '10.16.20.133', 0, 1, 1, 783, '2013-11-23 13:36:56', 0.00, 1),
(1165, 1005, 'team16', 0, 1004, '2013-11-23 13:36:52', 4, 1, '10.16.20.113', 0, 1, 4, 517, '2013-11-23 13:36:56', 0.00, 1),
(1166, 1002, 'team39', 0, 964, '2013-11-23 13:36:56', 6, 1, '10.16.20.147', 0, 1, 1, 803, '2013-11-23 13:37:01', 0.00, 0),
(1167, 1001, 'team14', 4496, 964, '2013-11-23 13:37:14', 6, 0, '10.16.20.117', 0, 1, 0, 622, '2013-11-23 13:37:21', 0.00, 0),
(1168, 1005, 'team84', 0, 964, '2013-11-23 13:37:27', 6, 1, '10.16.20.60', 0, 1, 4, 321, '2013-11-23 13:37:31', 0.00, 0),
(1169, 1006, 'team58', 1760, 1484, '2013-11-23 13:37:45', 6, 1, '10.16.20.45', 0, 1, 5, 305, '2013-11-23 13:37:49', 0.00, 0),
(1170, 1012, 'team64', 0, 960, '2013-11-23 13:37:56', 6, 1, '10.16.20.17', 1, 1, 3, 110, '2013-11-23 13:37:56', 0.00, 0),
(1171, 1003, 'team31', 0, 960, '2013-11-23 13:37:59', 6, 1, '10.16.20.129', 0, 1, 2, 79, '2013-11-23 13:38:01', 0.00, 0),
(1172, 1009, 'team43', 0, 0, '2013-11-23 13:38:11', 11, 1, '10.16.20.140', 1, 1, 0, 87, '2013-11-23 13:38:16', 0.00, 0),
(1173, 1016, 'team76', 0, 960, '2013-11-23 13:38:33', 6, 0, '10.16.20.54', 1, 1, 7, 88, '2013-11-23 13:38:36', 0.00, 0),
(1174, 1012, 'team64', 0, 960, '2013-11-23 13:39:01', 4, 1, '10.16.20.17', 1, 1, 3, 111, '2013-11-23 13:39:01', 0.00, 1),
(1175, 1008, 'team55', 3240, 964, '2013-11-23 13:39:21', 6, 1, '10.16.20.40', 0, 1, 7, 139, '2013-11-23 13:39:29', 0.00, 0),
(1176, 1001, 'team14', 3852, 964, '2013-11-23 13:39:22', 4, 0, '10.16.20.117', 0, 1, 0, 670, '2013-11-23 13:39:31', 0.00, 1),
(1177, 1009, 'team43', 0, 960, '2013-11-23 13:39:24', 6, 1, '10.16.20.140', 1, 1, 0, 88, '2013-11-23 13:39:26', 0.00, 0),
(1178, 1012, 'team53', 0, 960, '2013-11-23 13:39:24', 6, 1, '10.16.20.38', 1, 1, 3, 110, '2013-11-23 13:39:26', 0.00, 0),
(1179, 1008, 'team23', 4460, 964, '2013-11-23 13:39:25', 4, 1, '10.16.20.102', 0, 1, 7, 135, '2013-11-23 13:39:38', 0.00, 1),
(1180, 1005, 'team84', 0, 964, '2013-11-23 13:39:37', 6, 1, '10.16.20.60', 0, 1, 4, 323, '2013-11-23 13:39:42', 0.00, 0),
(1181, 1015, 'team32', 0, 960, '2013-11-23 13:40:18', 6, 1, '10.16.20.128', 1, 1, 6, 91, '2013-11-23 13:40:22', 0.00, 0),
(1182, 1007, 'team42', 0, 964, '2013-11-23 13:40:44', 4, 1, '10.16.20.142', 0, 1, 6, 441, '2013-11-23 13:40:47', 0.00, 1),
(1183, 1007, 'team29', 0, 964, '2013-11-23 13:40:47', 4, 1, '10.16.20.133', 0, 1, 6, 437, '2013-11-23 13:40:52', 0.00, 1),
(1184, 1008, 'team23', 6016, 964, '2013-11-23 13:40:52', 4, 0, '10.16.20.102', 0, 1, 7, 135, '2013-11-23 13:41:10', 0.00, 1),
(1185, 1009, 'team48', 0, 960, '2013-11-23 13:41:02', 6, 1, '10.16.20.136', 1, 1, 0, 88, '2013-11-23 13:41:07', 0.00, 0),
(1186, 1002, 'team28', 0, 964, '2013-11-23 13:41:12', 4, 0, '10.16.20.134', 0, 1, 1, 783, '2013-11-23 13:41:17', 0.00, 1),
(1187, 1002, 'team40', 0, 964, '2013-11-23 13:41:18', 4, 1, '10.16.20.146', 0, 1, 1, 925, '2013-11-23 13:41:22', 0.00, 1),
(1188, 1010, 'team69', 0, 960, '2013-11-23 13:41:20', 6, 1, '10.16.20.16', 1, 1, 1, 104, '2013-11-23 13:41:22', 0.00, 0),
(1189, 1006, 'team58', 1840, 1484, '2013-11-23 13:41:24', 4, 1, '10.16.20.45', 0, 1, 5, 378, '2013-11-23 13:41:30', 0.00, 1),
(1190, 1005, 'team84', 0, 964, '2013-11-23 13:41:45', 6, 1, '10.16.20.60', 0, 1, 4, 321, '2013-11-23 13:41:47', 0.00, 0),
(1191, 1008, 'team23', 6032, 964, '2013-11-23 13:41:48', 4, 0, '10.16.20.102', 0, 1, 7, 135, '2013-11-23 13:42:05', 0.00, 1),
(1192, 1012, 'team32', 0, 960, '2013-11-23 13:41:52', 6, 1, '10.16.20.128', 1, 1, 3, 111, '2013-11-23 13:41:57', 0.00, 0),
(1193, 1002, 'team39', 0, 964, '2013-11-23 13:42:12', 4, 1, '10.16.20.147', 0, 1, 1, 806, '2013-11-23 13:42:17', 0.00, 1),
(1194, 1005, 'team29', 0, 964, '2013-11-23 13:42:13', 4, 1, '10.16.20.133', 0, 1, 4, 509, '2013-11-23 13:42:17', 0.00, 1),
(1195, 1001, 'team54', 0, 976, '2013-11-23 13:42:24', 10, 1, '10.16.20.39', 0, 1, 0, 484, '2013-11-23 13:42:27', 0.00, 0),
(1196, 1006, 'team29', 588, 964, '2013-11-23 13:42:44', 4, 1, '10.16.20.133', 0, 1, 5, 253, '2013-11-23 13:42:48', 0.00, 1),
(1197, 1013, 'team51', 0, 960, '2013-11-23 13:42:58', 6, 1, '10.16.20.34', 1, 1, 4, 85, '2013-11-23 13:43:02', 0.00, 0),
(1198, 1016, 'team38', 0, 960, '2013-11-23 13:43:03', 4, 0, '10.16.20.118', 1, 1, 7, 87, '2013-11-23 13:43:07', 0.00, 1),
(1199, 1001, 'team16', 12, 976, '2013-11-23 13:43:03', 6, 1, '10.16.20.113', 0, 1, 0, 181, '2013-11-23 13:43:07', 0.00, 0),
(1200, 1013, 'team51', 0, 960, '2013-11-23 13:43:21', 6, 1, '10.16.20.34', 1, 1, 4, 85, '2013-11-23 13:43:22', 0.00, 0),
(1201, 1015, 'team6', 0, 960, '2013-11-23 13:43:39', 6, 1, '10.16.20.89', 1, 1, 6, 91, '2013-11-23 13:43:42', 0.00, 0),
(1202, 1001, 'team54', 0, 976, '2013-11-23 13:44:01', 10, 1, '10.16.20.39', 0, 1, 0, 491, '2013-11-23 13:44:02', 0.00, 0),
(1203, 1005, 'team28', 0, 964, '2013-11-23 13:44:01', 4, 0, '10.16.20.134', 0, 1, 4, 509, '2013-11-23 13:44:02', 0.00, 1),
(1204, 1006, 'team36', 616, 964, '2013-11-23 13:44:29', 4, 0, '10.16.20.120', 0, 1, 5, 277, '2013-11-23 13:44:33', 0.00, 1),
(1205, 1014, 'team74', 0, 960, '2013-11-23 13:44:33', 6, 1, '10.16.20.21', 1, 1, 5, 87, '2013-11-23 13:44:37', 0.00, 0),
(1206, 1012, 'team24', 0, 960, '2013-11-23 13:45:32', 6, 1, '10.16.20.100', 1, 1, 3, 112, '2013-11-23 13:45:37', 0.00, 0),
(1207, 1013, 'team64', 0, 960, '2013-11-23 13:45:39', 4, 1, '10.16.20.17', 1, 1, 4, 85, '2013-11-23 13:45:42', 0.00, 1),
(1208, 1012, 'team53', 0, 960, '2013-11-23 13:45:51', 6, 1, '10.16.20.38', 1, 1, 3, 111, '2013-11-23 13:45:52', 0.00, 0),
(1209, 1008, 'team31', 7000, 964, '2013-11-23 13:46:08', 7, 0, '10.16.20.130', 0, 1, 7, 140, '2013-11-23 13:46:49', 0.00, 0),
(1210, 1011, 'team56', 0, 0, '2013-11-23 13:46:16', 11, 1, '10.16.20.41', 1, 1, 2, 67, '2013-11-23 13:46:17', 0.00, 0),
(1211, 1016, 'team77', 0, 960, '2013-11-23 13:46:39', 6, 1, '10.16.20.27', 1, 1, 7, 86, '2013-11-23 13:46:42', 0.00, 0),
(1212, 1012, 'team24', 0, 960, '2013-11-23 13:47:02', 6, 1, '10.16.20.100', 1, 1, 3, 111, '2013-11-23 13:47:07', 0.00, 0),
(1213, 1008, 'team10', 0, 964, '2013-11-23 13:47:08', 6, 0, '10.16.20.99', 0, 1, 7, 162, '2013-11-23 13:47:12', 0.00, 0),
(1214, 1012, 'team73', 0, 960, '2013-11-23 13:47:12', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:47:17', 0.00, 0),
(1215, 1016, 'team34', 0, 960, '2013-11-23 13:47:25', 6, 1, '10.16.20.124', 1, 1, 7, 86, '2013-11-23 13:47:27', 0.00, 0),
(1216, 1009, 'team76', 0, 960, '2013-11-23 13:47:55', 4, 0, '10.16.20.54', 1, 1, 0, 90, '2013-11-23 13:47:57', 0.00, 1),
(1217, 1011, 'team56', 0, 0, '2013-11-23 13:47:57', 11, 1, '10.16.20.41', 1, 1, 2, 67, '2013-11-23 13:48:02', 0.00, 0),
(1218, 1008, 'team31', 7000, 964, '2013-11-23 13:48:06', 7, 0, '10.16.20.130', 0, 1, 7, 149, '2013-11-23 13:48:41', 0.00, 0),
(1219, 1010, 'team19', 0, 960, '2013-11-23 13:48:52', 6, 1, '10.16.20.107', 1, 1, 1, 106, '2013-11-23 13:48:57', 0.00, 0),
(1220, 1015, 'team32', 0, 960, '2013-11-23 13:48:57', 6, 1, '10.16.20.128', 1, 1, 6, 91, '2013-11-23 13:49:02', 0.00, 0),
(1221, 1008, 'team31', 6048, 964, '2013-11-23 13:49:12', 4, 0, '10.16.20.130', 0, 1, 7, 150, '2013-11-23 13:49:31', 0.00, 1),
(1222, 1001, 'team46', 0, 1484, '2013-11-23 13:49:21', 10, 1, '10.16.20.101', 0, 1, 0, 498, '2013-11-23 13:49:22', 0.00, 0),
(1223, 1006, 'team57', 0, 1348, '2013-11-23 13:49:32', 10, 1, '10.16.20.43', 0, 1, 5, 420, '2013-11-23 13:49:37', 0.00, 0),
(1224, 1012, 'team24', 0, 960, '2013-11-23 13:49:52', 6, 1, '10.16.20.100', 1, 1, 3, 110, '2013-11-23 13:49:57', 0.00, 0),
(1225, 1001, 'team84', 3368, 964, '2013-11-23 13:50:02', 4, 1, '10.16.20.60', 0, 1, 0, 747, '2013-11-23 13:50:10', 0.00, 1),
(1226, 1012, 'team53', 0, 960, '2013-11-23 13:50:09', 4, 1, '10.16.20.38', 1, 1, 3, 111, '2013-11-23 13:50:12', 0.00, 1),
(1227, 1010, 'team73', 0, 960, '2013-11-23 13:50:15', 6, 1, '10.16.20.235', 1, 1, 1, 111, '2013-11-23 13:50:17', 0.00, 0),
(1228, 1012, 'team56', 0, 960, '2013-11-23 13:50:27', 6, 1, '10.16.20.41', 1, 1, 3, 110, '2013-11-23 13:50:32', 0.00, 0),
(1229, 1014, 'team32', 0, 960, '2013-11-23 13:50:40', 6, 1, '10.16.20.128', 1, 1, 5, 91, '2013-11-23 13:50:42', 0.00, 0),
(1230, 1006, 'team57', 2000, 0, '2013-11-23 13:50:47', 8, 1, '10.16.20.43', 0, 1, 5, 423, '2013-11-23 13:50:51', 0.00, 0),
(1231, 1006, 'team28', 0, 0, '2013-11-23 13:50:51', 11, 0, '10.16.20.134', 0, 1, 5, 272, '2013-11-23 13:50:52', 0.00, 0),
(1232, 1001, 'team46', 0, 1484, '2013-11-23 13:50:54', 10, 1, '10.16.20.101', 0, 1, 0, 499, '2013-11-23 13:50:57', 0.00, 0),
(1233, 1012, 'team73', 0, 960, '2013-11-23 13:51:35', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:51:37', 0.00, 0),
(1234, 1011, 'team56', 0, 960, '2013-11-23 13:51:36', 4, 1, '10.16.20.41', 1, 1, 2, 92, '2013-11-23 13:51:37', 0.00, 1),
(1235, 1016, 'team34', 0, 960, '2013-11-23 13:51:50', 6, 1, '10.16.20.124', 1, 1, 7, 87, '2013-11-23 13:51:52', 0.00, 0),
(1236, 1012, 'team73', 0, 960, '2013-11-23 13:51:57', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:52:02', 0.00, 0),
(1237, 1006, 'team28', 596, 964, '2013-11-23 13:51:58', 4, 0, '10.16.20.134', 0, 1, 5, 272, '2013-11-23 13:52:03', 0.00, 1),
(1238, 1014, 'team75', 0, 960, '2013-11-23 13:52:39', 6, 1, '10.16.20.24', 1, 1, 5, 87, '2013-11-23 13:52:42', 0.00, 0),
(1239, 1012, 'team56', 0, 960, '2013-11-23 13:52:43', 4, 1, '10.16.20.41', 1, 1, 3, 115, '2013-11-23 13:52:47', 0.00, 1),
(1240, 1012, 'team73', 0, 960, '2013-11-23 13:52:53', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:52:57', 0.00, 0),
(1241, 1001, 'team54', 0, 972, '2013-11-23 13:53:04', 6, 1, '10.16.20.39', 0, 1, 0, 479, '2013-11-23 13:53:07', 0.00, 0),
(1242, 1012, 'team73', 0, 960, '2013-11-23 13:53:13', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:53:17', 0.00, 0),
(1243, 1015, 'team49', 0, 960, '2013-11-23 13:53:15', 6, 1, '10.16.20.32', 1, 1, 6, 92, '2013-11-23 13:53:17', 0.00, 0),
(1244, 1010, 'team66', 0, 960, '2013-11-23 13:53:24', 6, 1, '10.16.20.22', 1, 1, 1, 94, '2013-11-23 13:53:27', 0.00, 0),
(1245, 1001, 'team31', 0, 964, '2013-11-23 13:53:28', 10, 1, '10.16.20.130', 0, 1, 0, 509, '2013-11-23 13:53:32', 0.00, 0),
(1246, 1012, 'team73', 0, 960, '2013-11-23 13:53:30', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:53:32', 0.00, 0),
(1247, 1016, 'team64', 0, 960, '2013-11-23 13:53:42', 4, 1, '10.16.20.17', 1, 1, 7, 87, '2013-11-23 13:53:47', 0.00, 1),
(1248, 1001, 'team54', 4228, 964, '2013-11-23 13:53:49', 4, 1, '10.16.20.39', 0, 1, 0, 747, '2013-11-23 13:53:56', 0.00, 1),
(1249, 1009, 'team69', 0, 960, '2013-11-23 13:53:53', 4, 1, '10.16.20.16', 1, 1, 0, 88, '2013-11-23 13:53:57', 0.00, 1),
(1250, 1012, 'team73', 0, 960, '2013-11-23 13:53:56', 6, 1, '10.16.20.235', 1, 1, 3, 109, '2013-11-23 13:53:57', 0.00, 0),
(1251, 1004, 'team79', 4, 1496, '2013-11-23 13:54:00', 6, 1, '10.16.20.55', 0, 1, 3, 1993, '2013-11-23 13:54:03', 0.00, 0),
(1252, 1005, 'team31', 0, 964, '2013-11-23 13:54:03', 4, 0, '10.16.20.130', 0, 1, 4, 509, '2013-11-23 13:54:07', 0.00, 1),
(1253, 1008, 'team55', 5832, 964, '2013-11-23 13:54:09', 4, 1, '10.16.20.40', 0, 1, 7, 137, '2013-11-23 13:54:25', 0.00, 1),
(1254, 1001, 'team46', 632, 1484, '2013-11-23 13:54:11', 6, 1, '10.16.20.101', 0, 1, 0, 498, '2013-11-23 13:54:15', 0.00, 0),
(1255, 1010, 'team43', 0, 960, '2013-11-23 13:54:28', 6, 1, '10.16.20.140', 1, 1, 1, 106, '2013-11-23 13:54:32', 0.00, 0);
INSERT INTO `solution` (`solution_id`, `problem_id`, `user_id`, `time`, `memory`, `in_date`, `result`, `language`, `ip`, `contest_id`, `valid`, `num`, `code_length`, `judgetime`, `pass_rate`, `balloon`) VALUES
(1256, 1002, 'team91', 1000, 964, '2013-11-23 13:54:39', 7, 1, '10.16.20.10', 0, 1, 1, 1032, '2013-11-23 13:54:52', 0.00, 0),
(1257, 1014, 'team12', 0, 960, '2013-11-23 13:54:44', 6, 1, '10.16.20.83', 1, 1, 5, 80, '2013-11-23 13:54:47', 0.00, 0),
(1258, 1013, 'team51', 0, 960, '2013-11-23 13:55:00', 6, 1, '10.16.20.34', 1, 1, 4, 85, '2013-11-23 13:55:02', 0.00, 0),
(1259, 1013, 'team67', 0, 960, '2013-11-23 13:55:26', 4, 1, '10.16.20.18', 1, 1, 4, 85, '2013-11-23 13:55:27', 0.00, 1),
(1260, 1008, 'team7', 6188, 964, '2013-11-23 13:55:28', 4, 1, '10.16.20.87', 0, 1, 7, 136, '2013-11-23 13:55:47', 0.00, 1),
(1261, 1015, 'team6', 0, 960, '2013-11-23 13:55:29', 4, 1, '10.16.20.89', 1, 1, 6, 91, '2013-11-23 13:55:32', 0.00, 1),
(1262, 1016, 'team63', 0, 960, '2013-11-23 13:55:49', 4, 1, '10.16.20.50', 1, 1, 7, 82, '2013-11-23 13:55:52', 0.00, 1),
(1263, 1013, 'team48', 0, 960, '2013-11-23 13:56:16', 4, 1, '10.16.20.136', 1, 1, 4, 85, '2013-11-23 13:56:17', 0.00, 1),
(1264, 1012, 'team73', 0, 960, '2013-11-23 13:56:35', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:56:37', 0.00, 0),
(1265, 1001, 'team46', 772, 1484, '2013-11-23 13:56:36', 6, 1, '10.16.20.101', 0, 1, 0, 499, '2013-11-23 13:56:41', 0.00, 0),
(1266, 1012, 'team73', 0, 960, '2013-11-23 13:57:01', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:57:02', 0.00, 0),
(1267, 1013, 'team78', 0, 960, '2013-11-23 13:57:04', 6, 1, '10.16.20.53', 1, 1, 4, 85, '2013-11-23 13:57:07', 0.00, 0),
(1268, 1009, 'team70', 0, 960, '2013-11-23 13:57:06', 6, 1, '10.16.20.72', 1, 1, 0, 88, '2013-11-23 13:57:07', 0.00, 0),
(1269, 1004, 'team83', 0, 964, '2013-11-23 13:57:09', 4, 1, '10.16.20.62', 0, 1, 3, 876, '2013-11-23 13:57:12', 0.00, 1),
(1270, 1006, 'team11', 2000, 8296, '2013-11-23 13:57:10', 7, 1, '10.16.20.84', 0, 1, 5, 347, '2013-11-23 13:57:16', 0.00, 0),
(1271, 1012, 'team73', 0, 960, '2013-11-23 13:57:31', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:57:32', 0.00, 0),
(1272, 1011, 'team43', 0, 960, '2013-11-23 13:57:40', 6, 1, '10.16.20.140', 1, 1, 2, 91, '2013-11-23 13:57:42', 0.00, 0),
(1273, 1010, 'team48', 0, 960, '2013-11-23 13:57:43', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 13:57:47', 0.00, 0),
(1274, 1006, 'team31', 624, 964, '2013-11-23 13:57:47', 4, 0, '10.16.20.130', 0, 1, 5, 257, '2013-11-23 13:57:53', 0.00, 1),
(1275, 1009, 'team70', 0, 960, '2013-11-23 13:57:53', 4, 1, '10.16.20.72', 1, 1, 0, 88, '2013-11-23 13:57:57', 0.00, 1),
(1276, 1012, 'team73', 0, 960, '2013-11-23 13:58:07', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:58:12', 0.00, 0),
(1277, 1013, 'team51', 0, 960, '2013-11-23 13:58:11', 6, 1, '10.16.20.34', 1, 1, 4, 86, '2013-11-23 13:58:12', 0.00, 0),
(1278, 1003, 'team84', 0, 0, '2013-11-23 13:58:18', 11, 1, '10.16.20.60', 0, 1, 2, 227, '2013-11-23 13:58:22', 0.00, 0),
(1279, 1006, 'team11', 2000, 8296, '2013-11-23 13:58:34', 7, 1, '10.16.20.84', 0, 1, 5, 349, '2013-11-23 13:58:41', 0.00, 0),
(1280, 1012, 'team73', 0, 960, '2013-11-23 13:58:49', 6, 1, '10.16.20.235', 1, 1, 3, 112, '2013-11-23 13:58:52', 0.00, 0),
(1281, 1016, 'team32', 0, 960, '2013-11-23 13:59:03', 6, 1, '10.16.20.128', 1, 1, 7, 82, '2013-11-23 13:59:07', 0.00, 0),
(1282, 1002, 'team92', 1000, 964, '2013-11-23 13:59:03', 7, 1, '10.16.20.11', 0, 1, 1, 648, '2013-11-23 13:59:17', 0.00, 0),
(1283, 1005, 'team84', 0, 964, '2013-11-23 13:59:20', 4, 1, '10.16.20.60', 0, 1, 4, 509, '2013-11-23 13:59:22', 0.00, 1),
(1284, 1012, 'team73', 0, 960, '2013-11-23 13:59:34', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 13:59:37', 0.00, 0),
(1285, 1003, 'team31', 0, 960, '2013-11-23 13:59:38', 4, 0, '10.16.20.130', 0, 1, 2, 84, '2013-11-23 13:59:42', 0.00, 1),
(1286, 1016, 'team77', 0, 960, '2013-11-23 13:59:45', 4, 1, '10.16.20.27', 1, 1, 7, 86, '2013-11-23 13:59:47', 0.00, 1),
(1287, 1012, 'team73', 0, 960, '2013-11-23 14:00:07', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 14:00:07', 0.00, 0),
(1288, 1015, 'team34', 0, 960, '2013-11-23 14:00:20', 4, 1, '10.16.20.124', 1, 1, 6, 92, '2013-11-23 14:00:22', 0.00, 1),
(1289, 1010, 'team69', 0, 960, '2013-11-23 14:00:21', 6, 1, '10.16.20.16', 1, 1, 1, 104, '2013-11-23 14:00:22', 0.00, 0),
(1290, 1007, 'team36', 0, 964, '2013-11-23 14:00:37', 4, 0, '10.16.20.120', 0, 1, 6, 455, '2013-11-23 14:00:42', 0.00, 1),
(1291, 1007, 'team31', 0, 964, '2013-11-23 14:00:40', 4, 0, '10.16.20.130', 0, 1, 6, 441, '2013-11-23 14:00:42', 0.00, 1),
(1292, 1010, 'team63', 0, 960, '2013-11-23 14:00:43', 4, 1, '10.16.20.50', 1, 1, 1, 94, '2013-11-23 14:00:47', 0.00, 1),
(1293, 1012, 'team73', 0, 960, '2013-11-23 14:00:47', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 14:00:52', 0.00, 0),
(1294, 1014, 'team64', 0, 960, '2013-11-23 14:00:50', 6, 1, '10.16.20.17', 1, 1, 5, 81, '2013-11-23 14:00:52', 0.00, 0),
(1295, 1010, 'team19', 0, 960, '2013-11-23 14:01:11', 6, 1, '10.16.20.107', 1, 1, 1, 105, '2013-11-23 14:01:12', 0.00, 0),
(1296, 1012, 'team73', 0, 960, '2013-11-23 14:01:13', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 14:01:17', 0.00, 0),
(1297, 1012, 'team73', 0, 960, '2013-11-23 14:01:38', 6, 1, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 14:01:42', 0.00, 0),
(1298, 1010, 'team74', 0, 960, '2013-11-23 14:01:55', 6, 1, '10.16.20.21', 1, 1, 1, 85, '2013-11-23 14:01:57', 0.00, 0),
(1299, 1012, 'team73', 0, 960, '2013-11-23 14:02:06', 6, 0, '10.16.20.235', 1, 1, 3, 110, '2013-11-23 14:02:07', 0.00, 0),
(1300, 1016, 'team66', 0, 960, '2013-11-23 14:02:22', 6, 1, '10.16.20.22', 1, 1, 7, 87, '2013-11-23 14:02:27', 0.00, 0),
(1301, 1004, 'team79', 0, 1496, '2013-11-23 14:02:30', 6, 1, '10.16.20.55', 0, 1, 3, 2096, '2013-11-23 14:02:33', 0.00, 0),
(1302, 1011, 'team43', 0, 960, '2013-11-23 14:02:36', 6, 1, '10.16.20.140', 1, 1, 2, 93, '2013-11-23 14:02:37', 0.00, 0),
(1303, 1010, 'team75', 0, 960, '2013-11-23 14:02:45', 6, 1, '10.16.20.24', 1, 1, 1, 94, '2013-11-23 14:02:47', 0.00, 0),
(1304, 1015, 'team49', 0, 960, '2013-11-23 14:03:01', 6, 1, '10.16.20.32', 1, 1, 6, 92, '2013-11-23 14:03:02', 0.00, 0),
(1305, 1006, 'team7', 584, 964, '2013-11-23 14:03:09', 6, 1, '10.16.20.87', 0, 1, 5, 257, '2013-11-23 14:03:13', 0.00, 0),
(1306, 1012, 'team73', 0, 960, '2013-11-23 14:03:10', 4, 0, '10.16.20.235', 1, 1, 3, 111, '2013-11-23 14:03:12', 0.00, 1),
(1307, 1010, 'team76', 0, 960, '2013-11-23 14:03:21', 6, 0, '10.16.20.54', 1, 1, 1, 108, '2013-11-23 14:03:22', 0.00, 0),
(1308, 1010, 'team43', 0, 960, '2013-11-23 14:03:48', 6, 1, '10.16.20.140', 1, 1, 1, 105, '2013-11-23 14:03:52', 0.00, 0),
(1309, 1001, 'team18', 12, 976, '2013-11-23 14:03:49', 6, 0, '10.16.20.109', 0, 1, 0, 184, '2013-11-23 14:03:52', 0.00, 0),
(1310, 1002, 'team36', 0, 964, '2013-11-23 14:04:03', 4, 0, '10.16.20.120', 0, 1, 1, 972, '2013-11-23 14:04:07', 0.00, 1),
(1311, 1006, 'team7', 596, 964, '2013-11-23 14:04:44', 4, 1, '10.16.20.87', 0, 1, 5, 259, '2013-11-23 14:04:48', 0.00, 1),
(1312, 1015, 'team67', 0, 960, '2013-11-23 14:05:15', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:05:17', 0.00, 0),
(1313, 1012, 'team34', 0, 960, '2013-11-23 14:05:17', 6, 1, '10.16.20.124', 1, 1, 3, 110, '2013-11-23 14:05:22', 0.00, 0),
(1314, 1010, 'team38', 0, 960, '2013-11-23 14:06:03', 6, 0, '10.16.20.118', 1, 1, 1, 104, '2013-11-23 14:06:07', 0.00, 0),
(1315, 1001, 'team18', 164, 976, '2013-11-23 14:06:14', 4, 0, '10.16.20.109', 0, 1, 0, 188, '2013-11-23 14:06:18', 0.00, 1),
(1316, 1012, 'team34', 0, 960, '2013-11-23 14:06:36', 6, 1, '10.16.20.124', 1, 1, 3, 109, '2013-11-23 14:06:37', 0.00, 0),
(1317, 1011, 'team43', 0, 960, '2013-11-23 14:06:39', 4, 1, '10.16.20.140', 1, 1, 2, 93, '2013-11-23 14:06:42', 0.00, 1),
(1318, 1010, 'team66', 0, 960, '2013-11-23 14:07:09', 6, 1, '10.16.20.22', 1, 1, 1, 94, '2013-11-23 14:07:12', 0.00, 0),
(1319, 1010, 'team19', 0, 960, '2013-11-23 14:07:46', 6, 1, '10.16.20.107', 1, 1, 1, 106, '2013-11-23 14:07:47', 0.00, 0),
(1320, 1005, 'team20', 0, 0, '2013-11-23 14:08:13', 11, 0, '10.16.20.104', 0, 1, 4, 556, '2013-11-23 14:08:17', 0.00, 0),
(1321, 1015, 'team77', 0, 960, '2013-11-23 14:08:52', 6, 1, '10.16.20.27', 1, 1, 6, 92, '2013-11-23 14:08:57', 0.00, 0),
(1322, 1013, 'team78', 0, 960, '2013-11-23 14:09:12', 6, 1, '10.16.20.53', 1, 1, 4, 85, '2013-11-23 14:09:17', 0.00, 0),
(1323, 1009, 'team43', 0, 960, '2013-11-23 14:09:21', 6, 1, '10.16.20.140', 1, 1, 0, 88, '2013-11-23 14:09:22', 0.00, 0),
(1324, 1010, 'team69', 0, 960, '2013-11-23 14:09:45', 4, 1, '10.16.20.16', 1, 1, 1, 94, '2013-11-23 14:09:47', 0.00, 1),
(1325, 1012, 'team32', 0, 960, '2013-11-23 14:10:04', 6, 1, '10.16.20.128', 1, 1, 3, 112, '2013-11-23 14:10:07', 0.00, 0),
(1326, 1011, 'team51', 0, 960, '2013-11-23 14:10:12', 6, 1, '10.16.20.34', 1, 1, 2, 92, '2013-11-23 14:10:12', 0.00, 0),
(1327, 1003, 'team11', 0, 0, '2013-11-23 14:10:40', 11, 1, '10.16.20.84', 0, 1, 2, 88, '2013-11-23 14:10:42', 0.00, 0),
(1328, 1002, 'team92', 1000, 964, '2013-11-23 14:10:42', 7, 1, '10.16.20.11', 0, 1, 1, 678, '2013-11-23 14:10:52', 0.00, 0),
(1329, 1013, 'team51', 0, 960, '2013-11-23 14:10:46', 4, 1, '10.16.20.34', 1, 1, 4, 89, '2013-11-23 14:10:47', 0.00, 1),
(1330, 1002, 'team84', 0, 964, '2013-11-23 14:10:48', 4, 1, '10.16.20.60', 0, 1, 1, 783, '2013-11-23 14:10:52', 0.00, 1),
(1331, 1012, 'team74', 0, 960, '2013-11-23 14:11:07', 6, 1, '10.16.20.21', 1, 1, 3, 110, '2013-11-23 14:11:07', 0.00, 0),
(1332, 1003, 'team11', 0, 1480, '2013-11-23 14:11:16', 6, 1, '10.16.20.84', 0, 1, 2, 112, '2013-11-23 14:11:18', 0.00, 0),
(1333, 1015, 'team73', 0, 960, '2013-11-23 14:11:26', 6, 1, '10.16.20.235', 1, 1, 6, 92, '2013-11-23 14:11:27', 0.00, 0),
(1334, 1010, 'team43', 0, 960, '2013-11-23 14:11:30', 6, 1, '10.16.20.140', 1, 1, 1, 105, '2013-11-23 14:11:32', 0.00, 0),
(1335, 1012, 'team32', 0, 960, '2013-11-23 14:11:31', 6, 1, '10.16.20.128', 1, 1, 3, 111, '2013-11-23 14:11:32', 0.00, 0),
(1336, 1013, 'team78', 0, 960, '2013-11-23 14:11:53', 4, 1, '10.16.20.53', 1, 1, 4, 85, '2013-11-23 14:11:57', 0.00, 1),
(1337, 1003, 'team11', 0, 1480, '2013-11-23 14:11:53', 6, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:11:58', 0.00, 0),
(1338, 1004, 'team79', 8, 1496, '2013-11-23 14:12:00', 9, 1, '10.16.20.55', 0, 1, 3, 2247, '2013-11-23 14:12:03', 0.00, 0),
(1339, 1001, 'team16', 10000, 964, '2013-11-23 14:12:01', 7, 0, '10.16.20.113', 0, 1, 0, 578, '2013-11-23 14:12:13', 0.00, 0),
(1340, 1011, 'team51', 0, 960, '2013-11-23 14:12:11', 6, 1, '10.16.20.34', 1, 1, 2, 92, '2013-11-23 14:12:12', 0.00, 0),
(1341, 1003, 'team11', 0, 1480, '2013-11-23 14:12:16', 6, 1, '10.16.20.84', 0, 1, 2, 111, '2013-11-23 14:12:18', 0.00, 0),
(1342, 1003, 'team47', 0, 960, '2013-11-23 14:12:16', 4, 0, '10.16.20.137', 0, 1, 2, 173, '2013-11-23 14:12:17', 0.00, 1),
(1343, 1014, 'team24', 0, 960, '2013-11-23 14:12:21', 6, 1, '10.16.20.100', 1, 1, 5, 81, '2013-11-23 14:12:22', 0.00, 0),
(1344, 1003, 'team11', 0, 1480, '2013-11-23 14:12:42', 6, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:12:48', 0.00, 0),
(1345, 1015, 'team12', 0, 960, '2013-11-23 14:12:44', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 14:12:47', 0.00, 0),
(1346, 1013, 'team19', 0, 960, '2013-11-23 14:12:58', 6, 1, '10.16.20.107', 1, 1, 4, 85, '2013-11-23 14:13:02', 0.00, 0),
(1347, 1015, 'team43', 0, 960, '2013-11-23 14:13:02', 6, 1, '10.16.20.140', 1, 1, 6, 88, '2013-11-23 14:13:02', 0.00, 0),
(1348, 1003, 'team11', 0, 1480, '2013-11-23 14:13:03', 6, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:13:08', 0.00, 0),
(1349, 1015, 'team12', 0, 960, '2013-11-23 14:13:08', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 14:13:12', 0.00, 0),
(1350, 1003, 'team10', 0, 1484, '2013-11-23 14:13:11', 6, 1, '10.16.20.99', 0, 1, 2, 297, '2013-11-23 14:13:13', 0.00, 0),
(1351, 1003, 'team11', 0, 1480, '2013-11-23 14:13:27', 6, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:13:33', 0.00, 0),
(1352, 1009, 'team24', 0, 960, '2013-11-23 14:13:32', 6, 1, '10.16.20.100', 1, 1, 0, 88, '2013-11-23 14:13:32', 0.00, 0),
(1353, 1004, 'team79', 0, 1496, '2013-11-23 14:13:37', 4, 1, '10.16.20.55', 0, 1, 3, 2174, '2013-11-23 14:13:43', 0.00, 1),
(1354, 1015, 'team49', 0, 960, '2013-11-23 14:13:45', 6, 1, '10.16.20.32', 1, 1, 6, 91, '2013-11-23 14:13:47', 0.00, 0),
(1355, 1003, 'team11', 0, 1480, '2013-11-23 14:13:47', 6, 1, '10.16.20.84', 0, 1, 2, 115, '2013-11-23 14:13:53', 0.00, 0),
(1356, 1009, 'team34', 0, 960, '2013-11-23 14:13:55', 6, 1, '10.16.20.124', 1, 1, 0, 92, '2013-11-23 14:13:57', 0.00, 0),
(1357, 1015, 'team67', 0, 960, '2013-11-23 14:13:58', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:14:02', 0.00, 0),
(1358, 1004, 'team84', 0, 964, '2013-11-23 14:13:59', 6, 1, '10.16.20.60', 0, 1, 3, 639, '2013-11-23 14:14:02', 0.00, 0),
(1359, 1001, 'team44', 3188, 964, '2013-11-23 14:13:59', 4, 1, '10.16.20.138', 0, 1, 0, 743, '2013-11-23 14:14:06', 0.00, 1),
(1360, 1003, 'team11', 0, 1480, '2013-11-23 14:14:09', 6, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:14:13', 0.00, 0),
(1361, 1007, 'team28', 0, 964, '2013-11-23 14:14:20', 4, 0, '10.16.20.134', 0, 1, 6, 449, '2013-11-23 14:14:22', 0.00, 1),
(1362, 1003, 'team11', 0, 1480, '2013-11-23 14:14:28', 4, 1, '10.16.20.84', 0, 1, 2, 114, '2013-11-23 14:14:33', 0.00, 1),
(1363, 1012, 'team76', 0, 960, '2013-11-23 14:14:34', 6, 0, '10.16.20.54', 1, 1, 3, 113, '2013-11-23 14:14:37', 0.00, 0),
(1364, 1001, 'team16', 10000, 964, '2013-11-23 14:15:31', 7, 1, '10.16.20.113', 0, 1, 0, 605, '2013-11-23 14:15:43', 0.00, 0),
(1365, 1012, 'team76', 0, 960, '2013-11-23 14:15:42', 6, 0, '10.16.20.54', 1, 1, 3, 112, '2013-11-23 14:15:42', 0.00, 0),
(1366, 1011, 'team51', 0, 960, '2013-11-23 14:15:44', 4, 1, '10.16.20.34', 1, 1, 2, 92, '2013-11-23 14:15:47', 0.00, 1),
(1367, 1014, 'team70', 0, 960, '2013-11-23 14:15:50', 6, 1, '10.16.20.72', 1, 1, 5, 81, '2013-11-23 14:15:52', 0.00, 0),
(1368, 1015, 'team53', 0, 960, '2013-11-23 14:15:51', 6, 1, '10.16.20.38', 1, 1, 6, 90, '2013-11-23 14:15:52', 0.00, 0),
(1369, 1004, 'team40', 0, 964, '2013-11-23 14:16:07', 6, 1, '10.16.20.146', 0, 1, 3, 449, '2013-11-23 14:16:12', 0.00, 0),
(1370, 1007, 'team84', 0, 964, '2013-11-23 14:16:09', 4, 1, '10.16.20.60', 0, 1, 6, 437, '2013-11-23 14:16:12', 0.00, 1),
(1371, 1010, 'team43', 0, 960, '2013-11-23 14:16:58', 4, 1, '10.16.20.140', 1, 1, 1, 94, '2013-11-23 14:17:02', 0.00, 1),
(1372, 1008, 'team11', 0, 1484, '2013-11-23 14:17:36', 6, 1, '10.16.20.84', 0, 1, 7, 155, '2013-11-23 14:17:38', 0.00, 0),
(1373, 1002, 'team31', 0, 964, '2013-11-23 14:17:37', 10, 0, '10.16.20.130', 0, 1, 1, 633, '2013-11-23 14:17:37', 0.00, 0),
(1374, 1009, 'team64', 0, 960, '2013-11-23 14:18:04', 6, 1, '10.16.20.17', 1, 1, 0, 88, '2013-11-23 14:18:07', 0.00, 0),
(1375, 1012, 'team51', 0, 960, '2013-11-23 14:18:05', 6, 1, '10.16.20.34', 1, 1, 3, 114, '2013-11-23 14:18:07', 0.00, 0),
(1376, 1006, 'team10', 2000, 13780, '2013-11-23 14:18:23', 7, 1, '10.16.20.99', 0, 1, 5, 545, '2013-11-23 14:18:32', 0.00, 0),
(1377, 1012, 'team51', 0, 960, '2013-11-23 14:18:37', 6, 1, '10.16.20.34', 1, 1, 3, 114, '2013-11-23 14:18:37', 0.00, 0),
(1378, 1001, 'team16', 10000, 964, '2013-11-23 14:18:50', 7, 1, '10.16.20.113', 0, 1, 0, 607, '2013-11-23 14:19:03', 0.00, 0),
(1379, 1002, 'team46', 0, 964, '2013-11-23 14:19:01', 6, 1, '10.16.20.101', 0, 1, 1, 659, '2013-11-23 14:19:02', 0.00, 0),
(1380, 1012, 'team51', 0, 960, '2013-11-23 14:19:14', 6, 1, '10.16.20.34', 1, 1, 3, 115, '2013-11-23 14:19:17', 0.00, 0),
(1381, 1014, 'team24', 0, 960, '2013-11-23 14:19:16', 6, 1, '10.16.20.100', 1, 1, 5, 83, '2013-11-23 14:19:17', 0.00, 0),
(1382, 1012, 'team78', 0, 960, '2013-11-23 14:19:23', 6, 1, '10.16.20.53', 1, 1, 3, 110, '2013-11-23 14:19:27', 0.00, 0),
(1383, 1012, 'team51', 0, 960, '2013-11-23 14:20:01', 6, 1, '10.16.20.34', 1, 1, 3, 114, '2013-11-23 14:20:02', 0.00, 0),
(1384, 1008, 'team11', 0, 1484, '2013-11-23 14:20:04', 6, 1, '10.16.20.84', 0, 1, 7, 159, '2013-11-23 14:20:08', 0.00, 0),
(1385, 1016, 'team48', 0, 960, '2013-11-23 14:20:08', 6, 1, '10.16.20.136', 1, 1, 7, 87, '2013-11-23 14:20:12', 0.00, 0),
(1386, 1012, 'team51', 0, 960, '2013-11-23 14:20:38', 6, 1, '10.16.20.34', 1, 1, 3, 115, '2013-11-23 14:20:42', 0.00, 0),
(1387, 1012, 'team32', 0, 960, '2013-11-23 14:20:44', 6, 1, '10.16.20.128', 1, 1, 3, 110, '2013-11-23 14:20:47', 0.00, 0),
(1388, 1015, 'team12', 0, 960, '2013-11-23 14:21:13', 6, 1, '10.16.20.83', 1, 1, 6, 91, '2013-11-23 14:21:17', 0.00, 0),
(1389, 1012, 'team51', 0, 960, '2013-11-23 14:21:16', 6, 1, '10.16.20.34', 1, 1, 3, 115, '2013-11-23 14:21:17', 0.00, 0),
(1390, 1008, 'team11', 0, 1484, '2013-11-23 14:21:16', 6, 1, '10.16.20.84', 0, 1, 7, 153, '2013-11-23 14:21:18', 0.00, 0),
(1391, 1002, 'team31', 0, 964, '2013-11-23 14:21:35', 10, 1, '10.16.20.130', 0, 1, 1, 635, '2013-11-23 14:21:37', 0.00, 0),
(1392, 1001, 'team36', 372, 976, '2013-11-23 14:21:47', 6, 0, '10.16.20.120', 0, 1, 0, 632, '2013-11-23 14:21:48', 0.00, 0),
(1393, 1012, 'team51', 0, 960, '2013-11-23 14:21:47', 6, 1, '10.16.20.34', 1, 1, 3, 116, '2013-11-23 14:21:52', 0.00, 0),
(1394, 1014, 'team38', 0, 960, '2013-11-23 14:22:08', 4, 0, '10.16.20.118', 1, 1, 5, 87, '2013-11-23 14:22:12', 0.00, 1),
(1395, 1008, 'team11', 0, 1484, '2013-11-23 14:22:10', 6, 1, '10.16.20.84', 0, 1, 7, 139, '2013-11-23 14:22:13', 0.00, 0),
(1396, 1003, 'team10', 0, 1480, '2013-11-23 14:22:28', 4, 1, '10.16.20.99', 0, 1, 2, 202, '2013-11-23 14:22:33', 0.00, 1),
(1397, 1010, 'team48', 0, 960, '2013-11-23 14:22:31', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 14:22:32', 0.00, 0),
(1398, 1012, 'team32', 0, 960, '2013-11-23 14:22:37', 6, 1, '10.16.20.128', 1, 1, 3, 110, '2013-11-23 14:22:42', 0.00, 0),
(1399, 1012, 'team51', 0, 960, '2013-11-23 14:23:19', 4, 1, '10.16.20.34', 1, 1, 3, 115, '2013-11-23 14:23:22', 0.00, 1),
(1400, 1002, 'team46', 0, 964, '2013-11-23 14:23:25', 4, 1, '10.16.20.101', 0, 1, 1, 658, '2013-11-23 14:23:27', 0.00, 1),
(1401, 1001, 'team16', 4812, 964, '2013-11-23 14:23:33', 6, 1, '10.16.20.113', 0, 1, 0, 605, '2013-11-23 14:23:42', 0.00, 0),
(1402, 1015, 'team66', 0, 960, '2013-11-23 14:23:39', 6, 1, '10.16.20.22', 1, 1, 6, 92, '2013-11-23 14:23:42', 0.00, 0),
(1403, 1012, 'team32', 0, 960, '2013-11-23 14:23:39', 6, 1, '10.16.20.128', 1, 1, 3, 111, '2013-11-23 14:23:42', 0.00, 0),
(1404, 1001, 'team58', 3068, 964, '2013-11-23 14:23:50', 4, 1, '10.16.20.45', 0, 1, 0, 747, '2013-11-23 14:23:56', 0.00, 1),
(1405, 1015, 'team67', 0, 960, '2013-11-23 14:23:57', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:23:57', 0.00, 0),
(1406, 1014, 'team63', 0, 960, '2013-11-23 14:23:58', 6, 1, '10.16.20.50', 1, 1, 5, 83, '2013-11-23 14:24:02', 0.00, 0),
(1407, 1015, 'team73', 0, 960, '2013-11-23 14:24:02', 6, 1, '10.16.20.235', 1, 1, 6, 91, '2013-11-23 14:24:02', 0.00, 0),
(1408, 1009, 'team64', 0, 960, '2013-11-23 14:24:23', 6, 1, '10.16.20.17', 1, 1, 0, 92, '2013-11-23 14:24:27', 0.00, 0),
(1409, 1002, 'team91', 1000, 964, '2013-11-23 14:24:26', 7, 1, '10.16.20.10', 0, 1, 1, 808, '2013-11-23 14:24:37', 0.00, 0),
(1410, 1015, 'team73', 0, 0, '2013-11-23 14:24:33', 11, 1, '10.16.20.235', 1, 1, 6, 90, '2013-11-23 14:24:37', 0.00, 0),
(1411, 1012, 'team32', 0, 960, '2013-11-23 14:24:38', 4, 1, '10.16.20.128', 1, 1, 3, 111, '2013-11-23 14:24:43', 0.00, 1),
(1412, 1015, 'team73', 0, 960, '2013-11-23 14:24:53', 6, 1, '10.16.20.235', 1, 1, 6, 92, '2013-11-23 14:24:57', 0.00, 0),
(1413, 1008, 'team11', 0, 1484, '2013-11-23 14:24:58', 6, 1, '10.16.20.84', 0, 1, 7, 119, '2013-11-23 14:25:03', 0.00, 0),
(1414, 1012, 'team24', 0, 960, '2013-11-23 14:25:01', 4, 1, '10.16.20.100', 1, 1, 3, 111, '2013-11-23 14:25:03', 0.00, 1),
(1415, 1015, 'team77', 0, 960, '2013-11-23 14:25:06', 6, 1, '10.16.20.27', 1, 1, 6, 88, '2013-11-23 14:25:07', 0.00, 0),
(1416, 1002, 'team92', 1000, 964, '2013-11-23 14:25:06', 7, 1, '10.16.20.11', 0, 1, 1, 671, '2013-11-23 14:25:17', 0.00, 0),
(1417, 1002, 'team52', 4, 1484, '2013-11-23 14:25:51', 4, 1, '10.16.20.36', 0, 1, 1, 981, '2013-11-23 14:25:53', 0.00, 1),
(1418, 1009, 'team43', 0, 960, '2013-11-23 14:25:54', 6, 1, '10.16.20.140', 1, 1, 0, 88, '2013-11-23 14:25:57', 0.00, 0),
(1419, 1016, 'team48', 0, 960, '2013-11-23 14:26:18', 4, 1, '10.16.20.136', 1, 1, 7, 87, '2013-11-23 14:26:23', 0.00, 1),
(1420, 1005, 'team20', 172, 964, '2013-11-23 14:26:18', 6, 0, '10.16.20.104', 0, 1, 4, 572, '2013-11-23 14:26:24', 0.00, 0),
(1421, 1006, 'team84', 400, 964, '2013-11-23 14:26:22', 4, 1, '10.16.20.60', 0, 1, 5, 253, '2013-11-23 14:26:28', 0.00, 1),
(1422, 1008, 'team46', 7000, 964, '2013-11-23 14:26:23', 7, 1, '10.16.20.101', 0, 1, 7, 133, '2013-11-23 14:27:22', 0.00, 0),
(1423, 1001, 'team16', 10000, 964, '2013-11-23 14:26:26', 7, 1, '10.16.20.113', 0, 1, 0, 605, '2013-11-23 14:26:39', 0.00, 0),
(1424, 1015, 'team73', 0, 960, '2013-11-23 14:27:06', 6, 1, '10.16.20.235', 1, 1, 6, 92, '2013-11-23 14:27:07', 0.00, 0),
(1425, 1008, 'team11', 0, 964, '2013-11-23 14:27:10', 6, 0, '10.16.20.84', 0, 1, 7, 127, '2013-11-23 14:27:13', 0.00, 0),
(1426, 1010, 'team48', 0, 960, '2013-11-23 14:27:12', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 14:27:12', 0.00, 0),
(1427, 1002, 'team91', 1000, 964, '2013-11-23 14:28:08', 7, 1, '10.16.20.10', 0, 1, 1, 743, '2013-11-23 14:28:22', 0.00, 0),
(1428, 1012, 'team76', 0, 960, '2013-11-23 14:28:25', 6, 0, '10.16.20.54', 1, 1, 3, 112, '2013-11-23 14:28:27', 0.00, 0),
(1429, 1009, 'team63', 0, 960, '2013-11-23 14:28:34', 6, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 14:28:37', 0.00, 0),
(1430, 1001, 'team36', 364, 976, '2013-11-23 14:28:39', 6, 0, '10.16.20.120', 0, 1, 0, 598, '2013-11-23 14:28:43', 0.00, 0),
(1431, 1009, 'team51', 0, 960, '2013-11-23 14:29:01', 4, 1, '10.16.20.34', 1, 1, 0, 92, '2013-11-23 14:29:03', 0.00, 1),
(1432, 1008, 'team11', 0, 964, '2013-11-23 14:29:09', 6, 0, '10.16.20.84', 0, 1, 7, 114, '2013-11-23 14:29:13', 0.00, 0),
(1433, 1015, 'team67', 0, 960, '2013-11-23 14:29:12', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:29:13', 0.00, 0),
(1434, 1002, 'team60', 4, 1484, '2013-11-23 14:29:37', 6, 1, '10.16.20.48', 0, 1, 1, 1699, '2013-11-23 14:29:38', 0.00, 0),
(1435, 1012, 'team76', 0, 960, '2013-11-23 14:29:49', 4, 0, '10.16.20.54', 1, 1, 3, 113, '2013-11-23 14:29:53', 0.00, 1),
(1436, 1015, 'team75', 0, 960, '2013-11-23 14:30:04', 6, 1, '10.16.20.24', 1, 1, 6, 89, '2013-11-23 14:30:08', 0.00, 0),
(1437, 1008, 'team88', 0, 0, '2013-11-23 14:30:15', 11, 1, '10.16.20.69', 0, 1, 7, 269, '2013-11-23 14:30:17', 0.00, 0),
(1438, 1015, 'team73', 0, 960, '2013-11-23 14:30:22', 6, 1, '10.16.20.235', 1, 1, 6, 92, '2013-11-23 14:30:28', 0.00, 0),
(1439, 1008, 'team46', 0, 964, '2013-11-23 14:30:35', 6, 1, '10.16.20.101', 0, 1, 7, 152, '2013-11-23 14:30:38', 0.00, 0),
(1440, 1010, 'team64', 0, 960, '2013-11-23 14:31:21', 6, 1, '10.16.20.17', 1, 1, 1, 82, '2013-11-23 14:31:23', 0.00, 0),
(1441, 1016, 'team51', 0, 960, '2013-11-23 14:31:28', 6, 1, '10.16.20.34', 1, 1, 7, 86, '2013-11-23 14:31:33', 0.00, 0),
(1442, 1002, 'team20', 0, 964, '2013-11-23 14:31:50', 6, 0, '10.16.20.105', 0, 1, 1, 1007, '2013-11-23 14:31:53', 0.00, 0),
(1443, 1012, 'team78', 0, 960, '2013-11-23 14:31:55', 6, 1, '10.16.20.53', 1, 1, 3, 111, '2013-11-23 14:31:58', 0.00, 0),
(1444, 1008, 'team88', 0, 964, '2013-11-23 14:32:00', 6, 0, '10.16.20.69', 0, 1, 7, 282, '2013-11-23 14:32:03', 0.00, 0),
(1445, 1014, 'team56', 0, 960, '2013-11-23 14:32:37', 6, 1, '10.16.20.41', 1, 1, 5, 80, '2013-11-23 14:32:38', 0.00, 0),
(1446, 1002, 'team20', 0, 964, '2013-11-23 14:33:31', 6, 0, '10.16.20.105', 0, 1, 1, 1026, '2013-11-23 14:33:33', 0.00, 0),
(1447, 1012, 'team78', 0, 960, '2013-11-23 14:33:32', 4, 1, '10.16.20.53', 1, 1, 3, 111, '2013-11-23 14:33:38', 0.00, 1),
(1448, 1008, 'team46', 6208, 964, '2013-11-23 14:33:34', 4, 1, '10.16.20.101', 0, 1, 7, 134, '2013-11-23 14:33:53', 0.00, 1),
(1449, 1014, 'team56', 0, 960, '2013-11-23 14:33:41', 6, 1, '10.16.20.41', 1, 1, 5, 87, '2013-11-23 14:33:43', 0.00, 0),
(1450, 1001, 'team36', 268, 980, '2013-11-23 14:33:55', 6, 0, '10.16.20.120', 0, 1, 0, 623, '2013-11-23 14:33:58', 0.00, 0),
(1451, 1003, 'team84', 0, 0, '2013-11-23 14:34:00', 11, 1, '10.16.20.60', 0, 1, 2, 223, '2013-11-23 14:34:02', 0.00, 0),
(1452, 1002, 'team20', 0, 964, '2013-11-23 14:34:04', 4, 0, '10.16.20.105', 0, 1, 1, 1016, '2013-11-23 14:34:08', 0.00, 1),
(1453, 1015, 'team66', 0, 960, '2013-11-23 14:34:06', 6, 1, '10.16.20.22', 1, 1, 6, 92, '2013-11-23 14:34:08', 0.00, 0),
(1454, 1015, 'team32', 0, 960, '2013-11-23 14:34:37', 6, 1, '10.16.20.128', 1, 1, 6, 92, '2013-11-23 14:34:38', 0.00, 0),
(1455, 1014, 'team56', 0, 960, '2013-11-23 14:34:38', 6, 1, '10.16.20.41', 1, 1, 5, 81, '2013-11-23 14:34:43', 0.00, 0),
(1456, 1005, 'team54', 0, 964, '2013-11-23 14:34:57', 4, 1, '10.16.20.39', 0, 1, 4, 617, '2013-11-23 14:34:58', 0.00, 1),
(1457, 1001, 'team16', 7976, 964, '2013-11-23 14:35:10', 4, 1, '10.16.20.113', 0, 1, 0, 605, '2013-11-23 14:35:21', 0.00, 1),
(1458, 1001, 'team71', 340, 980, '2013-11-23 14:35:12', 6, 0, '10.16.20.13', 0, 1, 0, 453, '2013-11-23 14:35:13', 0.00, 0),
(1459, 1013, 'team12', 0, 960, '2013-11-23 14:35:14', 6, 1, '10.16.20.83', 1, 1, 4, 87, '2013-11-23 14:35:18', 0.00, 0),
(1460, 1009, 'team34', 0, 960, '2013-11-23 14:36:07', 6, 1, '10.16.20.124', 1, 1, 0, 88, '2013-11-23 14:36:08', 0.00, 0),
(1461, 1010, 'team19', 0, 960, '2013-11-23 14:36:28', 6, 1, '10.16.20.107', 1, 1, 1, 106, '2013-11-23 14:36:33', 0.00, 0),
(1462, 1004, 'team40', 0, 964, '2013-11-23 14:37:13', 6, 1, '10.16.20.146', 0, 1, 3, 591, '2013-11-23 14:37:18', 0.00, 0),
(1463, 1013, 'team12', 0, 960, '2013-11-23 14:37:20', 6, 1, '10.16.20.83', 1, 1, 4, 105, '2013-11-23 14:37:23', 0.00, 0),
(1464, 1002, 'team60', 4, 1484, '2013-11-23 14:37:39', 6, 1, '10.16.20.48', 0, 1, 1, 1002, '2013-11-23 14:37:43', 0.00, 0),
(1465, 1015, 'team53', 0, 960, '2013-11-23 14:37:40', 6, 1, '10.16.20.38', 1, 1, 6, 91, '2013-11-23 14:37:43', 0.00, 0),
(1466, 1016, 'team32', 0, 960, '2013-11-23 14:37:41', 6, 1, '10.16.20.128', 1, 1, 7, 87, '2013-11-23 14:37:43', 0.00, 0),
(1467, 1015, 'team67', 0, 960, '2013-11-23 14:38:02', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:38:03', 0.00, 0),
(1468, 1009, 'team48', 0, 960, '2013-11-23 14:38:47', 6, 1, '10.16.20.136', 1, 1, 0, 88, '2013-11-23 14:38:48', 0.00, 0),
(1469, 1016, 'team53', 0, 960, '2013-11-23 14:39:06', 6, 1, '10.16.20.38', 1, 1, 7, 86, '2013-11-23 14:39:08', 0.00, 0),
(1470, 1006, 'team10', 2000, 13780, '2013-11-23 14:39:12', 7, 1, '10.16.20.99', 0, 1, 5, 647, '2013-11-23 14:39:17', 0.00, 0),
(1471, 1015, 'team76', 0, 960, '2013-11-23 14:39:24', 6, 0, '10.16.20.54', 1, 1, 6, 94, '2013-11-23 14:39:28', 0.00, 0),
(1472, 1010, 'team56', 0, 960, '2013-11-23 14:39:43', 6, 1, '10.16.20.41', 1, 1, 1, 94, '2013-11-23 14:39:48', 0.00, 0),
(1473, 1010, 'team56', 0, 960, '2013-11-23 14:40:00', 4, 1, '10.16.20.41', 1, 1, 1, 94, '2013-11-23 14:40:03', 0.00, 1),
(1474, 1001, 'team7', 0, 964, '2013-11-23 14:40:43', 10, 1, '10.16.20.87', 0, 1, 0, 510, '2013-11-23 14:40:48', 0.00, 0),
(1475, 1009, 'team43', 0, 960, '2013-11-23 14:40:43', 4, 1, '10.16.20.140', 1, 1, 0, 88, '2013-11-23 14:40:48', 0.00, 1),
(1476, 1009, 'team63', 0, 960, '2013-11-23 14:40:55', 4, 1, '10.16.20.50', 1, 1, 0, 88, '2013-11-23 14:40:58', 0.00, 1),
(1477, 1014, 'team24', 0, 960, '2013-11-23 14:41:08', 4, 1, '10.16.20.100', 1, 1, 5, 87, '2013-11-23 14:41:13', 0.00, 1),
(1478, 1010, 'team38', 0, 960, '2013-11-23 14:41:09', 4, 0, '10.16.20.118', 1, 1, 1, 94, '2013-11-23 14:41:13', 0.00, 1),
(1479, 1010, 'team76', 0, 960, '2013-11-23 14:41:16', 6, 0, '10.16.20.54', 1, 1, 1, 108, '2013-11-23 14:41:18', 0.00, 0),
(1480, 1010, 'team48', 0, 960, '2013-11-23 14:41:17', 6, 1, '10.16.20.136', 1, 1, 1, 106, '2013-11-23 14:41:18', 0.00, 0),
(1481, 1016, 'team51', 0, 960, '2013-11-23 14:41:32', 6, 1, '10.16.20.34', 1, 1, 7, 86, '2013-11-23 14:41:33', 0.00, 0),
(1482, 1006, 'team85', 0, 1016, '2013-11-23 14:42:38', 10, 1, '10.16.20.63', 0, 1, 5, 390, '2013-11-23 14:42:43', 0.00, 0),
(1483, 1001, 'team7', 0, 964, '2013-11-23 14:42:52', 10, 1, '10.16.20.87', 0, 1, 0, 513, '2013-11-23 14:42:53', 0.00, 0),
(1484, 1014, 'team53', 0, 960, '2013-11-23 14:42:53', 6, 1, '10.16.20.38', 1, 1, 5, 85, '2013-11-23 14:42:58', 0.00, 0),
(1485, 1013, 'team12', 0, 960, '2013-11-23 14:43:00', 4, 1, '10.16.20.83', 1, 1, 4, 85, '2013-11-23 14:43:03', 0.00, 1),
(1486, 1015, 'team77', 0, 960, '2013-11-23 14:43:16', 6, 1, '10.16.20.27', 1, 1, 6, 91, '2013-11-23 14:43:18', 0.00, 0),
(1487, 1015, 'team32', 0, 960, '2013-11-23 14:43:18', 6, 1, '10.16.20.128', 1, 1, 6, 91, '2013-11-23 14:43:23', 0.00, 0),
(1488, 1002, 'team91', 0, 964, '2013-11-23 14:43:20', 6, 1, '10.16.20.10', 0, 1, 1, 832, '2013-11-23 14:43:23', 0.00, 0),
(1489, 1014, 'team63', 0, 960, '2013-11-23 14:44:17', 6, 1, '10.16.20.50', 1, 1, 5, 84, '2013-11-23 14:44:18', 0.00, 0),
(1490, 1015, 'team43', 0, 960, '2013-11-23 14:44:29', 6, 1, '10.16.20.140', 1, 1, 6, 186, '2013-11-23 14:44:33', 0.00, 0),
(1491, 1003, 'team84', 0, 960, '2013-11-23 14:44:42', 4, 1, '10.16.20.60', 0, 1, 2, 88, '2013-11-23 14:44:43', 0.00, 1),
(1492, 1015, 'team76', 0, 960, '2013-11-23 14:44:47', 6, 0, '10.16.20.54', 1, 1, 6, 94, '2013-11-23 14:44:48', 0.00, 0),
(1493, 1007, 'team15', 0, 964, '2013-11-23 14:45:34', 4, 1, '10.16.20.115', 0, 1, 6, 577, '2013-11-23 14:45:38', 0.00, 1),
(1494, 1008, 'team10', 7000, 964, '2013-11-23 14:45:37', 7, 1, '10.16.20.99', 0, 1, 7, 143, '2013-11-23 14:46:17', 0.00, 0),
(1495, 1001, 'team46', 596, 1484, '2013-11-23 14:45:40', 6, 1, '10.16.20.101', 0, 1, 0, 510, '2013-11-23 14:45:46', 0.00, 0),
(1496, 1016, 'team66', 0, 960, '2013-11-23 14:45:45', 4, 1, '10.16.20.22', 1, 1, 7, 86, '2013-11-23 14:45:48', 0.00, 1),
(1497, 1008, 'team10', 7000, 964, '2013-11-23 14:45:55', 7, 0, '10.16.20.99', 0, 1, 7, 143, '2013-11-23 14:46:35', 0.00, 0),
(1498, 1016, 'team32', 0, 960, '2013-11-23 14:46:13', 4, 1, '10.16.20.128', 1, 1, 7, 86, '2013-11-23 14:46:15', 0.00, 1),
(1499, 1007, 'team46', 0, 964, '2013-11-23 14:46:31', 4, 1, '10.16.20.101', 0, 1, 6, 437, '2013-11-23 14:46:33', 0.00, 1),
(1500, 1015, 'team64', 0, 960, '2013-11-23 14:46:44', 6, 1, '10.16.20.17', 1, 1, 6, 91, '2013-11-23 14:46:48', 0.00, 0),
(1501, 1002, 'team15', 0, 964, '2013-11-23 14:46:49', 6, 1, '10.16.20.115', 0, 1, 1, 1098, '2013-11-23 14:46:53', 0.00, 0),
(1502, 1002, 'team60', 4, 1484, '2013-11-23 14:46:50', 6, 1, '10.16.20.48', 0, 1, 1, 1106, '2013-11-23 14:46:53', 0.00, 0),
(1503, 1013, 'team19', 0, 960, '2013-11-23 14:46:53', 6, 1, '10.16.20.107', 1, 1, 4, 98, '2013-11-23 14:46:58', 0.00, 0),
(1504, 1014, 'team78', 0, 960, '2013-11-23 14:47:15', 4, 1, '10.16.20.53', 1, 1, 5, 87, '2013-11-23 14:47:18', 0.00, 1),
(1505, 1016, 'team53', 0, 960, '2013-11-23 14:47:18', 4, 1, '10.16.20.38', 1, 1, 7, 87, '2013-11-23 14:47:23', 0.00, 1),
(1506, 1010, 'team76', 0, 960, '2013-11-23 14:47:50', 4, 0, '10.16.20.54', 1, 1, 1, 96, '2013-11-23 14:47:53', 0.00, 1),
(1507, 1012, 'team34', 0, 960, '2013-11-23 14:48:16', 6, 1, '10.16.20.124', 1, 1, 3, 112, '2013-11-23 14:48:18', 0.00, 0),
(1508, 1016, 'team76', 0, 960, '2013-11-23 14:48:27', 6, 0, '10.16.20.54', 1, 1, 7, 88, '2013-11-23 14:48:28', 0.00, 0),
(1509, 1001, 'team7', 0, 964, '2013-11-23 14:48:28', 10, 1, '10.16.20.87', 0, 1, 0, 513, '2013-11-23 14:48:33', 0.00, 0),
(1510, 1008, 'team10', 6020, 964, '2013-11-23 14:48:41', 4, 0, '10.16.20.99', 0, 1, 7, 135, '2013-11-23 14:48:57', 0.00, 1),
(1511, 1015, 'team49', 0, 960, '2013-11-23 14:48:47', 4, 1, '10.16.20.32', 1, 1, 6, 92, '2013-11-23 14:48:48', 0.00, 1),
(1512, 1016, 'team76', 0, 960, '2013-11-23 14:48:50', 6, 0, '10.16.20.54', 1, 1, 7, 88, '2013-11-23 14:48:53', 0.00, 0),
(1513, 1015, 'team38', 0, 960, '2013-11-23 14:48:59', 6, 0, '10.16.20.118', 1, 1, 6, 91, '2013-11-23 14:49:03', 0.00, 0),
(1514, 1001, 'team42', 4, 976, '2013-11-23 14:49:00', 6, 1, '10.16.20.142', 0, 1, 0, 580, '2013-11-23 14:49:03', 0.00, 0),
(1515, 1002, 'team60', 4, 1484, '2013-11-23 14:49:04', 6, 1, '10.16.20.48', 0, 1, 1, 1242, '2013-11-23 14:49:08', 0.00, 0),
(1516, 1016, 'team56', 0, 960, '2013-11-23 14:49:07', 4, 1, '10.16.20.41', 1, 1, 7, 86, '2013-11-23 14:49:08', 0.00, 1),
(1517, 1002, 'team91', 0, 964, '2013-11-23 14:49:16', 4, 1, '10.16.20.10', 0, 1, 1, 810, '2013-11-23 14:49:18', 0.00, 1),
(1518, 1006, 'team18', 608, 7844, '2013-11-23 14:49:20', 4, 1, '10.16.20.109', 0, 1, 5, 339, '2013-11-23 14:49:24', 0.00, 1),
(1519, 1012, 'team34', 0, 960, '2013-11-23 14:49:26', 6, 1, '10.16.20.124', 1, 1, 3, 111, '2013-11-23 14:49:28', 0.00, 0),
(1520, 1012, 'team34', 0, 960, '2013-11-23 14:50:07', 4, 1, '10.16.20.124', 1, 1, 3, 111, '2013-11-23 14:50:08', 0.00, 1),
(1521, 1016, 'team51', 0, 960, '2013-11-23 14:50:10', 4, 1, '10.16.20.34', 1, 1, 7, 86, '2013-11-23 14:50:13', 0.00, 0),
(1522, 1004, 'team17', 0, 984, '2013-11-23 14:50:20', 6, 1, '10.16.20.111', 0, 1, 3, 5412, '2013-11-23 14:50:23', 0.00, 0),
(1523, 1007, 'team11', 0, 1484, '2013-11-23 14:50:24', 6, 1, '10.16.20.84', 0, 1, 6, 427, '2013-11-23 14:50:28', 0.00, 0),
(1524, 1010, 'team64', 0, 960, '2013-11-23 14:50:47', 6, 1, '10.16.20.17', 1, 1, 1, 93, '2013-11-23 14:50:48', 0.00, 0),
(1525, 1001, 'team39', 24, 964, '2013-11-23 14:51:32', 6, 1, '10.16.20.147', 0, 1, 0, 193, '2013-11-23 14:51:33', 0.00, 0),
(1526, 1001, 'team7', 1004, 964, '2013-11-23 14:51:49', 6, 1, '10.16.20.87', 0, 1, 0, 529, '2013-11-23 14:51:54', 0.00, 0),
(1527, 1010, 'team75', 0, 960, '2013-11-23 14:52:06', 4, 1, '10.16.20.24', 1, 1, 1, 94, '2013-11-23 14:52:08', 0.00, 1),
(1528, 1004, 'team14', 0, 976, '2013-11-23 14:52:07', 6, 0, '10.16.20.117', 0, 1, 3, 1342, '2013-11-23 14:52:08', 0.00, 0),
(1529, 1014, 'team63', 0, 960, '2013-11-23 14:52:17', 4, 1, '10.16.20.50', 1, 1, 5, 87, '2013-11-23 14:52:18', 0.00, 1),
(1530, 1015, 'team76', 0, 960, '2013-11-23 14:52:22', 4, 0, '10.16.20.54', 1, 1, 6, 93, '2013-11-23 14:52:23', 0.00, 1),
(1531, 1001, 'team42', 24, 964, '2013-11-23 14:52:24', 6, 1, '10.16.20.142', 0, 1, 0, 193, '2013-11-23 14:52:28', 0.00, 0),
(1532, 1010, 'team64', 0, 960, '2013-11-23 14:52:34', 4, 1, '10.16.20.17', 1, 1, 1, 94, '2013-11-23 14:52:38', 0.00, 1),
(1533, 1015, 'team77', 0, 960, '2013-11-23 14:52:47', 6, 1, '10.16.20.27', 1, 1, 6, 89, '2013-11-23 14:52:48', 0.00, 0),
(1534, 1001, 'team46', 10000, 956, '2013-11-23 14:53:12', 7, 1, '10.16.20.101', 0, 1, 0, 117, '2013-11-23 14:53:24', 0.00, 0),
(1535, 1015, 'team67', 0, 960, '2013-11-23 14:53:18', 6, 1, '10.16.20.18', 1, 1, 6, 92, '2013-11-23 14:53:18', 0.00, 0),
(1536, 1004, 'team14', 0, 976, '2013-11-23 14:53:30', 6, 1, '10.16.20.117', 0, 1, 3, 1340, '2013-11-23 14:53:33', 0.00, 0),
(1537, 1009, 'team56', 0, 960, '2013-11-23 14:53:40', 4, 1, '10.16.20.41', 1, 1, 0, 88, '2013-11-23 14:53:43', 0.00, 1),
(1538, 1004, 'team14', 0, 976, '2013-11-23 14:53:46', 6, 0, '10.16.20.117', 0, 1, 3, 1340, '2013-11-23 14:53:48', 0.00, 0),
(1539, 1015, 'team38', 0, 960, '2013-11-23 14:53:48', 4, 0, '10.16.20.118', 1, 1, 6, 92, '2013-11-23 14:53:53', 0.00, 0),
(1540, 1001, 'team42', 0, 964, '2013-11-23 14:54:07', 6, 1, '10.16.20.142', 0, 1, 0, 199, '2013-11-23 14:54:08', 0.00, 0),
(1541, 1001, 'team36', 0, 0, '2013-11-23 14:54:07', 11, 1, '10.16.20.120', 0, 1, 0, 684, '2013-11-23 14:54:08', 0.00, 0),
(1542, 1015, 'team75', 0, 960, '2013-11-23 14:54:25', 6, 1, '10.16.20.24', 1, 1, 6, 88, '2013-11-23 14:54:28', 0.00, 0),
(1543, 1015, 'team64', 0, 960, '2013-11-23 14:54:29', 6, 1, '10.16.20.17', 1, 1, 6, 92, '2013-11-23 14:54:33', 0.00, 0),
(1544, 1001, 'team39', 0, 964, '2013-11-23 14:54:30', 6, 1, '10.16.20.147', 0, 1, 0, 188, '2013-11-23 14:54:33', 0.00, 0),
(1545, 1004, 'team17', 0, 984, '2013-11-23 14:54:33', 6, 1, '10.16.20.111', 0, 1, 3, 5543, '2013-11-23 14:54:33', 0.00, 0),
(1546, 1010, 'team24', 0, 960, '2013-11-23 14:54:37', 6, 1, '10.16.20.100', 1, 1, 1, 94, '2013-11-23 14:54:38', 0.00, 0),
(1547, 1009, 'team56', 0, 960, '2013-11-23 14:54:39', 6, 1, '10.16.20.41', 1, 1, 0, 88, '2013-11-23 14:54:43', 0.00, 0),
(1548, 1014, 'team70', 0, 960, '2013-11-23 14:54:53', 4, 1, '10.16.20.72', 1, 1, 5, 87, '2013-11-23 14:54:58', 0.00, 1),
(1549, 1005, 'team18', 0, 964, '2013-11-23 14:55:16', 4, 1, '10.16.20.109', 0, 1, 4, 420, '2013-11-23 14:55:18', 0.00, 0),
(1550, 1014, 'team69', 0, 960, '2013-11-23 14:55:30', 4, 1, '10.16.20.16', 1, 1, 5, 87, '2013-11-23 14:55:33', 0.00, 0),
(1551, 1001, 'team39', 0, 964, '2013-11-23 14:55:33', 6, 1, '10.16.20.147', 0, 1, 0, 205, '2013-11-23 14:55:33', 0.00, 0),
(1552, 1015, 'team75', 0, 960, '2013-11-23 14:55:33', 6, 1, '10.16.20.24', 1, 1, 6, 88, '2013-11-23 14:55:38', 0.00, 0),
(1553, 1007, 'team10', 0, 1484, '2013-11-23 14:55:39', 6, 1, '10.16.20.99', 0, 1, 6, 499, '2013-11-23 14:55:44', 0.00, 0),
(1554, 1016, 'team78', 0, 960, '2013-11-23 14:55:41', 6, 1, '10.16.20.53', 1, 1, 7, 82, '2013-11-23 14:55:43', 0.00, 0),
(1555, 1015, 'team66', 0, 960, '2013-11-23 14:55:49', 6, 1, '10.16.20.22', 1, 1, 6, 92, '2013-11-23 14:55:53', 0.00, 0),
(1556, 1004, 'team17', 0, 984, '2013-11-23 14:55:53', 6, 1, '10.16.20.111', 0, 1, 3, 5707, '2013-11-23 14:55:53', 0.00, 0),
(1557, 1010, 'team24', 0, 960, '2013-11-23 14:55:56', 4, 1, '10.16.20.100', 1, 1, 1, 94, '2013-11-23 14:55:58', 0.00, 0),
(1558, 1009, 'team64', 0, 960, '2013-11-23 14:56:14', 4, 1, '10.16.20.17', 1, 1, 0, 88, '2013-11-23 14:56:18', 0.00, 1),
(1559, 1006, 'team10', 0, 1480, '2013-11-23 14:56:31', 10, 1, '10.16.20.99', 0, 1, 5, 499, '2013-11-23 14:56:34', 0.00, 0),
(1560, 1015, 'team77', 0, 960, '2013-11-23 14:56:37', 6, 1, '10.16.20.27', 1, 1, 6, 91, '2013-11-23 14:56:38', 0.00, 0),
(1561, 1006, 'team71', 0, 0, '2013-11-23 14:57:06', 11, 1, '10.16.20.13', 0, 1, 5, 282, '2013-11-23 14:57:08', 0.00, 0),
(1562, 1009, 'team24', 0, 960, '2013-11-23 14:57:11', 6, 1, '10.16.20.100', 1, 1, 0, 88, '2013-11-23 14:57:13', 0.00, 0),
(1563, 1001, 'team36', 0, 0, '2013-11-23 14:57:14', 11, 1, '10.16.20.120', 0, 1, 0, 689, '2013-11-23 14:57:18', 0.00, 0),
(1564, 1014, 'team51', 0, 960, '2013-11-23 14:57:21', 4, 1, '10.16.20.34', 1, 1, 5, 91, '2013-11-23 14:57:23', 0.00, 0),
(1565, 1010, 'team78', 0, 960, '2013-11-23 14:57:58', 4, 1, '10.16.20.53', 1, 1, 1, 94, '2013-11-23 14:58:03', 0.00, 0),
(1566, 1001, 'team36', 828, 1504, '2013-11-23 14:58:03', 6, 1, '10.16.20.120', 0, 1, 0, 696, '2013-11-23 14:58:07', 0.00, 0),
(1567, 1004, 'team17', 0, 984, '2013-11-23 14:58:07', 6, 1, '10.16.20.111', 0, 1, 3, 5691, '2013-11-23 14:58:08', 0.00, 0),
(1568, 1006, 'team85', 608, 964, '2013-11-23 14:58:12', 6, 1, '10.16.20.63', 0, 1, 5, 204, '2013-11-23 14:58:14', 0.00, 0),
(1569, 1010, 'team70', 0, 960, '2013-11-23 14:58:28', 4, 1, '10.16.20.72', 1, 1, 1, 94, '2013-11-23 14:58:28', 0.00, 0),
(1570, 1015, 'team77', 0, 960, '2013-11-23 14:58:29', 6, 1, '10.16.20.27', 1, 1, 6, 88, '2013-11-23 14:58:33', 0.00, 0),
(1571, 1010, 'team48', 0, 960, '2013-11-23 14:58:47', 4, 1, '10.16.20.136', 1, 1, 1, 94, '2013-11-23 14:58:48', 0.00, 0),
(1572, 1014, 'team53', 0, 960, '2013-11-23 14:58:51', 6, 1, '10.16.20.38', 1, 1, 5, 85, '2013-11-23 14:58:53', 0.00, 0),
(1573, 1006, 'team71', 0, 0, '2013-11-23 14:58:54', 11, 1, '10.16.20.13', 0, 1, 5, 287, '2013-11-23 14:58:58', 0.00, 0),
(1574, 1016, 'team76', 0, 960, '2013-11-23 14:58:56', 4, 0, '10.16.20.54', 1, 1, 7, 87, '2013-11-23 14:58:58', 0.00, 0),
(1575, 1015, 'team75', 0, 960, '2013-11-23 14:58:58', 6, 1, '10.16.20.24', 1, 1, 6, 87, '2013-11-23 14:59:03', 0.00, 0),
(1576, 1005, 'team7', 0, 0, '2013-11-23 14:59:01', 11, 1, '10.16.20.87', 0, 1, 4, 548, '2013-11-23 14:59:04', 0.00, 0),
(1577, 1005, 'team7', 0, 0, '2013-11-23 14:59:26', 11, 1, '10.16.20.87', 0, 1, 4, 569, '2013-11-23 14:59:28', 0.00, 0),
(1578, 1014, 'team75', 0, 960, '2013-11-23 14:59:36', 6, 1, '10.16.20.24', 1, 1, 5, 86, '2013-11-23 14:59:38', 0.00, 0),
(1579, 1004, 'team17', 0, 984, '2013-11-23 14:59:37', 6, 1, '10.16.20.111', 0, 1, 3, 5691, '2013-11-23 14:59:38', 0.00, 0),
(1580, 1005, 'team7', 0, 0, '2013-11-23 14:59:41', 11, 1, '10.16.20.87', 0, 1, 4, 570, '2013-11-23 14:59:44', 0.00, 0),
(1581, 1010, 'team66', 0, 960, '2013-11-23 14:59:43', 6, 1, '10.16.20.22', 1, 1, 1, 94, '2013-11-23 14:59:48', 0.00, 0),
(1582, 1016, 'team78', 0, 960, '2013-11-23 14:59:44', 4, 1, '10.16.20.53', 1, 1, 7, 82, '2013-11-23 14:59:48', 0.00, 0),
(1583, 1002, 'team60', 4, 1484, '2013-11-23 14:59:46', 6, 1, '10.16.20.48', 0, 1, 1, 1277, '2013-11-23 14:59:49', 0.00, 0),
(1584, 1006, 'team71', 0, 0, '2013-11-23 15:00:01', 11, 1, '10.16.20.13', 0, 1, 5, 287, '2013-11-23 15:00:03', 0.00, 0),
(1585, 1006, 'team85', 492, 964, '2013-11-23 15:00:04', 6, 1, '10.16.20.63', 0, 1, 5, 204, '2013-11-23 15:00:09', 0.00, 0),
(1586, 1005, 'team7', 4, 1480, '2013-11-23 15:00:07', 10, 1, '10.16.20.87', 0, 1, 4, 613, '2013-11-23 15:00:09', 0.00, 0),
(1587, 1004, 'team17', 0, 984, '2013-11-23 15:00:09', 6, 1, '10.16.20.111', 0, 1, 3, 5691, '2013-11-23 15:00:13', 0.00, 0),
(1588, 1014, 'team64', 0, 960, '2013-11-23 15:00:36', 4, 1, '10.16.20.17', 1, 1, 5, 87, '2013-11-23 15:00:38', 0.00, 0);

-- --------------------------------------------------------

--
-- 表的结构 `source_code`
--

CREATE TABLE IF NOT EXISTS `source_code` (
  `solution_id` int(11) NOT NULL,
  `source` text NOT NULL,
  PRIMARY KEY (`solution_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `source_code`
--

INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(4, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1368<<endl;\r\n	return 0;\r\n}'),
(5, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1912<<endl;\r\n	return 0;\r\n}'),
(6, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint main()\r\n{\r\n	int a,i;\r\n	char s[1234];\r\n	while(~scanf("%s",s))\r\n	{\r\n		a = 0;\r\n		int len = strlen(s);\r\n		for(i=0;i<len;i++)\r\n		{\r\n			a+=s[i]-''0'';\r\n		}\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(7, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2010<<endl;\r\n	return 0;\r\n}'),
(8, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(9, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2012<<endl;\r\n	return 0;\r\n}'),
(10, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char s[1024];\r\n	int i,j;\r\n	while(gets(s))\r\n	{\r\n		j=0;\r\n		for(i=0;s[i];++i)\r\n		j+=(s[i]-''0'');\r\n		printf("%d\\n",j%3);\r\n	}\r\n	return 0;\r\n}'),
(11, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(12, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<54250<<endl;\r\n	return 0;\r\n}'),
(13, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<0<<endl;\r\n	return 0;\r\n}'),
(14, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<618<<endl;\r\n	return 0;\r\n}'),
(15, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1644<<endl;\r\n	return 0;\r\n}'),
(16, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("618");\r\n    return 0;\r\n}\r\n'),
(17, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=2010;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(18, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1949<<endl;\r\n	return 0;\r\n}'),
(19, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}\r\n'),
(20, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<15<<endl;\r\n	return 0;\r\n}'),
(21, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("0");\r\n    return 0;\r\n}\r\n'),
(22, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=54250;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(23, '#include<stdio.h>\r\nint main()\r\n{\r\n    long  a,b;\r\n    while(scanf("%ld",&a)!=EOF)\r\n     {\r\n        b=a%3;\r\n        printf("%ld\\n",b);\r\n    }\r\n    return 0;\r\n}\r\n'),
(24, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1999<<endl;\r\n	return 0;\r\n}'),
(25, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2007<<endl;\r\n	return 0;\r\n}'),
(26, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=54250;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(27, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2228<<endl;\r\n	return 0;\r\n}'),
(28, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(~scanf("%d",&a))\r\n	{\r\n	    b=a%3;\r\n    	printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(29, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	long long a;\r\n	while(~scanf("%lld",&a))\r\n	printf("%lld\\n",a%3);\r\n}'),
(30, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=2046;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(31, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,a;\r\n	while(cin>>n)\r\n	{\r\n		a=pow(2,n);\r\n		cout<<a<<endl;\r\n	}\r\n	return 0;\r\n}'),
(32, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("%d\\n",1912);\r\n	return 0;\r\n\r\n}'),
(33, '# include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a))\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(34, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1735");\r\n    return 0;\r\n}\r\n'),
(35, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("%d\\n",54250);\r\n	return 0;\r\n\r\n}'),
(36, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2012");\r\n    return 0;\r\n}\r\n'),
(37, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a/3;\r\n		b=b*3;\r\n		printf("%d\\n",(a-b));\r\n	}\r\n}'),
(38, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a;\r\n	cin>>a;\r\n	cout<<a%3<<endl;\r\n	return 0;\r\n}'),
(39, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("%d\\n",2228);\r\n	return 0;\r\n\r\n}'),
(40, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nint main()\r\n{\r\n	\r\n	int n,a[101][101];\r\n	int i,j;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n			}\r\n		}\r\n		for(i=n-1;i>0;i--)\r\n		{\r\n			for(j=0;j<i;j++)\r\n			{\r\n				if(a[i][j]>a[i][j+1])\r\n					a[i-1][j]+=a[i][j];\r\n				else\r\n					a[i-1][j]+=a[i][j+1];\r\n			}\r\n		}\r\n		printf("%d\\n",a[0][0]);\r\n	}\r\n	return 0;\r\n}'),
(41, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(42, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<1912<<endl;\r\n	return 0;\r\n}'),
(43, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("54250");\r\n    return 0;\r\n}\r\n'),
(44, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a;\r\n	while(cin>>a)\r\n	cout<<a%3<<endl;\r\n	return 0;\r\n}'),
(45, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while( cin >> n)\r\n		cout<<n%3<<endl;\r\n	return 0;\r\n}'),
(46, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1912");\r\n    return 0;\r\n}\r\n'),
(47, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("15");\r\n    return 0;\r\n}\r\n'),
(48, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1949");\r\n    return 0;\r\n}\r\n'),
(49, '#include <stdio.h>\r\nint main ()\r\n{\r\n	int a;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	\r\n	return 0;\r\n}'),
(50, '#include <iostream>\r\nusing namespace std;\r\nint main(int argc, char *argv[])\r\n{\r\n	cout<<0;\r\n	return 0;\r\n}'),
(51, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2228");\r\n    return 0;\r\n}\r\n'),
(52, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	long a,b;\r\n	\r\n\r\n	while(scanf("%ld",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%ld\\n",b);	\r\n	}\r\n	\r\n	return 0;\r\n}'),
(53, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i;\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n		a[i]=a[i]%3;\r\n	for(i=0;i<3;i++)\r\n		printf("%d\\n",a[i]);\r\n}\r\n'),
(54, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint main()\r\n{\r\n	int n,i,a;\r\n	char s[1234][1234];\r\n	while(~scanf("%d",&n))\r\n	{\r\n		getchar();\r\n		for(i=0;i<n;i++)\r\n		{\r\n			gets(s[i]);\r\n		}\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n			printf("%c",s[i][a-1]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(55, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.26415 0.73208");\r\nreturn 0;\r\n}\r\n\r\n'),
(56, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	while(cin>>a)\r\n	{\r\n		b=a%3;\r\n		cout<<b<<endl;\r\n	}\r\n	return 0;\r\n}'),
(57, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int a,i;\r\n	int s[15]={1644, 1949, 1368, 1912, 618, 2007, 2228, 2010, 54250, 2046, 2012, 1735, 0, 1999, 15};\r\n	scanf("%d",&a);\r\n	for(i=0;i<15;i++)\r\n	{\r\n		if(a==s[i])\r\n			printf("%d\\n",s[i]);\r\n	}\r\n	return 0;\r\n}'),
(58, '#include <iostream>\r\nusing namespace std;\r\nint main(int argc, char *argv[])\r\n{\r\n	cout<<15;\r\n	return 0;\r\n}'),
(59, '#include<stdio.h>\r\nint main()\r\n{\r\n	long long a;\r\n	int b;\r\n	while(~scanf("%lld",&a))\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(60, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("54250\\n");\r\n	return 0;\r\n}\r\n'),
(61, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.00943 0.01886");\r\n	return 0;\r\n}'),
(62, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	int re;\r\n	int a;\r\n	int t = 0;\r\n	while( scanf("%d", &n) !=EOF)\r\n	{\r\n		t++;\r\n		re = 0;\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			scanf("%d", &a);\r\n			re = re ^ a;\r\n		}\r\n		printf("Case #%d: %d\\n", t, re);\r\n	}\r\n	return 0;\r\n}'),
(63, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nint main()\r\n{\r\n	\r\n	int n,a,sum,i,j=1;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		sum=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n			sum^=a;\r\n		}\r\n		printf("Case #%d: %d\\n",j++,sum);\r\n	}\r\n	return 0;\r\n}'),
(64, '#include <iostream>\r\nusing namespace std;\r\nint main(int argc, char *argv[])\r\n{\r\n	cout<<54250;\r\n	return 0;\r\n}'),
(65, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int a;\r\n	int s[15]={1644, 1949, 1368, 1912, 618, 2007, 2228, 2010, 54250, 2046, 2012, 1735, 0, 1999, 15};\r\n\r\n\r\n	printf("%d\\n",s[2]);\r\n	return 0;\r\n}'),
(66, '#include "stdio.h"\r\nmain()\r\n{int a[3],i,j,k;\r\nfor(i=0;i<3;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<3;i++)\r\na[i]=a[i]%3;\r\nfor(i=0;i<3;i++)\r\nprintf("%d\\n",a[i]);\r\n}'),
(67, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}\r\n'),
(68, '#include <stdio.h>\r\nint main ()\r\n{\r\n	printf("1912");\r\n	return 0;\r\n}'),
(69, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1368\\n");\r\n	return 0;\r\n}\r\n'),
(70, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while( scanf("%d", &n) !=EOF)\r\n		printf("%d\\n", n%3);\r\n	return 0;\r\n}'),
(71, '#include<stdio.h>\r\nint main()\r\n{\r\n int a,b;\r\n while(scanf("%d",&a)!=EOF)\r\n {\r\n 	b=a%3;\r\n 	printf("%d\\n",b);\r\n }\r\n return 0;\r\n}'),
(72, '#include <stdio.h>\r\nint main ()\r\n{\r\n	printf("54250");\r\n	return 0;\r\n}'),
(73, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n\r\n}'),
(74, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}\r\n'),
(75, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}\r\n'),
(76, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}'),
(77, '#include<iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int b;\r\n	while(cin>>b)\r\n	{\r\n		cout<<b%3<<endl;\r\n	}\r\n	return 0;\r\n}'),
(78, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("32 64 128 256 512");\r\n	return 0;\r\n}'),
(79, '#include <stdio.h>\r\nint main ()\r\n{\r\n	printf("0");\r\n	return 0;\r\n}'),
(80, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}\r\n'),
(81, '#include <cstdio>\r\n#include <vecter>\r\n#include <map>\r\n#include <string>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a[600];\r\n	a[0]=1;\r\n	for(int i = 1; i < 600; ++i)\r\n	{\r\n		a[i] = a[i-1]*2;\r\n	}\r\n	int b;\r\n	while(cin>>b)\r\n	{\r\n		cout<<a[b]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(82, '#include <stdio.h>\r\nint main ()\r\n{\r\n	printf("1949");\r\n	return 0;\r\n}'),
(83, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.01887 0.03774");\r\n	return 0;\r\n}\r\n'),
(84, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("32 64 128 256 512");\r\n	return 0;\r\n}'),
(85, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(86, '#include <cstdio>\r\n#include <map>\r\n#include <string>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a[600];\r\n	a[0]=1;\r\n	for(int i = 1; i < 600; ++i)\r\n	{\r\n		a[i] = a[i-1]*2;\r\n	}\r\n	int b;\r\n	while(cin>>b)\r\n	{\r\n		cout<<a[b]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(87, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}\r\n'),
(88, '#include <stdio.h>\r\nint main ()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}'),
(89, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("15\\n");\r\n	return 0;\r\n}'),
(90, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1912");\r\n	return 0;\r\n}'),
(91, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}\r\n'),
(92, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int a;\r\n	int s[15]={1644, 1949, 1368, 1912, 618, 2007, 2228, 2010, 54250, 2046, 2012, 1735, 0, 1999, 15};\r\n\r\n\r\n	printf("%d\\n",s[12]);\r\n	return 0;\r\n}'),
(93, '# include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(~scanf("%d",&a))\r\n	{printf("%d\\n",a%3);}\r\n	return 0;\r\n}'),
(94, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}\r\n'),
(95, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(96, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("54250\\n");\r\n	return 0;\r\n}'),
(97, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2012\\n");\r\n	return 0;\r\n}\r\n'),
(98, '#include<stdio.h>\r\nint main()\r\n{\r\nint a;\r\nscanf("%d",&a);\r\nif(a>0&&a<255)\r\n   printf("%d",a);\r\n    else\r\nif(a<=0&&a>-256)\r\n   printf("%d",-a);\r\nelse \r\nprintf("%d",2);\r\n   return 0;\r\n   \r\n}'),
(99, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1949\\n");\r\n	return 0;\r\n}\r\n'),
(100, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}'),
(101, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int i;\r\n	while(cin>>i)    \r\n	{\r\n		cout<<i%3<<endl;\r\n	}\r\n	return 0;\r\n}'),
(102, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1725\\n");\r\n	return 0;\r\n}\r\n'),
(103, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("1735\\n");\r\n	return 0;\r\n}\r\n'),
(104, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2228<<endl;\r\n	return 0;\r\n}'),
(105, '#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(106, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[1000]={0,1},c[1000],i,n,f;\r\n	double b,d=1,e=1;\r\n	b=sqrt(5);\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1");\r\n		else\r\n		{\r\n		for(i=0;i<n;i++)\r\n			a[i+2]=a[i]+a[i+1];\r\n		c[n]=a[n-1]+a[n+1];\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			d*=(1+b);\r\n			e*=(1-b);\r\n		}\r\n		f=(d+e)/c[n];\r\n		printf("%d\\n",f);\r\n		}\r\n		i=n=f=0;\r\n		d=e=1;\r\n	}\r\n	return 0;\r\n}'),
(107, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1644\\n");\r\n	return 0;\r\n}'),
(108, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2228<<endl;\r\n	return 0;\r\n}'),
(109, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.01887 0.12858");\r\nreturn 0;\r\n}\r\n\r\n'),
(110, '#include "stdio.h"\r\nmain()\r\n{int a,i,j,k;\r\nscanf("%d",&a);\r\na=a%3;\r\nprintf("%d\\n",a);\r\n}\r\n'),
(111, '#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int i,n;\r\n	double F[602],L[602],p[602];\r\n	F[0]=0;F[1]=1;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n	 		printf("1\\n");\r\n		else\r\n		{\r\n			for(i=0;i<600;i++)\r\n				F[i+2]=F[i+1]+F[i];\r\n			for(i=1;i<=n;i++)\r\n				L[i]=F[i-1]+F[i+1];\r\n			for(i=1;i<=n;i++)\r\n				p[i]=(pow(1+sqrt(5.0),i)+pow(1-sqrt(5.0),i))/L[i];\r\n			printf("%.0lf\\n",p[n]);\r\n		}\r\n	}\r\n	return 0;\r\n}'),
(112, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(113, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	int a;\r\n	int b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\nreturn 0;\r\n}\r\n'),
(114, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15\\n");\r\n	return 0;\r\n}\r\n'),
(115, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1949\\n");\r\n	return 0;\r\n}'),
(116, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}\r\n'),
(117, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2046\\n");\r\n	return 0;\r\n}\r\n'),
(118, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}'),
(119, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[1000]={0,1},c[1000],i,n,f;\r\n	double b,d=1,e=1;\r\n	b=sqrt(5);\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1\\n");\r\n		else\r\n		{\r\n		for(i=0;i<n;i++)\r\n			a[i+2]=a[i]+a[i+1];\r\n		c[n]=a[n-1]+a[n+1];\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			d*=(1+b);\r\n			e*=(1-b);\r\n		}\r\n		f=(d+e)/c[n];\r\n		printf("%d\\n",f);\r\n		}\r\n		i=n=f=0;\r\n		d=e=1;\r\n	}\r\n	return 0;\r\n}'),
(120, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2007\\n");\r\n	return 0;\r\n}\r\n'),
(121, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(122, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a;\r\n	while (cin>>a)\r\n	{\r\n		cout<<a%3<<endl;\r\n	}\r\n	return 0;\r\n}'),
(123, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n'),
(124, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}'),
(125, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07609 0.13208");\r\n	return 0;\r\n}'),
(126, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(127, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[1000]={0,1},c[1000],i,n,f;\r\n	double b,d=1,e=1;\r\n	b=sqrt(5);\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1\\n");\r\n		else\r\n		{\r\n		for(i=0;i<n;i++)\r\n			a[i+2]=a[i]+a[i+1];\r\n		c[n]=a[n-1]+a[n+1];\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			d*=(1+b);\r\n			e*=(1-b);\r\n		}\r\n		f=(d+e)/c[n];\r\n		printf("%d\\n",f);\r\n		}\r\n		i=n=f=0;\r\n		d=e=1;\r\n	}\r\n	return 0;\r\n}'),
(128, '#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int i,n;\r\n	int F[602],L[602],p[602];\r\n	F[0]=0;F[1]=1;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n	 		printf("1\\n");\r\n		else\r\n		{\r\n			for(i=0;i<600;i++)\r\n				F[i+2]=F[i+1]+F[i];\r\n			for(i=1;i<=n;i++)\r\n				L[i]=F[i-1]+F[i+1];\r\n			for(i=1;i<=n;i++)\r\n				p[i]=(pow(1+sqrt(5.0),i)+pow(1-sqrt(5.0),i))/L[i];\r\n			printf("%d\\n",p[n]);\r\n		}\r\n	}\r\n	return 0;\r\n}'),
(129, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a;\r\n	while (cin>>a)\r\n	{\r\n		cout<<a%3<<endl;\r\n	}\r\n	return 0;\r\n}\r\n'),
(130, '0.56604\r\n0.13208'),
(131, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nint main()\r\n{\r\n	\r\n	int a[700],i,j;\r\n	int l[700],n;\r\n	double p;\r\n	a[0]=0;a[1]=1;\r\n	for(i=2;i<=600;i++)\r\n	{\r\n		a[i]=a[i-1]+a[i-2];\r\n	}\r\n	for(i=1;i<=600;i++)\r\n	{\r\n		l[i]=a[i-1]+a[i+1];\r\n	}\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n		{\r\n			printf("1\\n");continue ;\r\n		}\r\n		p=(pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n))/l[n];\r\n		printf("%.0lf\\n",p);\r\n	}\r\n	return 0;\r\n}'),
(132, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int a;\r\n	int s[15]={1644, 1949, 1368, 1912, 618, 2007, 2228, 2010, 54250, 2046, 2012, 1735, 0, 1999, 15};\r\n\r\n\r\n	printf("%d\\n",s[6]);\r\n	return 0;\r\n}'),
(133, '#include<stdio.h>\r\nint main()\r\n{int a;\r\nwhile (scanf("%d",&a))\r\nprintf("%d",a%3);\r\nreturn 0;\r\n}'),
(134, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int i;\r\n	cin>>i ;   \r\n	cout<<i%3<<endl;\r\n	return 0;\r\n}'),
(135, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=0;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(136, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(137, '#include<stdio.h>\r\nint main()\r\n{\r\nint a;\r\nscanf("%d",&a);\r\nif(a>0&&a<32767)\r\n   printf("%d",a);\r\n    else\r\nif(a<=0&&a>-32768)\r\n   printf("%d",-a);\r\nelse \r\nprintf("%d",2);\r\n   return 0;\r\n   \r\n}'),
(138, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=1368;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(139, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=1368;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(140, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nchar a[30];\r\nvoid turn(char a[30])\r\n{\r\n	int i;\r\n	int c=strlen(a);\r\n	for(i=0;i<c;i++)\r\n	{\r\n		if(a[i]==''I'')\r\n			a[i]=1;\r\n		else if(a[i]==''V'')\r\n			a[i]=5;\r\n		else if(a[i]==''X'')\r\n			a[i]=10;\r\n		else if(a[i]==''L'')\r\n			a[i]=50;\r\n		else if(a[i]==''C'')\r\n			a[i]=100;\r\n	}\r\n		int sum=0;\r\n		char max=a[c-1];\r\n		for(i=c-1;i>=0;i--)\r\n		{\r\n			if(a[i]<max)\r\n				sum-=a[i];\r\n			else if(a[i]>max)\r\n			{\r\n				max=a[i];\r\n				sum+=a[i];\r\n			}\r\n			else\r\n			{\r\n				sum+=a[i];\r\n			}\r\n		}\r\n		printf("%d\\n",sum);\r\n}\r\nint main()\r\n{\r\n	int n;\r\n	scanf("%d%*c",&n);\r\n	while(n--)\r\n	{\r\n		gets(a);\r\n		turn(a);\r\n	}\r\n	return 0;\r\n}\r\n		\r\n		\r\n		'),
(141, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.03665 0.13208");\r\n	return 0;\r\n}'),
(142, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(143, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	    \r\n	}\r\n	return 0;\r\n}'),
(144, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=1999;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(145, '#include <stdio.h>\r\nint main()\r\n{int a;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{\r\nprintf("%d\\n",a%3);\r\n}\r\nreturn 0;\r\n\r\n}'),
(146, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;'),
(147, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,j,count=1;\r\n	while(cin>>n)\r\n	{\r\n		j=0;\r\n		while(n--)\r\n		{\r\n			cin>>i;\r\n			j^=i;\r\n		}\r\n		cout<<"Case #"<<count++<<": "<<j<<endl;\r\n	}\r\n	return 0;\r\n}'),
(148, '#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	n=1949;\r\n	cout<<n<<endl;\r\n	return 0;\r\n}'),
(149, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(150, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(151, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 21 44 85 171");\r\n	return 0;\r\n}\r\n'),
(152, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07609 0.13208");\r\n	return 0;\r\n}'),
(153, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("6 12 24 48 96");\r\nreturn 0;\r\n}\r\n'),
(154, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.03737 0.07474\r\n	");\r\n	return 0;\r\n}\r\n'),
(155, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2046\\n");\r\n	return 0;\r\n}'),
(156, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long a;\r\n	while(cin >> a)\r\n	{\r\n		cout<<a % 3<<endl;\r\n	}\r\n	return 0;\r\n}'),
(157, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n    while (scanf("%d",&a))\r\nprintf("%d\\n",a%3);\r\nreturn 0;\r\n}'),
(158, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(159, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("%d",54250);\r\n}'),
(160, '#include<stdio.h>\r\nint main()\r\n{\r\n    int a,b;\r\n    while(scanf("%d",&a)!=EOF)\r\n    {\r\n        b=a%3;\r\n        printf("%d\\n",b);\r\n    }\r\n    return 0;\r\n}\r\n'),
(161, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}'),
(162, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("5 9 13 21 37");\r\n	return 0;\r\n}'),
(163, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n}'),
(164, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("54250\\n");\r\n	return 0;\r\n}'),
(165, '#include<stdio.h>\r\nint main()\r\n{\r\n    int a;\r\n    while (scanf("%d",&a))\r\n    printf("%d\\n",a%3);\r\n    return 0;\r\n}'),
(166, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("15\\n");\r\n	return 0;\r\n}'),
(167, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(168, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}'),
(169, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(170, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int i;\r\n	while(cin>>i ) \r\n	{\r\n	cout<<i%3<<endl;\r\n	}\r\n	return 0;\r\n}'),
(171, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2012\\n");\r\n	return 0;\r\n}'),
(172, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}'),
(173, '#include <iostream>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <string>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	char str[256][256];\r\n	int a;\r\n	while( scanf("%d", &n) !=EOF)\r\n	{\r\n		getchar();\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			gets( str[i]);\r\n		}\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			scanf("%d", &a);\r\n			printf("%c", str[i][a-1]);	\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(174, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while((scanf("%d",&a))!=0)\r\n	{\r\n		b=a%3;\r\n	printf("%d\\n",b);\r\n	}	\r\n}'),
(175, '#include<stdio.h>\r\n#include<math.h>\r\nint fn(int n);\r\nint main ()\r\n{\r\n	int n;\r\n	double p,ln;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n	if (n==0)\r\n		printf("1\\n");\r\n	else\r\n	{	\r\n	ln=fn(n-1)+fn(n+1);\r\n	p=(pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n))/(ln);\r\n	printf("%.0lf\\n",p);\r\n	}\r\n	}\r\n	return 0;\r\n}\r\n\r\n\r\nint fn(int n)\r\n{\r\n	int a;\r\n	if (n==0)\r\n	{\r\n		a=0;\r\n	}\r\n	else\r\n	{\r\n		if (n==1)\r\n		{\r\n			a=1;\r\n		}\r\n		else\r\n		{\r\n			a=fn(n-1)+fn(n-2);\r\n		}\r\n	}\r\n\r\n	return a;\r\n}\r\n'),
(176, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("%d",1644);\r\n}'),
(177, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("3 8 13 15 22");\r\n	return 0;\r\n}'),
(178, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("12 24 48 96 192");\r\nreturn 0;\r\n}\r\n'),
(179, '#include "stdio.h"\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<10;i++)\r\na[i]=a[i]%3;\r\nfor(i=0;i<10;i++)\r\nprintf("%d\\n",a[i]);\r\n}\r\n'),
(180, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2007\\n");\r\n	return 0;\r\n}'),
(181, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1644\\n");\r\n	return 0;\r\n}'),
(182, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1735\\n");\r\n	return 0;\r\n}'),
(183, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	cout << 15 << endl;\r\n	return 0;\r\n}'),
(184, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",(int)pow(2,n));\r\n	}\r\n	return 0;\r\n}'),
(185, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(186, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}'),
(187, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(188, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	cout << 2012 << endl;\r\n	return 0;\r\n}'),
(189, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	int n,i,j;\r\n	int s[123][123];\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&s[i][j]);\r\n			}\r\n		}\r\n		\r\n		for(i=n-2;i>=0;i--)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				if(s[i+1][j] > s[i+1][j+1]) s[i][j]+=s[i+1][j];\r\n				else s[i][j]+=s[i+1][j+1];\r\n			}\r\n		}\r\n		printf("%d\\n",s[0][0]);\r\n	}\r\n	return 0;\r\n}\r\n'),
(190, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1949\\n");\r\n	return 0;\r\n}'),
(191, '#include<stdio.h>\r\nint main()\r\n{\r\n	int c=0,n,s,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		c++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			s^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n	}\r\n	return 0;\r\n}'),
(192, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	cout << 2228 << endl;\r\n	return 0;\r\n}'),
(193, 'import java.util.*;\r\nimport java.math.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger a[] = new BigInteger[600];\r\n		a[0] = 1;\r\n	 	for(int i = 1; i < 600; ++i)\r\n	 	{\r\n	 		a[i] = a[i-1].mul(2);\r\n	 	}\r\n	 	while(sc.hasnext())\r\n	 	{\r\n	 		System.out.println(a[sc.nextInt()]);\r\n	 	}\r\n	}\r\n}'),
(194, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 0;\r\n}'),
(195, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(196, '0.00804\r\n0.00402'),
(197, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3];\r\n	for(int i=0;i<3;i++)\r\n		cin>>a[i];\r\n	for(int j=0;j<3;j++)\r\n	{\r\n		b[j]=a[j]%3;\r\n		cout<<b[j]<<endl;\r\n	}\r\n}'),
(198, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1368\\n");\r\n	return 0;\r\n}'),
(199, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 54250;\r\n}'),
(200, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b,n,i;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		a=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>b;\r\n			a=a^b;\r\n		}\r\n		cout<<a<<endl;\r\n	}\r\n	return 0;\r\n}'),
(201, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.12963 0.06481\\n");\r\nreturn 0;\r\n}'),
(202, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 1735;\r\n}'),
(203, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}'),
(204, '#include <stdio.h>\r\n#include <string.h>\r\nchar f[5]={''C'',''L'',''X'',''V'',''I''};\r\nint ba[5]={100,50,10,5,1};\r\nint fun(char s[])\r\n{\r\n	if(!s[0])\r\n		return 0;\r\n	int i,j,k,b=0;\r\n	for(i=0;i<5;++i)\r\n		for(j=0;s[j];++j)\r\n			if(s[j]==f[i])\r\n			{\r\n				for(k=j;s[k]==f[i];++k)\r\n				{\r\n					b+=ba[i];\r\n					s[k]=0;\r\n				}\r\n				return b-fun(s)+fun(s+k);\r\n			}\r\n}\r\n\r\nint main()\r\n{\r\n	char s[32];\r\n	int n;\r\n	while(n--)\r\n	{\r\n		gets(s);\r\n		printf("%d\\n",fun(s));\r\n	}\r\n	return 0;\r\n}'),
(205, 'import java.util.*;\r\nimport java.math.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger a[] = new BigInteger[600];\r\n		a[0] = 1;\r\n	 	for(int i = 1; i < 600; ++i)\r\n	 	{\r\n	 		a[i] = a[i-1].mul(2);\r\n	 	}\r\n	 	while(sc.hasnext())\r\n	 	{\r\n	 		int b = sc.nextInt();\r\n	 		System.out.println(a[b]);\r\n	 	}\r\n	}\r\n}'),
(206, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 1999;\r\n}'),
(207, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 55 4900");\r\n	return 0;\r\n}'),
(208, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 15;\r\n}'),
(209, '#include<stdio.h>]\r\nint main()\r\n{\r\n	int s,a,i,n,g=1;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		s=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n		    s=s^a;\r\n		}\r\n	   printf("Case #%d: %d\\n",g,s);\r\n	   g++;\r\n	}\r\n	return 0;\r\n}'),
(210, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(211, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  n,a;\r\nscanf("%d",&n);\r\na=n%3;\r\nprintf("%d\\n",a);\r\nreturn  0;\r\n}\r\n'),
(212, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 2012;\r\n}'),
(213, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(214, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 2046;\r\n}'),
(215, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}\r\n\r\n'),
(216, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 201 511 22223 62853");\r\n	return 0;\r\n}'),
(217, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 54250;\r\n}'),
(218, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("64 128 256 512 1024");\r\n	return 0;\r\n}'),
(219, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  n,a;\r\nscanf("%d",&n);\r\na=n%3;\r\nprintf("%d\\n",a);\r\nreturn  0;\r\n}\r\n'),
(220, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b,n,i,count;\r\n	count =0;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		a=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>b;\r\n			a=a^b;\r\n		}\r\n		count++;\r\n		cout<<"Case"<<" "<<"#"<<count<<":"<<" ";\r\n		cout<<a<<endl;\r\n	}\r\n	return 0;\r\n}'),
(221, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 2010;\r\n}'),
(222, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a;\r\n	while (scanf("%d",&a)!=EOF)\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}\r\n'),
(223, '#include<stdio.h>\r\nint main()\r\n{\r\n	long a,b;\r\n	while(scanf("%ld",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%ld",b);\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(224, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a,b;\r\n	while(1)\r\n	{\r\n		\r\n		scanf("%d",&a);\r\n	    b=a%3;\r\n	    printf("%d\\n",b);\r\n	}\r\n}'),
(225, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2 8 13 15 22");\r\n	return 0;\r\n}'),
(226, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int h[200][200];\r\n	int dp[200][200];\r\n	int n;\r\n	while( cin >> n)\r\n	{\r\n		memset( dp, 0, sizeof(dp));\r\n		memset(h, 0, sizeof(h));\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			for( int j=1; j<=i; j++)\r\n			{\r\n				cin >> h[i][j];\r\n			}\r\n		}\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			for( int j=1; j<=i; j++)\r\n			{\r\n				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + h[i][j];\r\n			}\r\n		}\r\n		int maxx = -1;\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			if( maxx < dp[n][i])\r\n				maxx = dp[n][i];	\r\n		}\r\n		cout << maxx << endl;\r\n	}\r\n	return 0;\r\n}'),
(227, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(228, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 2228;\r\n}'),
(229, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int i;\r\n    for(int j=0;j<3;j++)\r\n    {\r\n	cin>>i;\r\n	{\r\n	cout<<i%3<<endl;\r\n	}\r\n    }\r\n	return 0;\r\n}'),
(230, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 2007;\r\n}'),
(231, '#include <stdio.h>\r\n#include <string.h>\r\nchar f[5]={''C'',''L'',''X'',''V'',''I''};\r\nint ba[5]={100,50,10,5,1};\r\nint fun(char s[])\r\n{\r\n	if(!s[0])\r\n		return 0;\r\n	int i,j,k,b=0;\r\n	for(i=0;i<5;++i)\r\n		for(j=0;s[j];++j)\r\n			if(s[j]==f[i])\r\n			{\r\n				for(k=j;s[k]==f[i];++k)\r\n				{\r\n					b+=ba[i];\r\n					s[k]=0;\r\n				}\r\n				return b-fun(s)+fun(s+k);\r\n			}\r\n}\r\n\r\nint main()\r\n{\r\n	char s[32];\r\n	int n;\r\n	while(n--)\r\n	{\r\n		gets(s);\r\n		printf("%d\\n",fun(s));\r\n	}\r\n	return 0;\r\n}'),
(232, '#include <iostream>\r\n#include <string.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int h[200][200];\r\n	int dp[200][200];\r\n	int n;\r\n	while( cin >> n)\r\n	{\r\n		memset( dp, 0, sizeof(dp));\r\n		memset(h, 0, sizeof(h));\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			for( int j=1; j<=i; j++)\r\n			{\r\n				cin >> h[i][j];\r\n			}\r\n		}\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			for( int j=1; j<=i; j++)\r\n			{\r\n				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + h[i][j];\r\n			}\r\n		}\r\n		int maxx = -1;\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			if( maxx < dp[n][i])\r\n				maxx = dp[n][i];	\r\n		}\r\n		cout << maxx << endl;\r\n	}\r\n	return 0;\r\n}'),
(233, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,j;\r\n	int c[110][110]={0};\r\n	while(cin>>n)\r\n	{\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				cin>>c[i][j];\r\n			}\r\n		}\r\n		for(i=n-1;i>0;i--)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				c[i][j]+=(c[i+1][j]>c[i+1][j+1] ? c[i+1][j] : c[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<c[1][1]<<endl;\r\n	}\r\n	return 0;\r\n} '),
(234, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int i,n,m;\r\n	char a[100][100];\r\n	int b[100];\r\n	while(~scanf("%d",&n))\r\n	{\r\n		i=0;\r\n		getchar();\r\n		m=n;\r\n		while(n--)\r\n		{\r\n			gets(a[i]);\r\n			i++;\r\n		}\r\n		for(i=0;i<m;i++)\r\n		{\r\n			scanf("%d",&b[i]);\r\n		}\r\n		for(i=0;i<m;i++)\r\n			printf("%c",a[i][b[i]-1]);\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(235, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n	return 0;\r\n}'),
(236, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 1386;\r\n}'),
(237, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("8 16 32 64 128");\r\n	return 0;\r\n}'),
(238, '#include<stdio.h>\r\nint main()\r\n{\r\nreturn 618;\r\n}'),
(239, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[600]={0,1},l,p,n;\r\n	for(int i=2;i<600;i++)\r\n	{\r\n		a[i]=a[i-1]+a[i-2];\r\n	}\r\n	while(~scanf("%d",&n))\r\n	{\r\n		float sum1=1,sum2=1;\r\n		if(n==0)\r\n		{\r\n			printf("1\\n");\r\n		}\r\n		else\r\n	{\r\n			 for(int i=1;i<=n;i++)\r\n	   {\r\n		  l=a[i-1]+a[i+1];\r\n		  sum1=sum1*(1+sqrt(5));\r\n		  sum2=sum2*(1-sqrt(5));\r\n		  \r\n	   }\r\n	   p=(sum1+sum2)/l;\r\n	   printf("%d\\n",p);	\r\n	}\r\n	}'),
(240, 'import java.util.*;\r\nimport java.math.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger a[] = new BigInteger[600];\r\n		a[0] = new BigInteger(1);\r\n	 	for(int i = 1; i < 600; ++i)\r\n	 	{\r\n	 		a[i] = a[i-1].mul(2);\r\n	 	}\r\n	 	while(sc.hasnext())\r\n	 	{\r\n	 		int b = sc.nextInt();\r\n	 		System.out.println(a[b]);\r\n	 	}\r\n	}\r\n}'),
(241, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,c,d,b;\r\n	scanf("%d",&a);\r\n	scanf("%d",&c);\r\n	scanf("%d",&d);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n\r\n	b=c%3;\r\n	printf("%d\\n",b);\r\n	b=d%3;\r\n	printf("%d\\n",b);\r\n}\r\n\r\n\r\n'),
(242, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(243, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 60 4600");\r\n	return 0;\r\n}'),
(244, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n    while(scanf("%d",&a))\r\n	{\r\n	printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(245, 'import java.util.*;\r\nimport java.math.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger[] a = new BigInteger[600];\r\n		a[0] = new BigInteger(1);\r\n	 	for(int i = 1; i < 600; ++i)\r\n	 	{\r\n	 		a[i] = a[i-1].mul(2);\r\n	 	}\r\n	 	while(sc.hasnext())\r\n	 	{\r\n	 		int b = sc.nextInt();\r\n	 		System.out.println(a[b]);\r\n	 	}\r\n	}\r\n}'),
(246, '#include<stdio.h>\r\nint main()\r\n{\r\nint  a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\nreturn  0;\r\n}\r\n\r\n'),
(247, '#include <iostream>\r\n#include <math.h>\r\nusing namespace std;\r\nint main ()\r\n{\r\n	int Fn(int w);\r\n	double Ln(int q);\r\n	int n;\r\n	cin>>n;\r\n	if(n==0)\r\n	{cout<<"0"<<endl;\r\n	}\r\n	else \r\n	{double p,a,b,c;\r\n	a=sqrt(5);\r\n	b=1+a;\r\n	b=pow(b,n);\r\n	c=1-a;\r\n	c=pow(c,n);\r\n	b=b+c;\r\n	p=b/Ln(n);\r\n	cout<<p<<endl;	\r\n}\r\nreturn(0);}\r\n\r\n\r\ndouble Ln(int q)\r\n{\r\n	int Fn(int w);\r\n	double l;\r\n	int k;\r\n	k=q-1;\r\n	l=Fn(k);\r\n	k=q+1;\r\n	l=l+Fn(k);\r\n	return(l);\r\n}\r\n\r\n\r\nint Fn(int w)\r\n{\r\n	int z[w];\r\n	int i;\r\n	z[0]=0;\r\n	z[1]=1;\r\n	for(i=2;i<w;i++)\r\n	{\r\n		z[i]=z[i-1]+z[i-2];\r\n	}\r\n	int m;\r\n	m=w-1;\r\n	m=z[m];\r\n	return(m);\r\n}\r\n'),
(248, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[600]={0,1},l,p,n;\r\n	for(int i=2;i<600;i++)\r\n	{\r\n		a[i]=a[i-1]+a[i-2];\r\n	}\r\n	while(~scanf("%d",&n))\r\n	{\r\n		float sum1=1,sum2=1;\r\n		if(n==0)\r\n		{\r\n			printf("1\\n");\r\n		}\r\n		else\r\n	   {\r\n			 for(int i=1;i<=n;i++)\r\n	       {\r\n		     l=a[i-1]+a[i+1];\r\n		     sum1=sum1*(1+sqrt(5));\r\n		     sum2=sum2*(1-sqrt(5));		  \r\n	       }\r\n	     p=(sum1+sum2)/l;\r\n	     printf("%d\\n",p);	\r\n	  }\r\n	}\r\n    return 0;\r\n}'),
(249, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 1668 32764 41728394 49382716");\r\n	return 0;\r\n}'),
(250, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[100][100];\r\n	int t[100],i,n=0;\r\n	char c[100];\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		c[i]=a[i][t[i]];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(251, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,d,i;\r\n	char *p,b[100][100];\r\n	while(scanf("%d",&a)!=EOF)\r\n	{getchar();\r\n		for(i=0;i<a;i++)\r\n		{\r\n		gets(&b[i][0]);\r\n		//puts(b[i]);\r\n		}\r\n	\r\n	//getchar();\r\n		for(i=0;i<a;i++)\r\n		{\r\n			\r\n			scanf("%d",&d);\r\n	\r\n			printf("%c",b[i][d-1]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	\r\n	return 0;\r\n}'),
(252, '#include<iostream>\r\n#include<stdio.h>\r\n#include<string>\r\nusing namespace std;\r\nchar a[100][100];\r\nchar b[100];\r\nint main()\r\n{\r\n	int i,j,k,c;\r\n	cin>>k;\r\n	getchar();\r\n	for(i=0;i<k;i++)\r\n	{\r\n		cin.getline(a[i],99,''\\n'');\r\n		\r\n	}\r\n	for(i=0;i<k;i++)\r\n	{\r\n		cin>>c;\r\n		b[i]=a[i][c-1];\r\n		\r\n	}\r\n	printf("%s\\n",b);\r\n	return 0;\r\n}\r\n'),
(253, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n	printf("%d\\n",b);\r\n	}\r\n	return 0;	\r\n} '),
(254, '#include<stdio.h>\r\nint main()\r\n{printf("0");\r\n\r\n}'),
(255, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d",b);\r\n\r\n}'),
(256, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(257, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,b,i;\r\n	for(i=0;i<20;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n}\r\n\r\n'),
(258, '#include "stdio.h"\r\nmain()\r\n{int a[10],i,m;\r\nscanf("%d",&m);\r\nfor(i=0;i<m;i++)\r\nscanf("%d",&a[i]);\r\nprintf("%d\\n",m/2+1);\r\n}'),
(259, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("1999");\r\n}'),
(260, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("15");\r\n}'),
(261, '#include <stdio.h>\r\nint main()\r\n{\r\n	int i,j=0,n,a;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		n/=2;\r\n		for(i=0;i<n;++i)\r\n		scanf("%*d");\r\n		scanf("%d",&a);\r\n		for(i=0;i<n;++i)\r\n		scanf("%*d");\r\n		printf("Case #%d: %d\\n",++j,a);\r\n	}\r\n	return 0;\r\n}'),
(262, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("54250");\r\n}'),
(263, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 6 6 4 4");\r\n	return 0;\r\n}'),
(264, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint main()\r\n{\r\n	int n,i,sum;\r\n	char s[1234];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		scanf("%s",s);\r\n		int len = strlen(s);\r\n		for(i=0;i<len;i++)\r\n		{\r\n			switch(s[i])\r\n			{\r\n				case ''I'':s[i]=1;break;\r\n				case ''V'':s[i]=5;break;\r\n				case ''X'':s[i]=10;break;\r\n				case ''L'':s[i]=50;break;\r\n				case ''C'':s[i]=100;break;\r\n				default:break;\r\n			}\r\n		}\r\n		sum = s[0];\r\n		for(i=1;i<len;i++)\r\n		{\r\n			if(s[i]<=s[i-1])\r\n			{\r\n				sum = sum + s[i];\r\n			}\r\n			else\r\n			{\r\n				sum = sum + s[i];\r\n				sum = sum - 2*s[i-1];\r\n			}\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(265, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int a,b,i;\r\n	for(i=0;i<20;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n}\r\n\r\n'),
(266, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(267, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1949");\r\n	return 0;\r\n}'),
(268, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("17 16 11 13 12");\r\n	return 0;\r\n}\r\n'),
(269, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("1735");\r\n}'),
(270, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Dannie Woart Dannie Woart Dannie");\r\n	return 0;\r\n}\r\n'),
(271, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a,b,i;\r\n	for(i=0;i<4;i++)\r\n	{\r\n		scanf("%d",&a);\r\n	    b=a%3;\r\n	    printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(272, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int a,b,i;\r\n	for(i=0;i<20;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}\r\n\r\n'),
(273, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(274, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 20576131 164609053");\r\n	return 0;\r\n}'),
(275, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("54250");\r\n	return 0;\r\n}'),
(276, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2012");\r\n}'),
(277, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(278, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    double a[600],b[600],c[600];\r\n	a[0]=0;\r\n	a[1]=1;\r\n	for(int i=0;i<588;i++)\r\n	{\r\n		a[i+2]=a[i+1]+a[i];\r\n	}\r\nfor(int j=1;j<599;j++)\r\n{\r\nb[j]=a[j-1]+a[j+1];\r\n}\r\ndouble x,y;\r\nfor(int k=0;k<599;k++)\r\n{\r\n	x=y=1;\r\n	for(int q=0;q<k;q++)\r\n	{\r\n		\r\n		x=x*(1+sqrt(5));\r\n		y=y*(1-sqrt(5));\r\n	}\r\n	c[k]=(x+y)/b[k];\r\n}\r\nint n;\r\nc[0]=1;\r\nfor(int w=0;w<3;w++)\r\n{cin>>n;\r\ncout<<c[n]<<endl;}\r\n\r\n}\r\n\r\n'),
(279, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("54250");\r\n	return 0;\r\n}'),
(280, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2046");\r\n}'),
(281, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 13108 24691358 197530865");\r\n	return 0;\r\n}'),
(282, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(283, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0");\r\n	return 0;\r\n}'),
(284, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}\r\n'),
(285, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2228");\r\n	return 0;\r\n}\r\n	\r\n'),
(286, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0");\r\n	return 0;\r\n}'),
(287, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("15");\r\nreturn 0;\r\n}'),
(288, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(289, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(290, '#include <stdio.h>\r\nint main()\r\n{\r\n	int j=0,n,a,x=0;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		x=0;\r\n		while(n--)\r\n		{\r\n			scanf("%d",&a);\r\n			x^=a;\r\n		}\r\n		printf("Case #%d: %d\\n",++j,x);\r\n	}\r\n	return 0;\r\n}'),
(291, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,a,tmp;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			scanf("%d",&tmp);\r\n			a ^= tmp;\r\n		}\r\n		printf("%d\\n",a);\r\n	}\r\n	return 0;\r\n}\r\n'),
(292, '#include<stdio.h>\r\nint main()\r\n{\r\n	while(1)\r\n	{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n	}\r\n}'),
(293, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a,b,i;\r\n   for(i=0;i<3;i++)\r\n	{\r\n		scanf("%d",&a);\r\n	    b=a%3;\r\n	    printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(294, 'Woart'),
(295, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Dannie");\r\n	return 0;\r\n}\r\n'),
(296, '#include<stdio.h>\r\n#include<string.h>\r\nint map[200][200];\r\nint sum[200][200];\r\nint max(int a,int b)\r\n{\r\n	if(a>b)\r\n	return a;\r\n	else\r\n	return b;\r\n}\r\nint main()\r\n{\r\n	int n,i,j;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(sum,0,sizeof(sum));\r\n		memset(map,0,sizeof(map));\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				scanf("%d",&map[i][j]);\r\n			}\r\n		}\r\n		for(i=n;i>=1;i--)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				sum[i][j]=max(sum[i+1][j],sum[i+1][j+1])+map[i][j];\r\n			}\r\n		}\r\n		printf("%d\\n",sum[1][1]);\r\n	}\r\n	return 0;\r\n}'),
(297, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("15");\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(298, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(299, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("1999");\r\nreturn 0;\r\n}'),
(300, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[101][101];\r\n	int h;\r\n	while(scanf("%d",&h)!=EOF)\r\n	{\r\n		\r\n	\r\n		for(int i=0;i<h;i++)\r\n		{\r\n			for(int j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n			}		\r\n		}\r\n		for(int m=h-1;m>0;m--)\r\n		{\r\n			for(int n=0;n<h-1;n++)\r\n			{\r\n				if(a[m][n]>a[m][n+1])\r\n				{\r\n					a[m-1][n]+=a[m][n];\r\n				}	\r\n				else\r\n				{\r\n					a[m-1][n]+=a[m][n+1];	\r\n				}\r\n			\r\n			}\r\n		}\r\n		printf("%d\\n",a[0][0]);\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(301, '#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int i,n,m,l;\r\n	cin>>i;\r\n	for(n=0;n<i;n++)\r\n	{\r\n		m=3*n;\r\n		if(i-m<3)break;\r\n	}\r\n	l=i-m;\r\n	cout<<l;\r\n	return 0;\r\n}'),
(302, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0");\r\nreturn 0;\r\n}'),
(303, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int n,a,tmp;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			scanf("%lld",&tmp);\r\n			a ^= tmp;\r\n		}\r\n		printf("%lld\\n",a);\r\n	}\r\n	return 0;\r\n}\r\n'),
(304, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(305, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.77778 0.43750");\r\n	return 0;\r\n}\r\n'),
(306, '#include<stdio.h>        \r\n#include<math.h>         \r\nint main ()              \r\n{                        \r\n	int b;                  \r\n    long a;              \r\n    scanf("%ld",&a);     \r\n    b=a%3;               \r\n    printf("%d",b);      \r\n	                        \r\n }                       '),
(307, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("1735");\r\nreturn 0;\r\n}'),
(308, '#include<stdio.h>\r\n#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\n\r\nchar a[100][100];\r\nchar b[100];\r\n\r\nint main()\r\n{\r\n	int n,m;\r\n	int i,j;\r\n	cin>>n;\r\n	getchar();\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin.getline(a[i],99,''\\n'');\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>m;\r\n		b[i]=a[i][m-1];\r\n	}\r\n	printf("%s\\n",b);\r\n	return 0;\r\n}'),
(309, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a,tmp;\r\n	int n;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			scanf("%lld",&tmp);\r\n			a ^= tmp;\r\n		}\r\n		printf("%lld\\n",a);\r\n	}\r\n	return 0;\r\n}\r\n'),
(310, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Woart");\r\n	return 0;\r\n}'),
(311, '#include<iostream>\r\n#include<string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,k,sum;\r\n	char c[10]={0};\r\n	cin>>n;\r\n	getchar();\r\n	while(n--)\r\n	{\r\n		sum=0;\r\n		gets(c);\r\n		k=strlen(c);\r\n		for(i=k-1;i>0;i--)\r\n		{\r\n			if(c[i]==''C'')\r\n			{\r\n				if(c[i-1]==''X'')\r\n				{\r\n					sum+=90;\r\n					i--;\r\n				}\r\n				else\r\n				    sum+=100;\r\n                continue;\r\n			}\r\n			if(c[i]==''L'')\r\n			{\r\n				if(c[i-1]==''X'')\r\n				{\r\n					sum+=40;\r\n					i--;\r\n				}\r\n				else\r\n				    sum+=50;\r\n                continue;\r\n			}\r\n			if(c[i]==''X'')\r\n			{\r\n				if(c[i-1]==''I'')\r\n				{\r\n					sum+=9;\r\n					i--;\r\n				}\r\n				else\r\n				    sum+=10;\r\n                continue;\r\n			}\r\n			if(c[i]==''V'')\r\n			{\r\n				if(c[i-1]==''I'')\r\n				{\r\n					sum+=4;\r\n					i--;\r\n				}\r\n				else\r\n				    sum+=5;\r\n                continue;\r\n			}\r\n			if(c[i]==''I'')\r\n			{\r\n				sum+=1;\r\n				continue;\r\n			}\r\n		}\r\n		if(c[0]==''C'')\r\n  			sum+=100;\r\n		if(c[0]==''L'')\r\n			sum+=50;\r\n		if(c[0]==''X'' && c[1]!=''L''&& c[1]!=''C'')\r\n			sum+=10;\r\n		if(c[0]==''V'')\r\n			sum+=5;\r\n		if(c[0]==''I'' && c[1]!=''V''&& c[1]!=''X'')\r\n			sum+=1;\r\n		cout<<sum<<endl;\r\n	}\r\n	return 0;\r\n}'),
(312, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2012");\r\nreturn 0;\r\n}'),
(313, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3 9 13 15 20");\r\nreturn 0;\r\n}\r\n'),
(314, '#include<stdio.h>        \r\n#include<math.h>         \r\nint main ()              \r\n{                        \r\n	int b;                  \r\n    long a;              \r\n    scanf("%ld",&a);     \r\n    b=a%3;               \r\n    printf("%d",b);      \r\n	                        \r\n }                       '),
(315, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\nstruct node \r\n{\r\n	int len,a[1000];\r\n}k[601];\r\nint main()\r\n{\r\n	int i,j,len=1,m,n;\r\n	memset(k,0,sizeof(k));\r\n	k[0].a[0]=1;k[1].a[0]=2;k[0].len=k[1].len=1;\r\n	for(i=2;i<=600;i++)\r\n	{\r\n		for(j=0,m=0;j<len;j++)\r\n		{\r\n			k[i].a[j]+=k[i-1].a[j]*2+m;\r\n			m=k[i].a[j]/10;\r\n			k[i].a[j]=k[i].a[j]%10;\r\n		}\r\n		k[i].len=len;\r\n		if(m>0)\r\n		{\r\n			k[i].a[len]=m;\r\n			len++;\r\n			k[i].len=len;\r\n		}\r\n	}\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=k[n].len-1;i>=0;i--)\r\n		{\r\n			printf("%d",k[n].a[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(316, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    double a[600],b[600],c[600];\r\n	a[0]=0;\r\n	a[1]=1;\r\n	for(int i=0;i<588;i++)\r\n	{\r\n		a[i+2]=a[i+1]+a[i];\r\n	}\r\nfor(int j=1;j<599;j++)\r\n{\r\nb[j]=a[j-1]+a[j+1];\r\n}\r\ndouble x,y;\r\nfor(int k=0;k<599;k++)\r\n{\r\n	x=y=1;\r\n	for(int q=0;q<k;q++)\r\n	{\r\n		\r\n		x=x*(1+sqrt(5));\r\n		y=y*(1-sqrt(5));\r\n	}\r\n	c[k]=(x+y)/b[k];\r\n}\r\nint n,p3[3],g;\r\nc[0]=1;\r\nfor(int w=0;w<3;w++)\r\n{\r\n	cin>>p3[w];\r\n}\r\nfor(int w1=0;w1<3;w1++)\r\n{\r\n	g=p3[w1];\r\n	cout<<c[g]<<endl;\r\n}\r\n\r\n}\r\n'),
(317, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2046");\r\nreturn 0;\r\n}'),
(318, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("54250");\r\nreturn 0;\r\n}'),
(319, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 13108 24691358 197530865");\r\n	return 0;\r\n}'),
(320, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2046");\r\nreturn 0;\r\n}'),
(321, '#include<stdio.h>\r\nint main()\r\n{\r\nint  a=4,b;\r\nb=a%3;\r\nprintf("%d\\n",b);\r\nreturn  0;\r\n}\r\n\r\n\r\n'),
(322, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(323, '#include<stdio.h>           \r\nint main ()                 \r\n{                           \r\n	int b;                     \r\n    long a;                 \r\n    scanf("%ld",&a);        \r\n    b=a%3;                  \r\n    printf("%d",b);         \r\n	                           \r\n }                          '),
(324, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("9 21 21 40 40");\r\nreturn 0;\r\n}\r\n'),
(325, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2010");\r\nreturn 0;\r\n}'),
(326, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.63636 0.43750");\r\n	return 0;\r\n}\r\n'),
(327, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 22 44 88 176");\r\n	return 0;\r\n}\r\n'),
(328, '#include <stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char a[10];int b,c=1,i,n,j;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		b=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%s",a);\r\n			j=strlen(a);\r\n			if((*(a+j-1)-''0'')%2!=0)\r\n				b++;\r\n		}\r\n		printf("Case #%d:",c);\r\n		printf("%d\\n",b);\r\n		c++;\r\n	}\r\n	\r\n	return 0;\r\n}'),
(329, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}\r\n'),
(330, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#define MAXH 1000000009\r\nint s[MAXH];\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int n,i,j=1;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=1;i<=n;i++)\r\n			scanf("%d",s[i]);\r\n		\r\n		qsort(&s[1],n,sizeof(int),hehe);\r\n		for(i=1;i<n;i++)\r\n		{\r\n			if(s[i]==s[i+1])\r\n				i++;\r\n			else if(s[i]!=s[i+1])\r\n			{\r\n				printf("Case #%d: %d",j,s[i]);\r\n				j++;\r\n				break;\r\n			}\r\n		}\r\n		if(i==n)\r\n		{\r\n			printf("Case #%d: %d",j,s[i]);\r\n			j++;\r\n		}\r\n	}\r\n	return 0;\r\n}'),
(331, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i,b[3];\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n		b[i]=a[i]%3;\r\n	for(i=0;i<3;i++)\r\n		printf("%d\\n",b[i]);\r\n}\r\n'),
(332, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("2228");\r\nreturn 0;\r\n}'),
(333, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 13108 24691358 197530865");\r\n	return 0;\r\n}'),
(334, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 6 9");\r\n	return 0;\r\n}'),
(335, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 5001 32769 62728394 493827160");\r\n	return 0;\r\n}'),
(336, '#include <iostream>\r\n#include <math.h>\r\nusing namespace std;\r\nint main ()\r\n{\r\n	int Fn(int w);\r\n	int Ln(int q);\r\n	int n;\r\n	cin>>n;\r\n	if(n==0)\r\n	{cout<<"1"<<endl;\r\n	}\r\n	else \r\n	{int p,a,b,c;\r\n	a=sqrt(5);\r\n	b=1+a;\r\n	b=pow(b,n);\r\n	c=1-a;\r\n	c=pow(c,n);\r\n	b=b+c;\r\n	p=b/Ln(n);\r\n	cout<<p<<endl;	\r\n}\r\nreturn 0;}\r\n\r\n\r\nint Ln(int q)\r\n{\r\n	int Fn(int w);\r\n	int l;\r\n	int k;\r\n	k=q-1;\r\n	l=Fn(k);\r\n	k=q+1;\r\n	l=l+Fn(k);\r\n	return(l);\r\n}\r\n\r\n\r\nint Fn(int w)\r\n{\r\n	int z[w];\r\n	int i;\r\n	z[0]=0;\r\n	z[1]=1;\r\n	if(w>2)\r\n	{for(i=2;i<w;i++)\r\n	{\r\n		z[i]=z[i-1]+z[i-2];\r\n	}\r\n	}\r\n	int m;\r\n	m=w-1;\r\n	m=z[m];\r\n	return(m);\r\n}\r\n'),
(337, '#include <stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char a[10];int b,c=1,i,n,j;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		b=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%s",a);\r\n			j=strlen(a);\r\n			if((*(a+j-1)-''0'')%2!=0)\r\n				b++;\r\n		}\r\n		printf("Case #%d: ",c);\r\n		printf("%d\\n",b);\r\n		c++;\r\n	}\r\n	\r\n	return 0;\r\n}'),
(338, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 13108 24691358 197530865");\r\n	return 0;\r\n}'),
(339, '#include<iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int s,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			s^=temp;\r\n		}\r\n		cout<<"Case #"<<temp1<<":"<<s<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(340, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("618");\r\n	return 0;\r\n}'),
(341, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("101000065536123456789987654320\\n");\r\nreturn 0;\r\n}'),
(342, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("618");\r\n	return 0;\r\n}'),
(343, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[100][100];\r\n	int t[100],i,n=0;\r\n	char c[100];\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		c[i]=a[i][t[i]-1];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(344, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int f[600],n,i,ln;\r\n	double a1,a2;\r\n	float p;\r\n	f[0]=0;\r\n	f[1]=1;\r\n\r\n	while(scanf("%d",&n)!=EOF&&n>=0)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			f[i+2]=f[i]+f[i+1];\r\n			printf("->%d\\n",f[i]);\r\n		}\r\n		if(n>=1)\r\n			ln=(f[n-1]+f[n+1]);\r\n		else\r\n			ln=2;\r\n		a1=pow((1+sqrt(5)),n);\r\n		a2=pow((1-sqrt(5)),n);\r\n		p=(a1+a2)/ln;\r\n		printf("%.0f\\n",p);\r\n//printf("----=.>%f\\n",pow((1+sqrt(5)),6)+pow((1-sqrt(5)),6));\r\n		\r\n} \r\nreturn 0;\r\n\r\n}'),
(345, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2012");\r\n	return 0;\r\n}'),
(346, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.63636 0.77778");\r\n	return 0;\r\n}\r\n'),
(347, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1644");\r\n	return 0;\r\n}'),
(348, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(349, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.00135 0.00270");\r\n	return 0;\r\n}'),
(350, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("93681");\r\n	return 0;\r\n}'),
(351, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1368");\r\n	return 0;\r\n}'),
(352, '#include<iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int s,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			s^=temp;\r\n		}\r\n		cout<<"Case #"<<temp1<<": "<<s<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(353, '#include<stdio.h>\r\n#include<string.h>\r\nint a[101][101];\r\nint main()\r\n{\r\n	int h;\r\n	int i,j;\r\n	while(scanf("%d",&h)!=EOF)\r\n	{\r\n		memset(a,0,sizeof(a));\r\n		for(i=1;i<=h;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n			\r\n			}\r\n		}\r\n		for(i=h-1;i>=0;i--)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				int max=a[i+1][j]>a[i+1][j+1]?a[i+1][j]:a[i+1][j+1];\r\n				a[i][j]+=max;\r\n			}\r\n		}\r\n		printf("%d\\n",a[1][1]);\r\n	}\r\n	return 0;\r\n}\r\n	\r\n	\r\n'),
(354, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1912");\r\n	return 0;\r\n}'),
(355, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2007");\r\n	return 0;\r\n}'),
(356, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}'),
(357, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[100][100];\r\n	int t[100],i,n=0;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<a[i][t[i]-1];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(358, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}2'),
(359, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	int a,b,i;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n}\r\n\r\n'),
(360, '#include <stdio.h>\r\n#include <math.h>\r\n\r\nconst int maxn = 100;\r\nconst double eps = 1e-8;\r\n\r\nint cmp(double x)\r\n{\r\n    if(fabs(x) < eps) return 0;\r\n    if(x>0) return 1;\r\n    return -1;\r\n}\r\n\r\nstruct point\r\n{\r\n    double x, y;\r\n    point(){}\r\n    point(double a, double b): x(a), y(b){}\r\n    friend point operator - (const point &a, const point &b)\r\n    {\r\n        return point(a.x - b.x, a.y - b.y);\r\n    }\r\n};\r\n\r\ndouble det(const point &a, const point &b)\r\n{\r\n    return a.x * b.y - a.y * b.x;\r\n}\r\n\r\ndouble dot(const point &a, const point &b)\r\n{\r\n    return a.x * b.x + a.y + b.y;\r\n}\r\n\r\nbool PointOnSegment(point p, point s, point t)\r\n{\r\n    return cmp(det(p-s, t-s))==0 && cmp(dot(p-s, p-t)) <=0;\r\n}\r\n\r\nstruct polygon\r\n{\r\n    int n;\r\n    point a[maxn];\r\n    polygon() {}\r\n    int Point_In(point t)\r\n    {\r\n        int num=0, i, d1, d2, k;\r\n        a[n] = a[0];\r\n        for(i=0; i<n; i++)\r\n        {\r\n            if(PointOnSegment(t, a[i], a[i+1])) return 2;\r\n            k = cmp(det(a[i+1]-a[i], t-a[i]));\r\n            d1 = cmp(a[i].y - t.y);\r\n            d2 = cmp(a[i+1].y - t.y);\r\n            if(k>0 && d1<=0 && d2>0)\r\n            {\r\n                num ++;\r\n            }\r\n            if(k<0 && d2<=0 && d1>0)\r\n            {\r\n                num --;\r\n            }\r\n        }\r\n        return num != 0;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    int cases, n, i;\r\n    double x, y;\r\n    point p1;\r\n    for(cases=1; ~scanf("%d", &n); cases++)\r\n    {\r\n        polygon p;\r\n        p.n = n;\r\n        for(i=0; i<n; i++)\r\n        {\r\n            scanf("%lf%lf", &x, &y);\r\n            p.a[0].x = x;\r\n            p.a[0].y = y;\r\n        }\r\n        scanf("%lf%lf", &x, &y);\r\n        p1.x = x;\r\n        p1.y = y;\r\n        if(p.Point_In(p1) == 0)\r\n        {\r\n            printf("Case #%d: NO\\n", cases);\r\n        }\r\n        else\r\n        {\r\n            printf("Case #%d: YES\\n", cases);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n'),
(361, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(362, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}'),
(363, '#include <stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char a[10];long c=1,i,j;long n,b;\r\n	while(scanf("%ld",&n)!=EOF)\r\n	{\r\n		b=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%s",a);\r\n			j=strlen(a);\r\n			if((*(a+j-1)-''0'')%2!=0)\r\n				b++;\r\n		}\r\n		printf("Case #%ld: ",c);\r\n		printf("%ld\\n",b);\r\n		c++;\r\n	}\r\n	\r\n	return 0;\r\n}'),
(364, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 7 10 12 20");\r\n	return 0;\r\n}'),
(365, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("10 20 38 78 156");\r\n	return 0;\r\n}'),
(366, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nlong s[12345];\r\n\r\nint main()\r\n{\r\n	long n,i;\r\n	long a;\r\n	long x=1;\r\n	while(~scanf("%ld",&n))\r\n	{\r\n		memset(s,0,sizeof(s));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%ld",&a);\r\n			s[a]++;\r\n		}\r\n		printf("Case #%ld: ",x);x++;\r\n		for(i=0;i<10000;i++)\r\n		{\r\n			if(s[i]%2!=0)\r\n			{\r\n				printf("%ld\\n",i);\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	return 0;\r\n}\r\n'),
(367, '#include "stdio.h"\r\nint ab(int a)\r\n{int b;\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a[i]);\r\nab(a[i]);}\r\n}\r\n'),
(368, '#include "stdio.h"\r\nint ab(int a)\r\n{int b;\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a[i]);\r\nab(a[i]);}\r\n}\r\n'),
(369, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2.07407 1.03704");\r\n	return 0;\r\n}'),
(370, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(371, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.13208");\r\n	return 0;\r\n}'),
(372, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(373, 'import java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger[] a = new BigInteger[600];\r\n		a[0] = new BigInteger("1");\r\n		for (int i = 1; i < 600; ++i)\r\n		{\r\n			a[i] = a[i - 1].multiply(new BigInteger("2"));\r\n		}\r\n		while (sc.hasNext())\r\n		{\r\n			int b = sc.nextInt();\r\n			System.out.println(a[b]);\r\n		}\r\n	}\r\n}'),
(374, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint s[100000009]; \r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	__int64 n;\r\n	int i,j=1;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=1;i<=n;i++)\r\n			scanf("%d",s[i]);\r\n		\r\n		qsort(&s[1],n,sizeof(int),hehe);\r\n		for(i=1;i<n;i++)\r\n		{\r\n			if(s[i]==s[i+1])\r\n				i++;\r\n			else if(s[i]!=s[i+1])\r\n			{\r\n				printf("Case #%d: %d",j,s[i]);\r\n				j++;\r\n				break;\r\n			}\r\n		}\r\n		if(i==n)\r\n		{\r\n			printf("Case #%d: %d",j,s[i]);\r\n			j++;\r\n		}\r\n	}\r\n	return 0;\r\n}'),
(375, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("31426");\r\n	return 0;\r\n}'),
(376, '#include<stdio.h>\r\nint main()\r\n{\r\nint n;\r\nint a[100];\r\nint m=1;\r\nwhile(scanf("%d",&n)!=EOF)\r\n{\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&a[i]);\r\n	}\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		for(int j=i+1;j<n;j++)\r\n		{\r\n			if(a[i]==a[j])\r\n			{\r\n				a[i]=a[j]=0;\r\n			}\r\n		}\r\n	}\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		if(a[i]!=0)\r\n		{\r\n			printf("Case #%d:%d\\n",m,a[i]);\r\n		}\r\n	}\r\n	m++;	\r\n}\r\n	return 0;\r\n}\r\n'),
(377, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.06195 0.13208\\n");\r\nreturn 0;\r\n}'),
(378, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(379, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 87 175");\r\n	return 0;\r\n}\r\n'),
(380, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,tmp;\r\n	long long n;\r\n	while(scanf("%lld",&n)!=EOF)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			scanf("%d",&tmp);\r\n			a ^= tmp;\r\n		}\r\n		printf("%d\\n",a);\r\n	}\r\n	return 0;\r\n}\r\n\r\n'),
(381, '#include<stdio.h>\r\nint main()\r\n{\r\nint n;\r\nint a[100];\r\nint m=1;\r\nwhile(scanf("%d",&n)!=EOF&&n<=100000000)\r\n{\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&a[i]);\r\n	}\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		for(int j=i+1;j<n;j++)\r\n		{\r\n			if(a[i]==a[j])\r\n			{\r\n				a[i]=a[j]=0;\r\n			}\r\n		}\r\n	}\r\n	for(int i=0;i<n;i++)\r\n	{\r\n		if(a[i]!=0)\r\n		{\r\n			printf("Case #%d:%d\\n",m,a[i]);\r\n		}\r\n	}\r\n	m++;	\r\n}\r\n	return 0;\r\n}\r\n'),
(382, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[100][100];\r\n	int t[100],i,n=0;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<a[i][(t[i]-1)];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(383, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(384, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(385, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(386, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(387, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 4999 32767 61728394 493827160");\r\n	return 0;\r\n}'),
(388, '#include<iostream>\r\n#define MAX(x,y) (x,y)?x:y\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	int i,j;\r\n	int tower[101][101];\r\n	while(cin>>n)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&tower[i][j]);\r\n			}\r\n		}\r\n		for(i=n-2;i>=0;i--)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				tower[i][j]+=MAX(tower[i+1][j],tower[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<tower[0][0]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(389, '#include <stdio.h>\r\n#include <string.h>\r\nchar c[128][128];\r\nint main()\r\n{\r\n	int i,j,n,u,x[128];\r\n	scanf("%d%*c",&n);\r\n	for(i=0;i<n;++i)\r\n	gets(c[i]);\r\n	for(i=0;i<n;++i)\r\n	{\r\n		scanf("%d",&u);\r\n		--u;\r\n		/*for(j=0;j<u;++j)\r\n		{\r\n			if(c[i][j]>=''A''&&c[i][j]<=''Z'')\r\n			--u;\r\n			else if(c[i][j]=='' '')\r\n			++u;\r\n		}*/\r\n		printf("%c",c[i][u]);\r\n	}\r\n	printf("\\n");\r\n	return 0;\r\n}\r\n'),
(390, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  a,b;\r\nscanf("%d",&a);\r\nif(a!=0)\r\n{b=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nreturn  0;\r\n}\r\n'),
(391, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(392, '3 9 12 14 18'),
(393, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\nint main()\r\n{\r\n	string a[100];\r\n	int t[100],i,n=0;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<a[i][(t[i]-1)];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(394, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 84 168");\r\n	return 0;\r\n}'),
(395, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n    while(scanf("%d",&a)!=0)\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(396, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  a,b;\r\nif(scanf("%d",&a)!=0)\r\n{\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nreturn  0;\r\n}\r\n'),
(397, '#include<iostream>\r\n#define MAX(x,y) (x,y)?x:y\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	int i,j;\r\n	int tower[101][101];\r\n	while(cin>>n)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&tower[i][j]);\r\n			}\r\n		}	\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				cout<<tower[i][j]<<" ";\r\n			}\r\n			cout<<endl;\r\n		}\r\n		for(i=n-2;i>=0;i--)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				tower[i][j]+=MAX(tower[i+1][j],tower[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<tower[0][0]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(398, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,x,tmp;\r\n	long long n;\r\n	x = 1;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			cin>>tmp;\r\n			a ^= tmp;\r\n		}\r\n		printf("Case #%d:%d\\n",x++,a);\r\n	}\r\n	return 0;\r\n}\r\n\r\n'),
(399, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(400, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}'),
(401, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 6000 6556 12345682 98765433");\r\n	return 0;\r\n}'),
(402, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[105][105];\r\nint num[105];\r\n\r\nint main()\r\n{\r\n	int N;\r\n	int i,j;\r\n	while(scanf("%d",&N)!=EOF)\r\n	{\r\n		getchar();\r\n		for(i=0;i<N;i++)\r\n			gets(a[i]);\r\n		for(i=0;i<N;i++)\r\n			scanf("%d",&num[i]);\r\n		j=0;\r\n		for(i=0;i<N;i++)\r\n		{\r\n			printf("%c",a[i][num[j++]-1]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(403, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(404, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint s[40005];\r\n\r\nint main()\r\n{\r\n	long n,i;\r\n	int a;\r\n	int x=1;\r\n	while(~scanf("%ld",&n))\r\n	{\r\n		memset(s,0,sizeof(s));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n			s[a]++;\r\n		}\r\n		printf("Case #%d: ",x);x++;\r\n		for(i=0;i<40000;i++)\r\n		{\r\n			if(s[i]%2!=0)\r\n			{\r\n				printf("%d\\n",i);\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	return 0;\r\n}\r\n'),
(405, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(406, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3];\r\n	for(int i=0;i<3;i++)\r\n		cin>>a[i];\r\n	for(int j=0;j<3;j++)\r\n	{\r\n		b[j]=a[j]%3;\r\n		cout<<b[j]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(407, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long a,tmp;\r\n	long long n;\r\n	int x = 1;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			cin>>tmp;\r\n			a ^= tmp;\r\n		}\r\n		printf("Case #%d:%ld\\n",x++,a);\r\n	}\r\n	return 0;\r\n}\r\n'),
(408, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,c;\r\n    while(scanf("%d",&a)!=0)\r\n	{   c=a%3;\r\n		printf("%d\\n",c);\r\n	}\r\n	return 0;\r\n}'),
(409, '#include<iostream>\r\nusing namespace std;\r\nchar maoxian[200][200];\r\nint main ()\r\n{\r\n	int i,n,len[200],j,meng[200];\r\n		scanf("%d",&n);\r\n		getchar();\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			gets(maoxian[i]);\r\n			//len[i]=strlen(maoxian[i]);\r\n			//for(j=0;j<len[i];j++)\r\n			//{\r\n			//	cout<<maoxian[i][j]<<endl;\r\n			//}		\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			cin>>meng[i];\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			cout<<maoxian[i][meng[i]-1];\r\n		}\r\n		cout<<endl;		\r\n	return 0;\r\n}'),
(410, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nwhile(1)\r\n{\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\n}'),
(411, '#include <stdio.h>\r\nint main()\r\n{\r\n	long long a;\r\n	while(scanf("%lld",&a)!=EOF)\r\n	{\r\n		printf("%lld\\n",a%3);	\r\n	}\r\n	return 0;\r\n}'),
(412, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  a,b;\r\nif(scanf("%d",&a)!=EOF)\r\n{\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nreturn  0;\r\n}\r\n'),
(413, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,c;\r\n    while(scanf("%d",&a))\r\n	{   c=a%3;\r\n		printf("%d\\n",c);\r\n	}\r\n	return 0;\r\n}'),
(414, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(415, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long a,tmp;\r\n	long long n;\r\n	int x = 1;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			cin>>tmp;\r\n			a ^= tmp;\r\n		}\r\n		cout<<"Case #"<<x++<<":"<<a<<endl;\r\n		//printf("Case #%d:%ld\\n",x++,a);\r\n	}\r\n	return 0;\r\n}\r\n\r\n'),
(416, '#include<stdio.h>\r\nint main()\r\n{\r\n	int  m,n;\r\nwhile(scanf("%d",&m)!=EOF)\r\n{\r\nn=m%3;\r\nprintf("%d\\n",n);\r\n}\r\nreturn  0;\r\n}\r\n'),
(417, '#include <stdio.h>\r\n\r\nint max1(int x,int y)\r\n{\r\n    return x>y?x:y;\r\n}\r\n\r\nint main()\r\n{\r\n    int i,j,n,c,max,a[123][123],dp[123][123];\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=1;i<=n;i++)\r\n        {\r\n            for(j=1;j<=i;j++)\r\n            {\r\n                scanf("%d",&a[i][j]);\r\n            }\r\n        }\r\n        dp[1][1]=a[1][1];\r\n        for(i=2;i<=n;i++)\r\n        {\r\n            dp[i][1]=a[i][1]+dp[i-1][1];\r\n            dp[i][i]=a[i][i]+dp[i-1][i-1];\r\n            for(j=2;j<i;j++)\r\n            {\r\n                dp[i][j]=a[i][j]+max1(dp[i-1][j],dp[i-1][j-1]);\r\n            }\r\n        }\r\n        for(max=dp[n][1],i=2;i<=n;i++)\r\n        {\r\n            if(dp[n][i]>max)\r\n            {\r\n                max=dp[n][i];\r\n            }\r\n        }\r\n        printf("%d\\n",max);   \r\n    }\r\n    return 0;\r\n}\r\n'),
(418, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 43 85 170");\r\n	return 0;\r\n}'),
(419, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n  int single,temp,temp1=1;\r\n  int i,n;\r\n  while(cin>>n)	\r\n  {\r\n  	single=0\r\n  	for(i=0;i<n;i++)\r\n  	{\r\n	  	cin>>temp;\r\n	  	single^=temp;\r\n	  }\r\n	  cout<<"Case#"<<temp1<<":"<<single<<endl;\r\n	  temp1++;\r\n  }\r\n  return 0;\r\n}'),
(420, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long a,tmp;\r\n	long long n;\r\n	int x = 1;\r\n	while(cin>>n)\r\n	{\r\n		a = 0;\r\n		while(n--)\r\n		{\r\n			cin>>tmp;\r\n			a ^= tmp;\r\n		}\r\n		cout<<"Case #"<<x++<<": "<<a<<endl;\r\n		//printf("Case #%d:%ld\\n",x++,a);\r\n	}\r\n	return 0;\r\n}\r\n'),
(421, '#include <iostream.h>\r\nint main()\r\n{\r\n    int n,i,x[100],j;\r\n	char str[100][100];\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n		cin>>str[i];\r\n	for(i=0;i<n;i++)\r\n 		cin>>x[i];		\r\n 	for(j=0;j<n;j++)\r\n	    cout<<str[j][x[j]-1];\r\n	return 0;\r\n}'),
(422, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(423, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7154");\r\n	return 0;\r\n}'),
(424, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1949\\n");\r\n	return 0;\r\n}'),
(425, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("03 09 12 14 20");\r\n	return 0;\r\n}\r\n'),
(426, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2.07407 1.03703");\r\n	return 0;\r\n}'),
(427, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n'),
(428, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint s[100002];\r\n\r\nint main()\r\n{\r\n	long n,i;\r\n	long a;\r\n	long x=1;\r\n	while(~scanf("%ld",&n))\r\n	{\r\n		memset(s,0,sizeof(s));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%ld",&a);\r\n			s[a]++;\r\n		}\r\n		printf("Case #%ld: ",x);x++;\r\n		for(i=0;i<100001;i++)\r\n		{\r\n			if(s[i]%2!=0)\r\n			{\r\n				printf("%ld\\n",i);\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	return 0;\r\n}\r\n'),
(429, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 41 82 163");\r\n	return 0;\r\n}'),
(430, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}'),
(431, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	a=2228;\r\n	printf("%d",a);\r\n	return 0;\r\n}'),
(432, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 23 47 95 191");\r\n	return 0;\r\n}'),
(433, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 14 12");\r\n	return 0;\r\n}'),
(434, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int b,s,l,k,o[401],he;\r\n	char a[401];\r\n	while(scanf("%d",&b)!=EOF)\r\n	{getchar();\r\n		for(s=0;s<b;s++)\r\n		{he=0;\r\n			gets(a);\r\n			l=strlen(a);\r\n			for(k=0;k<l;k++)\r\n			{\r\n				if(a[k]==''I'')\r\n				o[k]=1;\r\n				if(a[k]==''V'')\r\n				o[k]=5;\r\n				if(a[k]==''X'')\r\n				o[k]=10;\r\n				if(a[k]==''L'')\r\n				o[k]=50;\r\n				if(a[k]==''C'')\r\n				o[k]=100;	\r\n				//printf("%d ",o[k]);\r\n					\r\n	     	}\r\n	     	for(k=0;k<l;)\r\n	     	{\r\n	     		if(o[k]<o[k+1])\r\n	     		{he+=(o[k+1]-o[k]);k+=2;}\r\n	     		else\r\n	     		{he+=o[k];k++;}\r\n	     	}\r\n	     printf("%d\\n",he);\r\n	   }\r\n		\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(435, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 74 300 1716 140614637726");\r\n	return 0;\r\n}'),
(436, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 11 24 42 85");\r\n	return 0;\r\n}'),
(437, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n int a,b;\r\n while(scanf("%d",&a))\r\n {b=a%3;\r\n  printf("%d\\n",b);\r\n }\r\n return 0;\r\n}'),
(438, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 49 7154");\r\n	return 0;\r\n}'),
(439, '#include<string>\r\n#include<iostream>\r\n#include<stdio.h>\r\nusing namespace std;\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2007;\r\n	printf("%d",n);\r\n	\r\n}'),
(440, '#include <stdio.h>\r\n#include <string>\r\n//using namespace std;\r\nint main()\r\n{\r\n	int a,i;\r\n	scanf("%d",&a);\r\n	char str[101][10000];\r\n	int inte[101],j;\r\n	char x;\r\n	for(i=0;i<a;i++)\r\n	{\r\n		j=0;if(i==0)getchar();\r\n		while(1)\r\n		{\r\n			scanf("%c",&x);\r\n			if(x!=''\\n'')\r\n			{\r\n				str[i][j]=x;\r\n				j++;	\r\n			}\r\n			else break;	\r\n		}\r\n	}\r\n\r\n	for(i=0;i<a;i++)\r\n	{\r\n\r\n		scanf("%d",&inte[i]);		\r\n	}\r\n	for(i=0;i<a;i++)\r\n	{\r\n		printf("%c",str[i][inte[i]-1]);\r\n	}\r\n	return 0;\r\n}'),
(441, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2007;\r\n	printf("%d",n);\r\n	\r\n}'),
(442, '#include <stdio.h>\r\nint main()\r\n{int y,x;\r\n\r\n\r\nwhile (scanf("%d",&x)!=EOF)\r\n{\r\ny=x%3;\r\nprintf("%d\\n",y);\r\n}\r\n}'),
(443, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF);\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(444, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,i;\r\n	scanf("%d",&a);\r\n	char str[101][10000];\r\n	int inte[101],j;\r\n	char x;\r\n	for(i=0;i<a;i++)\r\n	{\r\n		j=0;if(i==0)getchar();\r\n		while(1)\r\n		{\r\n			scanf("%c",&x);\r\n			if(x!=''\\n'')\r\n			{\r\n				str[i][j]=x;\r\n				j++;	\r\n			}\r\n			else break;	\r\n		}\r\n	}\r\n\r\n	for(i=0;i<a;i++)\r\n	{\r\n\r\n		scanf("%d",&inte[i]);		\r\n	}\r\n	for(i=0;i<a;i++)\r\n	{\r\n		printf("%c",str[i][inte[i]-1]);\r\n	}\r\n	return 0;\r\n}'),
(445, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n  int single,temp,temp1=1;\r\n  int i,n;\r\n  while(cin>>n)	\r\n  {\r\n  	single=0;\r\n  	for(i=0;i<n;i++)\r\n  	{\r\n	  	cin>>temp;\r\n	  	single^=temp;\r\n	  }\r\n	  cout<<"Case#"<<temp1<<":"<<single<<endl;\r\n	  temp1++;\r\n  }\r\n  return 0;\r\n}'),
(446, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	int i,j,k,x,n;\r\n	long long a[128];\r\n	while(~scanf("%d",&n))\r\n	{\r\n		k=-2000000000;\r\n		for(i=0;i<128;++i)\r\n		a[i]=0;\r\n		scanf("%d",&a[n-1]);\r\n		for(i=1;i<n;++i)\r\n		{\r\n			for(j=n-i-1;j<n;++j)\r\n			{\r\n				scanf("%d",&x);\r\n				a[j]=a[j]>a[j+1]?a[j]+x:a[j+1]+x;\r\n			}\r\n		}\r\n		for(i=0;i<n;++i)\r\n		if(a[i]>k)\r\n		k=a[i];\r\n		printf("%d\\n",k);\r\n	}\r\n	return 0;\r\n}\r\n'),
(447, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=0;\r\n	printf("%d",n);\r\n	\r\n}'),
(448, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("0");\r\n    return 0;\r\n}\r\n'),
(449, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1 2 2 1 1");\r\n	return 0;\r\n}'),
(450, '#include<stdio.h>\r\n#include<math.h>\r\nmain()\r\n{\r\nunsigned double i,j;\r\ndouble buffer[10^9];\r\n\r\nwhile(1)\r\n{	\r\n	scanf("%d",&i);\r\n	for(j=0;j<i;j++)\r\n	{\r\n		scanf("%d",buffer+j);\r\n	}\r\n	printf("%d\\n",buffer[(i-1)/2]);\r\n}\r\n}\r\n\r\n'),
(451, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=1999;\r\n	printf("%d",n);\r\n	\r\n}'),
(452, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("40 259 820");\r\n	return 0;\r\n}'),
(453, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("15");\r\n    return 0;\r\n}\r\n'),
(454, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 49 7252");\r\n	return 0;\r\n}'),
(455, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,p;\r\n    while(scanf("%d",&a)!=EOF)\r\n	{   p=a%3;\r\n		printf("%d\\n",p);\r\n	}\r\n	return 0;\r\n}'),
(456, '#include<stdio.h>\r\n#include<math.h>\r\nmain()\r\n{\r\nunsigned double i,j;\r\ndouble buffer[10^9];\r\n\r\nwhile(1)\r\n{	\r\n	scanf("%d",&i);\r\n	for(j=0;j<i;j++)\r\n	{\r\n		scanf("%d",buffer+j);\r\n	}\r\n	printf("%d\\n",buffer[(i-1)/2]);\r\n}\r\n}'),
(457, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2010");\r\n    return 0;\r\n}\r\n'),
(458, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//getchar();\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n		//printf("%c\\n",s[i][tmp]);\r\n	}\r\n	//for(i=0;i<n;i++)\r\n	//{\r\n	//	for(j=0;j<20;j++)printf("%c",s[i][j]);\r\n	//	printf("\\n");\r\n	//}\r\n	//for(i=0;i<9;i++)printf("%c",s[n][i]);\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}'),
(459, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("10 84 330 1716 325949656825\\n");\r\nreturn 0;\r\n}'),
(460, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=1912;\r\n	printf("%d",n);\r\n	\r\n}'),
(461, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("11 21 43 85 171");\r\nreturn 0;\r\n}\r\n'),
(462, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;'),
(463, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 16 14 10 13");\r\n	return 0;\r\n}'),
(464, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2046;\r\n	printf("%d",n);\r\n	\r\n}'),
(465, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(466, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);	\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n}'),
(467, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(468, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 150");\r\n	return 0;\r\n}\r\n'),
(469, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=54250;\r\n	printf("%d",n);\r\n	\r\n}'),
(470, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1368");\r\n    return 0;\r\n}\r\n'),
(471, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n  int single,temp,temp1=1;\r\n  int i,n;\r\n  while(cin>>n)	\r\n  {\r\n  	single=0;\r\n  	for(i=0;i<n;i++)\r\n  	{\r\n	  	cin>>temp;\r\n	  	single^=temp;\r\n	  }\r\n	  cout<<"Case#"<<temp1<<":"<<single<<endl;\r\n	  temp1++;\r\n  }\r\n  return 0;\r\n}'),
(472, '#include "stdio.h"\r\nint ab(int a)\r\n{int b;\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nmain()\r\n{int a[3],i;\r\nfor(i=0;i<3;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<3;i++)\r\n{ab(a[i]);break;}\r\n}'),
(473, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("54250");\r\n    return 0;\r\n}\r\n'),
(474, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%d\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(475, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=1644;\r\n	printf("%d",n);\r\n	\r\n}'),
(476, '#include "stdio.h"\r\nint ab(int a)\r\n{int b;\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}\r\nmain()\r\n{int a[3],i;\r\nfor(i=0;i<3;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<3;i++)\r\n{ab(a[i]);break;}\r\n}'),
(477, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(478, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(479, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.15894 0.07947");\r\n	return 0;\r\n}'),
(480, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(481, '#include <stdio.h>\r\n#include <string.h>\r\nchar f[5]={''C'',''L'',''X'',''V'',''I''};\r\nint ba[5]={100,50,10,5,1};\r\nint fun(char s[])\r\n{\r\n    if(!s[0])\r\n        return 0;\r\n    int i,j,k,b=0;\r\n    for(i=0;i<5;++i)\r\n        for(j=0;s[j];++j)\r\n            if(s[j]==f[i])\r\n            {\r\n                for(k=j;s[k]==f[i];++k)\r\n                {\r\n                    b+=ba[i];\r\n                    s[k]=0;\r\n                }\r\n                return b-fun(s)+fun(s+k);\r\n            }\r\n}\r\n \r\nint main()\r\n{\r\n    char s[32];\r\n    int n;\r\n    scanf("%d%*c",&n);\r\n    while(n--)\r\n    {\r\n        gets(s);\r\n        printf("%d\\n",fun(s));\r\n    }\r\n    return 0;\r\n}\r\n'),
(482, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2012;\r\n	printf("%d",n);\r\n	\r\n}'),
(483, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("12 2520 1814400");\r\n	return 0;\r\n}'),
(484, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1644");\r\n    return 0;\r\n}\r\n'),
(485, '#include <stdio.h>\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			if(i==(n+1)/2)\r\n			{\r\n				printf("Case #%d: %d",nn,t);\r\n			}\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(486, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2007");\r\n    return 0;\r\n}\r\n'),
(487, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("9 1854 1032561\\n");\r\nreturn 0;\r\n}'),
(488, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2010;\r\n	printf("%d",n);\r\n	\r\n}'),
(489, '#include<stdio.h>\r\nmain()\r\n{\r\n	int a[3],b,i;\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	\r\n	for(i=0;i<3;i++)\r\n		{\r\n			b=a[i]%3;\r\n		     printf("%d\\n",b);\r\n	}\r\n	\r\n}'),
(490, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\nunsigned double i,j;\r\ndouble buffer[10^9];\r\n\r\nwhile(1)\r\n{	\r\n	scanf("%d",&i);\r\n	for(j=0;j<i;j++)\r\n	{\r\n		scanf("%d",buffer+j);\r\n	}\r\n	printf("%d\\n",buffer[(i-1)/2]);\r\n}\r\nreturn 0;\r\n}'),
(491, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13316");\r\n	return 0;\r\n}'),
(492, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7448");\r\n	return 0;\r\n}'),
(493, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2012");\r\n    return 0;\r\n}\r\n'),
(494, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=618;\r\n	printf("%d",n);\r\n	\r\n}'),
(495, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	for(int i=1;i<6;i++)\r\n	{scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);}\r\n	return 0;\r\n}\r\n'),
(496, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\ndouble i,j;\r\ndouble buffer[10^9];\r\n\r\nwhile(1)\r\n{	\r\n	scanf("%d",&i);\r\n	for(j=0;j<i;j++)\r\n	{\r\n		scanf("%d",buffer+j);\r\n	}\r\n	printf("%d\\n",buffer[(i-1)/2]);\r\n}\r\nreturn 0;\r\n}'),
(497, '#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n	int n;\r\n	n=2228;\r\n	printf("%d",n);\r\n	\r\n}'),
(498, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("1999");\r\n    return 0;\r\n}\r\n'),
(499, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(500, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(501, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("2228");\r\n    return 0;\r\n}\r\n'),
(502, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1949\\n");\r\n	return 0;\r\n}'),
(503, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1644\\n");\r\n	return 0;\r\n}'),
(504, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<2228<<endl;\r\n	return 0;\r\n	\r\n}'),
(505, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{int n,i;\r\ndouble l,p,m,x,y;\r\nint f[];\r\nint g[];\r\nscanf("%d",&n);\r\nf[0]=0,f[1]=1;\r\nfor(i=0;i<=n-1;i++)\r\n{f[i+2]=f[i+1]+f[i];\r\nf[i+2]=g[i+1];}\r\nl=g[n-2]+g[n];\r\nm=sqrt(5);\r\nx=pow(1+m,n);\r\ny=pow(1-m,n);\r\np=(x+y)/l;\r\n}\r\n'),
(506, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 74 300 1716 326702532025");\r\n	return 0;\r\n}'),
(507, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1368\\n");\r\n	return 0;\r\n}'),
(508, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 84 330 1716 325949656825");\r\n	return 0;\r\n}'),
(509, '#include<iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	cout<<2228<<endl;\r\n	return 0;\r\n}'),
(510, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(511, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}'),
(512, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2007\\n");\r\n	return 0;\r\n}'),
(513, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("15\\n");\r\n	return 0;\r\n}'),
(514, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n   long int a,b;\r\n		cin>>a;\r\n		b=a%3;\r\n		cout<<b<<endl;\r\n	return 0;\r\n}'),
(515, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}'),
(516, '#include <stdio.h>\r\n#include <math.h>\r\n\r\nconst int maxn = 100;\r\nconst double eps = 1e-8;\r\n\r\nint cmp(double x)\r\n{\r\n    if(fabs(x) < eps) return 0;\r\n    if(x>0) return 1;\r\n    return -1;\r\n}\r\n\r\nstruct point\r\n{\r\n    double x, y;\r\n    point(){}\r\n    point(double a, double b): x(a), y(b){}\r\n    friend point operator - (const point &a, const point &b)\r\n    {\r\n        return point(a.x - b.x, a.y - b.y);\r\n    }\r\n    void print()\r\n    {\r\n        printf("%lf, %lf\\n", x, y);\r\n    }\r\n};\r\n\r\ndouble det(const point &a, const point &b)\r\n{\r\n    return a.x * b.y - a.y * b.x;\r\n}\r\n\r\ndouble dot(const point &a, const point &b)\r\n{\r\n    return a.x * b.x + a.y * b.y;\r\n}\r\n\r\nbool PointOnSegment(point p, point s, point t)\r\n{\r\n    return cmp(det(p-s, t-s))==0 && cmp(dot(p-s, p-t)) <=0;\r\n}\r\n\r\nstruct polygon\r\n{\r\n    int n;\r\n    point a[maxn];\r\n    polygon() {}\r\n    void print()\r\n    {\r\n        int i;\r\n        for(i=0; i<n; i++)\r\n        {\r\n            a[i].print();\r\n        }\r\n    }\r\n    int Point_In(point t)\r\n    {\r\n        int num=0, i, d1, d2, k;\r\n        a[n] = a[0];\r\n        for(i=0; i<n; i++)\r\n        {\r\n            if(PointOnSegment(t, a[i], a[i+1])) return 2;\r\n            k = cmp(det(a[i+1]-a[i], t-a[i]));\r\n            d1 = cmp(a[i].y - t.y);\r\n            d2 = cmp(a[i+1].y - t.y);\r\n            if(k>0 && d1<=0 && d2>0)\r\n            {\r\n                num ++;\r\n            }\r\n            if(k<0 && d2<=0 && d1>0)\r\n            {\r\n                num --;\r\n            }\r\n        }\r\n        return num != 0;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    int cases, n, i;\r\n    double x, y;\r\n    point p1;\r\n    for(cases=1; ~scanf("%d", &n); cases++)\r\n    {\r\n        polygon p;\r\n        p.n = n;\r\n        for(i=0; i<n; i++)\r\n        {\r\n            scanf("%lf%lf", &x, &y);\r\n            p1.x = x;\r\n            p1.y = y;\r\n            p.a[i] = p1;\r\n        }\r\n        //p.print();\r\n        scanf("%lf%lf", &x, &y);\r\n        p1.x = x;\r\n        p1.y = y;\r\n        //printf("%d\\n", p.Point_In(p1));\r\n        if(p.Point_In(p1) == 0)\r\n        {\r\n            printf("Case #%d: NO\\n", cases);\r\n        }\r\n        else\r\n        {\r\n            printf("Case #%d: YES\\n", cases);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n'),
(517, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.0094340 0.017544");\r\n	return 0;\r\n}'),
(518, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("0\\n");\r\n	return 0;\r\n}'),
(519, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1735\\n");\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(520, '#include <cstdio>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char ans[101][102];\r\n	int n;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	for (int i = 1; i <= n; ++i)\r\n	{\r\n		for (int j = 1; j <= 101; ++j)\r\n		{\r\n			ans[i][j] = getchar();\r\n			if (ans[i][j] == ''\\n'')\r\n			{\r\n				ans[i][j] = ''\\0'';\r\n				break;\r\n			}	\r\n		}\r\n	}\r\n	int tmp;\r\n	for (int i = 1; i <= n; ++i)\r\n	{\r\n		cin>>tmp;\r\n		cout<<ans[i][tmp];	\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(521, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\nint i,j;\r\nint buffer[999];\r\n\r\nwhile(scanf("%d",&i)!=EOF)\r\n{	\r\n	for(j=0;j<i;j++)\r\n	{\r\n		scanf("%d",buffer+j);\r\n	}\r\n	printf("%d\\n",buffer[(i-1)/2]);\r\n}\r\nreturn 0;\r\n}\r\n\r\n'),
(522, '\r\n#include<stdio.h>\r\n#include<math.h>\r\n#define MAX 606\r\nint a[MAX],b[MAX];\r\nvoid luc()\r\n{\r\n	int i;\r\n	a[0]=0;a[1]=1;\r\n	for(i=2;i<=MAX;i++)\r\n		a[i]=a[i-1]+a[i-2];\r\n	b[0]=1;\r\n	for(i=1;i<MAX-1;i++)\r\n		b[i]=a[i-1]+a[i+1];\r\n}\r\n\r\nint main ()\r\n{\r\n	double n,c;\r\n     luc();\r\n	while(scanf("%lf",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1\\n");\r\n		else\r\n		{\r\n			c=pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n);\r\n			c=c/b[(int)n];\r\n			printf("%.0lf\\n",c);\r\n		}\r\n	}\r\n\r\n	return 0;\r\n}'),
(523, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2012\\n");\r\n	return 0;\r\n}'),
(524, '#include <stdio.h>\r\nmain ()\r\n{char a;\r\nscanf("%s",&a);\r\nif(a="None")\r\nprintf("None\\n");\r\n}'),
(525, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2046\\n");\r\n	return 0;\r\n}'),
(526, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 16 32 64 128");\r\n	return 0;\r\n}\r\n'),
(527, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("54250\\n");\r\n	return 0;\r\n}'),
(528, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}'),
(529, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n;\r\n	long long re;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		re=pow(2,n);\r\n		printf("%I64d\\n",re);\r\n	}\r\n	return 0;\r\n}'),
(530, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(531, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(532, '#include<iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{   while(1){\r\n	int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;}\r\n}'),
(533, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	return 0;\r\n}'),
(534, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Woart");\r\n	return 0;\r\n}'),
(535, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(536, '#include <stdio.h>\r\n#include <math.h>\r\n	int Fib(int n)\r\n	{\r\n		if(n==0)return 0;\r\n		else if(n==1)return 1;\r\n		else\r\n		{\r\n			int i;\r\n			int x0=0,x1=1;\r\n			int x;\r\n			for(i=0;i<n-1;i++)\r\n			{\r\n				x=x0+x1;\r\n				x0=x1;\r\n				x1=x;	\r\n			}\r\n			return x;\r\n		}\r\n	}\r\n	int L(int n)\r\n	{\r\n		return Fib(n-1)+Fib(n+1);\r\n	}\r\n	int p(int n)\r\n	{\r\n		if(n==0)return 1;\r\n		return int((pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n))/L(n));\r\n	}\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",p(n));	\r\n	}\r\n	return 0;\r\n}'),
(537, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(538, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("19 18 11 13 12");\r\n	return 0;\r\n}'),
(539, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 4215 27623 52039415 4327426443");\r\n	return 0;\r\n}\r\n'),
(540, '#include<stdio.h>\r\n#include<string.h>\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}\r\n'),
(541, '#include<stdio.h>\r\nint main()\r\n{ printf("2007");\r\nreturn 0;\r\n}'),
(542, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 66 7252");\r\n	return 0;\r\n}'),
(543, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(544, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(545, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 36 92 330 372461573717");\r\n	return 0;\r\n}'),
(546, '#include <stdio.h>\r\n\r\nint main() {\r\n	printf("1644\\n");\r\n	return 0;\r\n}'),
(547, '#include<stdio.h>\r\nint main()\r\n{ printf("2228");\r\nreturn 0;\r\n}'),
(548, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	return 0;\r\n}'),
(549, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b, c;\r\n\r\nscanf("%d\\n",&a);\r\nscanf("%d\\n",&b);\r\nscanf("%d\\n",&c);\r\nprintf("1\\n");\r\nprintf("2\\n");\r\nprintf("2\\n");\r\nreturn 0;\r\n\r\n	\r\n}'),
(550, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(551, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{int n,i;\r\ndouble l,p,m,x,y;\r\nint f[];\r\nint g[];\r\nscanf("%d",&n);\r\nf[0]=0,f[1]=1;\r\nfor(i=0;i<=n-1;i++)\r\n{f[i+2]=f[i+1]+f[i];\r\nf[i+2]=g[i+1];}\r\nl=g[n-2]+g[n];\r\nm=sqrt(5);\r\nx=pow(1+m,n);\r\ny=pow(1-m,n);\r\np=(x+y)/l;\r\n}\r\n'),
(552, '#include <iostream>\r\n#include <stdio.h>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <math.h>\r\nusing namespace std;\r\n\r\nstruct point{\r\n	double x,y;\r\n	point(double _x, double _y)\r\n	{\r\n		x = _x, y = _y;\r\n	}\r\n	point()\r\n	{\r\n		\r\n	}\r\n};\r\n\r\nstruct polygon_convex\r\n{\r\n	vector <point> p;\r\n	polygon_convex(int Size = 0)\r\n	{\r\n		p.resize(Size);\r\n	}\r\n};\r\n\r\nconst double eps = 1e-8;\r\n\r\nint cmp(double x)\r\n{\r\n	if( fabs(x) < eps) return 0;\r\n	if( x>0) return 1;\r\n	return -1;\r\n}\r\n\r\nbool comp_less(const point &a,const point &b)\r\n{\r\n	return cmp(a.x-b.x)<0||cmp(a.x-b.x)==0 && cmp(a.y-b.y)<0;\r\n}\r\n\r\npoint operator-(const point &a, const point &b)\r\n{\r\n	return point(a.x-b.x, a.y-b.y);\r\n}\r\n\r\nbool operator==(const point &a, const point &b)\r\n{\r\n	return cmp(a.x-b.x)==0&&cmp(a.y-b.y)==0;\r\n}\r\n\r\ndouble det(const point &a, const point &b)\r\n{\r\n	return a.x*b.y - a.y*b.x;\r\n}\r\n\r\n\r\npolygon_convex convex_hull(vector<point> a)\r\n{\r\n	polygon_convex res(2*a.size()+5);\r\n	sort(a.begin(), a.end(), comp_less);\r\n	a.erase( unique(a.begin(), a.end()), a.end());\r\n	int m=0;\r\n	for( int i=0; i<a.size(); ++i)\r\n	{\r\n		while( m>1 && cmp(det(res.p[m-1]-res.p[m-2], a[i]-res.p[m-2])) <=0)\r\n			--m;\r\n		res.p[m++] = a[i];\r\n	}\r\n	int k=m;\r\n	for( int i=int(a.size())-2; i>=0; --i)\r\n	{\r\n		while( m>k && cmp(det(res.p[m-1]-res.p[m-2], a[i]-res.p[m-2])) <= 0)\r\n		{\r\n			--m;\r\n		}\r\n		res.p[m++] = a[i];\r\n	}\r\n	res.p.resize(m);\r\n	if( a.size() >1) res.p.resize(m-1);\r\n	return res;\r\n}\r\n\r\nbool containOn(const polygon_convex &a, const point &b)\r\n{\r\n	int n=a.p.size();\r\n	#define next(i) ((i+1)%n)\r\n	int sign = 0;\r\n	for( int i=0; i<n; ++i)\r\n	{\r\n		int x = cmp(det(a.p[i]-b, a.p[next(i)]-b));\r\n		if( x)\r\n		{\r\n			if( sign)\r\n			{\r\n				if( sign!=x)\r\n					return false;\r\n			}\r\n			else\r\n				sign = x;\r\n		}\r\n	}\r\n	return true;\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	vector<point> ps;\r\n	int t=0;\r\n	while( cin >> n)\r\n	{\r\n		ps.clear();\r\n		++t;\r\n		for( int i=1; i<=n; i++)\r\n		{\r\n			point s;\r\n			cin >> s.x >> s.y;\r\n			ps.push_back(s);\r\n		}\r\n		polygon_convex pc = convex_hull(ps);\r\n		point s;\r\n		cin >> s.x >> s.y;\r\n		bool f = containOn( pc, s);\r\n		if( f)\r\n		{\r\n			cout << "Case #" << t << ": YES" << endl;\r\n		}\r\n		else\r\n		{\r\n			cout << "Case #" << t << ": NO" << endl;\r\n		}\r\n	} \r\n	return 0;\r\n}'),
(553, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7351");\r\n	return 0;\r\n}'),
(554, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(555, '#include <stdio.h>\r\n#include <math.h>\r\n	int Fib(int n)\r\n	{\r\n		if(n==0)return 0;\r\n		else if(n==1)return 1;\r\n		else\r\n		{\r\n			int i;\r\n			int x0=0,x1=1;\r\n			int x;\r\n			for(i=0;i<n-1;i++)\r\n			{\r\n				x=x0+x1;\r\n				x0=x1;\r\n				x1=x;	\r\n			}\r\n			return x;\r\n		}\r\n	}\r\n	int L(int n)\r\n	{\r\n		return Fib(n-1)+Fib(n+1);\r\n	}\r\n	int p(int n)\r\n	{\r\n		if(n==0)return 1;\r\n		return (int)((pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n))/L(n));\r\n	}\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",p(n));	\r\n	}\r\n	return 0;\r\n}'),
(556, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int i,j,n;\r\n	int c[250]={0};\r\n	while(cin>>n)\r\n	{\r\n		j=1;\r\n		c[0]=1;\r\n		if(n<0)\r\n			break;\r\n		while(n--)\r\n		{\r\n			for(i=0;i<j;i++)\r\n				c[i]*=2;\r\n			for(i=0;i<j;i++)\r\n			{\r\n				if(c[i]>9)\r\n				{\r\n					c[i+1]+=c[i]/10;\r\n					c[i]=c[i]%10;\r\n				}\r\n			}\r\n			if(c[i])\r\n				j++;\r\n		}\r\n		while(j--)\r\n		{\r\n			cout<<c[j];\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}'),
(557, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 99 250 11111 31000");\r\n	return 0;\r\n}'),
(558, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nchar s[1234];\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		\r\n		if(n == 0)\r\n		{\r\n			printf("1");\r\n			continue;\r\n		}\r\n		memset(s,0,sizeof(s));\r\n		s[0] = 1;\r\n		int i,j;\r\n		int len = 1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<len;j++)\r\n			{\r\n				s[j] *= 2;\r\n			}\r\n			int c = 0;\r\n			for(j=0;j<len;j++)\r\n			{\r\n				s[j] = s[j] + c;\r\n				c = s[j]/10;\r\n				s[j] = s[j]%10;\r\n				if(j == len-1 && c!=0 )\r\n					len++;\r\n			}\r\n		}\r\n		int flag = 0;\r\n		for(j=len-1;j>=0;j--)\r\n		{\r\n			printf("%d",s[j]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(559, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 16 15 10 13");\r\n	return 0;\r\n}'),
(560, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	\r\n	for(int i=0;i<3;i++)\r\n	{int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;}\r\n	return 0;\r\n}'),
(561, '#include<stdio.h>\r\nint main()\r\n{\r\n	int z=0,n,l,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		z++;\r\n		l=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			l^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",z,l);\r\n	}\r\n	return 0;\r\n}\r\n'),
(562, '#include<stdio.h>\r\nint main()\r\n{\r\n	int i,j,n,a[1000],sum;\r\n	sum=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		scanf("%d",&a[i]);\r\n	}\r\n\r\n	for(i=1;i<=n;i++)\r\n	{\r\n\r\n		j=1;\r\n		while(j<=n)\r\n		{\r\n		\r\n			\r\n			if((a[i]==a[j])&&(i!=j))\r\n				break;\r\n			else\r\n				j++;\r\n			if(j>n)\r\n				printf("Case #%d: %d\\n",sum,a[i]);\r\n			\r\n			\r\n			\r\n		}\r\n	}\r\n	sum++;\r\n	}\r\n	return 0;\r\n}'),
(563, '0.28101\r\n0.14894'),
(564, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("Woart Dannie Woart Dannie Dannie Woart");\r\nreturn 0;\r\n}\r\n'),
(565, '#include<stdio.h>\r\n#include<mem.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j;\r\n	int l=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++) l=max(l,f[n][i]);\r\n		printf("%d\\n",l);\r\n	}\r\n	return 0;\r\n}\r\n'),
(566, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nchar s[1234];\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		\r\n		if(n == 0)\r\n		{\r\n			printf("1\\n");\r\n			continue;\r\n		}\r\n		memset(s,0,sizeof(s));\r\n		s[0] = 1;\r\n		int i,j;\r\n		int len = 1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<len;j++)\r\n			{\r\n				s[j] *= 2;\r\n			}\r\n			int c = 0;\r\n			for(j=0;j<len;j++)\r\n			{\r\n				s[j] = s[j] + c;\r\n				c = s[j]/10;\r\n				s[j] = s[j]%10;\r\n				if(j == len-1 && c!=0 )\r\n					len++;\r\n			}\r\n		}\r\n		int flag = 0;\r\n		for(j=len-1;j>=0;j--)\r\n		{\r\n			printf("%d",s[j]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(567, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(568, '#include <stdio.h>\r\nint main()\r\n{\r\n	long long a;\r\n	while(~scanf("%lld",&a))\r\n		printf("%lld\\n",a%3);\r\n	return 0;\r\n}'),
(569, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(570, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\ncout<<"15";\r\nreturn 0;\r\n}'),
(571, 'include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Dannie Woart Dannie Woart Dannie");\r\n	return 0;\r\n}\r\n'),
(572, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\ncout<<"1999";\r\nreturn 0;\r\n}'),
(573, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 15");\r\n	return 0;\r\n}'),
(574, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\ncout<<"54250";\r\nreturn 0;\r\n}'),
(575, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b, c;\r\n\r\nscanf("%d\\n",&a);\r\nscanf("%d\\n",&b);\r\nscanf("%d\\n",&c);\r\nprintf("%d\\n",a);\r\nprintf("%d\\n",b);\r\nprintf("%d\\n",b);\r\nreturn 0;\r\n\r\n	\r\n}'),
(576, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int i,j,n;\r\n	char c[200]={0};\r\n	while(cin>>n)\r\n	{\r\n		j=1;\r\n		c[0]=1;\r\n		if(n<0)\r\n			break;\r\n		while(n--)\r\n		{\r\n			for(i=0;i<j;i++)\r\n				c[i]*=2;\r\n			for(i=0;i<j;i++)\r\n			{\r\n				if(c[i]>9)\r\n				{\r\n					c[i+1]+=c[i]/10;\r\n					c[i]=c[i]%10;\r\n				}\r\n			}\r\n			if(c[i])\r\n				j++;\r\n		}\r\n		while(j--)\r\n		{\r\n			printf("%d",c[j]);\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}\r\n'),
(577, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	int N,i;\r\n	int len;\r\n	int sum;\r\n	while(scanf("%d\\n",&N)!=EOF)\r\n	{\r\n		sum=0;\r\n		scanf("%s\\n",a);\r\n		len=strlen(a);\r\n		for(i=1;i<len;i++)\r\n		{\r\n			if(a[i]==''V''&&a[i-1]==''I'')\r\n			{\r\n				a[i-1]=''0'';\r\n				a[i]=''A'';\r\n			}\r\n			if(a[i]==''X''&&a[i-1]==''I'')\r\n			{\r\n				a[i-1]=''0'';\r\n				a[i]=''B'';\r\n			}\r\n			if(a[i]==''L''&&a[i-1]==''X'')\r\n			{\r\n				a[i-1]=''0'';\r\n				a[i]=''D'';\r\n			}\r\n			if(a[i]==''C''&&a[i-1]==''X'')\r\n			{\r\n				a[i-1]=''0'';\r\n				a[i]=''E'';\r\n			}\r\n		}\r\n		for(i=0;i<len;i++)\r\n		{\r\n			if(a[i]==''I'')\r\n			{\r\n				sum+=1;\r\n			}\r\n			else if(a[i]==''V'')\r\n			{\r\n				sum+=5;\r\n			}\r\n			else if(a[i]==''X'')\r\n			{\r\n				sum+=10;\r\n			}\r\n			else if(a[i]==''L'')\r\n			{\r\n				sum+=50;\r\n			}\r\n			else if(a[i]==''C'')\r\n			{\r\n				sum+=100;\r\n			}\r\n			else if(a[i]==''A'')\r\n			{\r\n				sum+=4;\r\n			}\r\n			else if(a[i]==''B'')\r\n			{\r\n				sum+=9;\r\n			}\r\n			else if(a[i]==''D'')\r\n			{\r\n				sum+=40;\r\n			}\r\n			else if(a[i]==''E'')\r\n			{\r\n				sum+=90;\r\n			}\r\n			else\r\n				continue;\r\n\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(578, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 83 167");\r\n	return 0;\r\n}'),
(579, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\ncout<<"1644";\r\nreturn 0;\r\n}'),
(580, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("54250\\n");\r\n	return 0;\r\n}\r\n'),
(581, 'include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart  Woart Woart Dannie Dannie");\r\n	return 0;\r\n}\r\n'),
(582, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int single,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		single=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			single^=temp;\r\n		}\r\n		cout<<"Case#"<<temp1<<":"<<single<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(583, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(584, '# include <stdio.h>\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	printf("%d\\n",a[12]);\r\n	return 0;	\r\n}'),
(585, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\ncout<<"2228";\r\nreturn 0;\r\n}'),
(586, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7139");\r\n	return 0;\r\n}'),
(587, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint s[100000009];\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int n;\r\n	int i;\r\n	int j=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=0;i<n;i++)\r\n			scanf("%d",&s[i]);\r\n		\r\n		qsort(s,n,sizeof(int),hehe);\r\n//		for(i=0;i<n;i++)\r\n//			printf("%d ",s[i]);\r\n\r\n		for(i=0;i<n-1;i++)\r\n		{\r\n			if(s[i]==s[i+1])\r\n				i++;\r\n			else if(s[i]!=s[i+1])\r\n			{\r\n				printf("Case #%d: %d",j,s[i]);\r\n				j++;\r\n				break;\r\n			}\r\n		}\r\n		if(i==n-1)\r\n		{\r\n			printf("Case #%d: %d",j,s[i]);\r\n			j++;\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(588, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int b,s,l,k,o[401],he=0;\r\n	char a[401];\r\n	while(scanf("%d",&b)!=EOF)\r\n	{getchar();\r\n		for(s=0;s<b;s++)\r\n		{he=0;\r\n			gets(a);\r\n			l=strlen(a);\r\n			for(k=0;k<l;k++)\r\n			{\r\n				if(a[k]==''I'')\r\n				o[k]=1;\r\n				if(a[k]==''V'')\r\n				o[k]=5;\r\n				if(a[k]==''X'')\r\n				o[k]=10;\r\n				if(a[k]==''L'')\r\n				o[k]=50;\r\n				if(a[k]==''C'')\r\n				o[k]=100;	\r\n				//printf("%d ",o[k]);\r\n					\r\n	     	}\r\n	     	if(l==1)\r\n	     	{\r\n	     		printf("%d\\n",o[0]);\r\n	     	}\r\n	     	else\r\n	     	\r\n	\r\n	     	\r\n	     	{\r\n			 for(k=0;k<l-1;)\r\n	     	{\r\n	     		if(o[k]<o[k+1])\r\n	     		{he+=(o[k+1]-o[k]);k+=2;}\r\n	     		else\r\n	     		{he+=o[k];k++;}\r\n	     	}\r\n	     	if(o[k-1]<=o[k-2])\r\n	     	he+=o[k];\r\n	        printf("%d\\n",he);}\r\n	   }\r\n		\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(589, '#include <cstdio>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int ans[101][101];\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		for (int i = 1; i <= n; ++i)\r\n		{\r\n			for(int j = 1; j <= i; ++j)\r\n			{\r\n				scanf("%d",&ans[i][j]);\r\n			}\r\n		}\r\n		for (int i = n-1; i >= 1; --i)\r\n		{\r\n			for (int j = 1; j <= i; ++j)\r\n			{\r\n				ans[i][j] += max(ans[i+1][j], ans[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<ans[1][1]<<endl;\r\n	}\r\n	return 0;\r\n}\r\n'),
(590, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(591, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}\r\n'),
(592, '#include<stdio.h>\r\n#include<stdlib.h>\r\nint main()\r\n{\r\n	int i,j,n,*a,sum;\r\n	sum=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=(int*)calloc(n+2,sizeof(int));\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}\r\n\r\n		for(i=1;i<=n;i++)\r\n		{\r\n\r\n			j=1;\r\n			while(j<=n)\r\n			{\r\n		\r\n			\r\n				if((a[i]==a[j])&&(i!=j))\r\n					break;\r\n				else\r\n					j++;\r\n				if(j>n)\r\n					printf("Case #%d: %d\\n",sum,a[i]);\r\n				\r\n			\r\n			\r\n		}\r\n	}\r\n	sum++;\r\n	}\r\n	return 0;\r\n}'),
(593, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\nint s[10000009];\r\nint hehe(const void*a,const void*b)\r\n{\r\n	return(*(int*)a)>(*(int*)b)?1:-1;\r\n}\r\nint main()\r\n{\r\n	int n;\r\n	int i;\r\n	int j=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=0;i<n;i++)\r\n			scanf("%d",&s[i]);\r\n		\r\n		qsort(s,n,sizeof(int),hehe);\r\n//		for(i=0;i<n;i++)\r\n//			printf("%d ",s[i]);\r\n\r\n		for(i=0;i<n-1;i++)\r\n		{\r\n			if(s[i]==s[i+1])\r\n				i++;\r\n			else if(s[i]!=s[i+1])\r\n			{\r\n				printf("Case #%d: %d",j,s[i]);\r\n				j++;\r\n				break;\r\n			}\r\n		}\r\n		if(i==n-1)\r\n		{\r\n			printf("Case #%d: %d",j,s[i]);\r\n			j++;\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(594, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	cout<<618;\r\n	return 0;\r\n}'),
(595, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	printf("%d",1949);\r\n}'),
(596, '#include<stdio.h>\r\nint main()\r\n{\r\n	int c=1;\r\n	int n,s,i,t;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s^=t;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n	c++;\r\n	}\r\n	return 0;\r\n}\r\n'),
(597, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf( "9 2160 1284080");\r\n	return 0;\r\n}'),
(598, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	printf("%d",1644);\r\n}'),
(599, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int i,j,n;\r\n	while(cin>>n)\r\n	{\r\n        char c[200]={0};\r\n		j=1;\r\n		c[0]=1;\r\n		if(n<0)\r\n			break;\r\n		while(n--)\r\n		{\r\n			for(i=0;i<j;i++)\r\n				c[i]*=2;\r\n			for(i=0;i<j;i++)\r\n			{\r\n				if(c[i]>9)\r\n				{\r\n					c[i+1]+=c[i]/10;\r\n					c[i]=c[i]%10;\r\n				}\r\n			}\r\n			if(c[i])\r\n				j++;\r\n		}\r\n		while(j--)\r\n		{\r\n			printf("%d",c[j]);\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}\r\n'),
(600, '#include<iostream>\r\n#include<string.h>\r\n#include<string>\r\nusing namespace std;\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(cin>>n)\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) cin>>f[i][j];\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		cout<<mx<<endl;\r\n	}\r\n	return 0;\r\n}'),
(601, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 720 362880");\r\n	return 0;\r\n}'),
(602, '#include <stdio.h>\r\n\r\nint main() {\r\n	printf("0\\n");\r\n	return 0;\r\n}'),
(603, '#include<stdio.h>\r\nint main()\r\n{  \r\n	printf("2228");\r\n	return 0;\r\n}\r\n'),
(604, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(605, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	printf("%d",2228);\r\n}'),
(606, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 7 7 15 21");\r\n	return 0;\r\n}'),
(607, '#include<stdio.h>\r\nint main()\r\n{\r\n	int c=0;\r\n	int n;\r\n	int a;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n	int sum=0;\r\n	while(n--)\r\n	{\r\n		scanf("%d",&a);\r\n		sum^=a;\r\n	}\r\n	printf("Case #%d: %d\\n",++c,sum);\r\n	}\r\n	return 0;\r\n}'),
(608, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}\r\n\r\n'),
(609, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(610, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[100],Ln,Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(611, '#include<stdio.h>\r\nint main()\r\n{\r\n	//freopen("in.txt","r",stdin);\r\n	int n,a,i;\r\n	char p[1000][1000];\r\n	char c[1000];\r\n	scanf("%d",&n);\r\n	getchar();\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		gets(p[i]);\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		c[i]=p[i][a-1];\r\n	}\r\n    for(i=1;i<=n;i++)\r\n    printf("%c",c[i]);\r\n    printf("\\n");\r\n\r\n	return 0;\r\n}'),
(612, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int single,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		single=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			single^=temp;\r\n		}\r\n		cout<<"Case#"<<temp1<<": "<<single<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(613, '#include<stdio.h>\r\n#include<math.h>\r\n#define MAX 606\r\nint a[MAX],b[MAX];\r\nvoid luc()\r\n{\r\n	int i;\r\n	a[0]=0;a[1]=1;\r\n	for(i=2;i<=MAX;i++)\r\n		a[i]=a[i-1]+a[i-2];\r\n	b[0]=1;\r\n	for(i=1;i<MAX-1;i++)\r\n		b[i]=a[i-1]+a[i+1];\r\n}\r\n\r\nint main ()\r\n{\r\n	double c;\r\n	int n;\r\n     luc();\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1\\n");\r\n		else\r\n		{\r\n			c=pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n);\r\n			c=c/b[n];\r\n			printf("%.0lf\\n",c);\r\n		}\r\n	}\r\n\r\n	return 0;\r\n}\r\n'),
(614, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("2012\\n");\r\n	return 0;\r\n}'),
(615, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("5 5000 32768 61728394 493827160");\r\nreturn 0;\r\n}\r\n'),
(616, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("1999");\r\n	return 0;\r\n}\r\n'),
(617, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int f[600],n,i,ln;\r\n	double a1,a2;\r\n	float p;\r\n	f[0]=0;\r\n	f[1]=1;\r\n\r\n	while(scanf("%d",&n)!=EOF&&n>=0)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			f[i+2]=f[i]+f[i+1];\r\n		}\r\n		if(n>=1)\r\n			ln=(f[n-1]+f[n+1]);\r\n		else\r\n			ln=2;\r\n		a1=pow((1+sqrt(5)),n);\r\n		a2=pow((1-sqrt(5)),n);\r\n		p=(a1+a2)/ln;\r\n		printf("%.0f\\n",p);	\r\n} \r\nreturn 0;\r\n\r\n}'),
(618, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}\r\n\r\n'),
(619, '#include <stdio.h>\r\nint main()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}\r\n'),
(620, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(621, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 22");\r\n	return 0;\r\n}'),
(622, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}'),
(623, '#include <stdio.h>\r\n\r\nint main() {\r\n	printf("54250\\n");\r\n	return 0;\r\n}'),
(624, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 84 300 1716 326702532025");\r\n	return 0;\r\n}'),
(625, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("1735\\n");\r\n	return 0;\r\n}'),
(626, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("15\\n");\r\n	return 0;\r\n}'),
(627, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228");\r\n	return 0;\r\n}\r\n'),
(628, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("2010\\n");\r\n	return 0;\r\n}'),
(629, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("1999\\n");\r\n	return 0;\r\n}'),
(630, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}'),
(631, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart");\r\n	return 0;\r\n}'),
(632, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(633, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 99 256 11111 31000");\r\n	return 0;\r\n}\r\n'),
(634, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("24 48 96 192 384");\r\n	return 0;\r\n}\r\n'),
(635, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(636, '#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<string.h>\r\n#include<math.h>\r\n#include<malloc.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n	return (*(int *)a)>(*(int *)b)?1:-1;\r\n}\r\n\r\nchar a[405];\r\n\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(637, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("2046\\n");\r\n	return 0;\r\n}'),
(638, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[100],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(639, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("Woart Woart Woart Woart Dannie");\r\n    return 0;\r\n}'),
(640, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 170");\r\n	return 0;\r\n}'),
(641, '#include<stdio.h>\r\n#include<mem.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	if(a>b)\r\n	{\r\n		return a;\r\n	}\r\n	else return b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j;\r\n	int l;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		l=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)l=max(l,f[n][i]);\r\n		printf("%d\\n",l);\r\n	}\r\n	return 0;\r\n}\r\n'),
(642, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("Woart Woart Woart Dannie Dannie");\r\n    return 0;\r\n}'),
(643, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(644, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("1912\\n");\r\n	return 0;\r\n}'),
(645, '#include<stdio.h>\r\n#include<math.h>\r\n#define MAX 606\r\nint a[MAX],b[MAX];\r\nvoid luc()\r\n{\r\n	int i;\r\n	a[0]=0;a[1]=1;\r\n	for(i=2;i<=MAX;i++)\r\n		a[i]=a[i-1]+a[i-2];\r\n	b[0]=1;\r\n	for(i=1;i<MAX-1;i++)\r\n		b[i]=a[i-1]+a[i+1];\r\n}\r\n\r\nint main ()\r\n{\r\n	int c;\r\n	int n;\r\n     luc();\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n==0)\r\n			printf("1\\n");\r\n		else\r\n		{\r\n			c=pow((1+sqrt(5)),n)+pow((1-sqrt(5)),n);\r\n			c=c/b[n];\r\n			printf("%d\\n",c);\r\n		}\r\n	}\r\n\r\n	return 0;\r\n}\r\n'),
(646, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("1735\\n");\r\n	return 0;\r\n}'),
(647, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[10],t,n;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		t=0;\r\n		for(int i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}	\r\n		for(int j=0;j<n;j++)\r\n		{\r\n			t^=a[j];\r\n		}\r\n		\r\n		printf("%d\\n",t);\r\n	}\r\n	return 0;\r\n}'),
(648, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(649, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint s[100000005];\r\n\r\nint main()\r\n{\r\n	long n,i;\r\n	long a;\r\n	long x=1;\r\n	while(~scanf("%ld",&n))\r\n	{\r\n		memset(s,0,sizeof(s));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%ld",&a);\r\n			s[a]++;\r\n		}\r\n		printf("Case #%ld: ",x);x++;\r\n		for(i=0;i<100000001;i++)\r\n		{\r\n			if(s[i]%2!=0)\r\n			{\r\n				printf("%ld\\n",i);\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	return 0;\r\n}\r\n'),
(650, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827159");\r\n	return 0;\r\n}'),
(651, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("2012\\n");\r\n	return 0;\r\n}'),
(652, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[660],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(653, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p;\r\n	int f[10];\r\n	scanf("%d",&n);\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d",p);\r\n	return 0;\r\n}'),
(654, '#include <stdio.h>\r\nint main()\r\n{\r\n	int result = 0;\r\n	int n,i,x,j=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		j++;\r\n		result=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&x);\r\n			result ^=x;\r\n		}\r\n		printf("Case #%d: %d\\n",j,result);\r\n	}\r\n	return 0;\r\n}'),
(655, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31000");\r\n	return 0;\r\n}\r\n'),
(656, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[10],t,n,m=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		m++;\r\n		t=0;\r\n		for(int i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}	\r\n		for(int j=0;j<n;j++)\r\n		{\r\n			t^=a[j];\r\n		}\r\n		\r\n		printf("Case #%d:%d\\n",m,t);\r\n	}\r\n	return 0;\r\n}'),
(657, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 104 4900");\r\n	return 0;\r\n}'),
(658, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p;\r\n	int f[100];\r\n	scanf("%d",&n);\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d",p);\r\n	return 0;\r\n}'),
(659, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("2007\\n");\r\n	return 0;\r\n}'),
(660, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(!scanf("%d",&n)=EOF)\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}\r\n'),
(661, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b, c;\r\n\r\nscanf("%d\\n",&a);\r\nscanf("%d\\n",&b);\r\nscanf("%d\\n",&c);\r\nif(a!=3&&a>=0)\r\n      printf("%d\\n",a);\r\nelse\r\n      printf("%d",-a);\r\nif(b!=3&&b>=0)\r\n      printf("%d\\n",b);\r\nelse\r\n      printf("%d",-b);\r\nif(c/100000000==3)\r\n      printf("2");\r\nreturn 0;\r\n\r\n	\r\n}'),
(662, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a[10],t,n,m=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		m++;\r\n		t=0;\r\n		for(int i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}	\r\n		for(int j=0;j<n;j++)\r\n		{\r\n			t^=a[j];\r\n		}\r\n		\r\n		printf("Case #%d: %d\\n",m,t);\r\n	}\r\n	return 0;\r\n}'),
(663, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.01075 0.02128");\r\nreturn 0;\r\n}\r\n'),
(664, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("5 51 9702");\r\n	return 0;\r\n}'),
(665, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=1999;\r\n	printf("%d\\n",a);\r\n}\r\n\r\n'),
(666, '#include <stdio.h>\r\n\r\nint main() \r\n{\r\n	printf("1368\\n");\r\n	return 0;\r\n}'),
(667, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("Woart Woart Woart Dannie Woart Dannie");\r\n    return 0;\r\n}'),
(668, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(669, '#include <stdio.h>\r\n\r\n\r\nint main() \r\n{\r\n	printf("618\\n");\r\n	return 0;\r\n}'),
(670, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=15;\r\n	printf("%d\\n",a);\r\n}\r\n\r\n'),
(671, '#include <stdio.h>\r\n\r\n\r\nint main() \r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(672, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 22 43 89 171");\r\n	return 0;\r\n}'),
(673, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 13 14 13");\r\n	return 0;\r\n}'),
(674, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.62162 0.13208");\r\n	return 0;\r\n}'),
(675, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    long int n;\r\n	int v=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n>0&&(n%2==1))\r\n		{\r\n			int a[n];\r\n			int x;\r\n			for(int i=0;i<n;i++)\r\n			{\r\n				scanf("%d",&a[i]);	\r\n			}\r\n			for(int j=0;j<n;j++)\r\n			{\r\n				x=1;\r\n				for(int k=j+1;k<n;k++)\r\n				{					\r\n						if(a[j]==a[k]) x=0;		\r\n				}\r\n				if(x==1)\r\n				{	\r\n					v++;\r\n					printf("Case #%d: %d\\n",v,a[j]);\r\n					break;\r\n				}\r\n			}	\r\n		}\r\n		else break;\r\n		\r\n	}\r\n	return 0;\r\n}'),
(676, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=54250;\r\n	printf("%d\\n",a);\r\n}\r\n\r\n'),
(677, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p;\r\n	int f[602];\r\n	scanf("%d",&n);\r\n	if(n>=600)\r\n	printf("请输入n<600");\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d",p);\r\n	return 0;\r\n}'),
(678, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 51 9702");\r\n	return 0;\r\n}'),
(679, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p;\r\n	int f[602];\r\n	scanf("%d",&n);\r\n	if(n>=600)\r\n	printf("请输入n<600");\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d",p);\r\n	return 0;\r\n}'),
(680, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Woart");\r\n	return 0;\r\n}'),
(681, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("1912")\r\n	\r\n}'),
(682, '#include "stdio.h"\r\nint main()\r\n{long a[10000],i,x;\r\nwhile (scanf("%ld",&x)!=EOF&&x)\r\n{for(i=0;i<x;i++)\r\nscanf("%ld",&a[i]);\r\nprintf("%ld\\n",a[x/2]);\r\nreturn 0;\r\n}\r\n}'),
(683, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(684, '#include "stdio.h"\r\nint main()\r\n{long a[10000],i,x;\r\nwhile (scanf("%ld",&x)!=EOF&&x)\r\n{for(i=0;i<x;i++)\r\nscanf("%ld",&a[i]);\r\nprintf("%ld\\n",a[x/2]);\r\nreturn 0;\r\n}\r\n}'),
(685, '#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n#define MAX 200\r\n\r\nint a[MAX], n;\r\nchar c[20];\r\n\r\nvoid mi()\r\n{\r\n	int e,i,j,k,q,set=0, len, base=0, record =0;\r\n	memset(a, 0, sizeof(a));\r\n	len = strlen(c);\r\n	for( i=0; i<len; i++)\r\n	{\r\n		if(c[i]==''.'')\r\n		{\r\n			record=len-i-1;\r\n			continue;\r\n		}\r\n		base = base*10+c[i]-''0'';\r\n	}\r\n	if( record)\r\n		for(k=len-1; c[k]==''0''; k--,record--)\r\n		base/=10;\r\n	record*=n;\r\n	for(q=base,i=0;i<MAX; i++, q/=10)\r\n		a[i]=q%10;\r\n	for( j=0; j<n-1; j++)\r\n	{\r\n		for( i=0; i<MAX;i++)\r\n		{\r\n			a[i] = a[i]*base+set;\r\n			set=a[i]/10;\r\n			a[i]=a[i]%10;\r\n		}\r\n	}\r\n	for(i=MAX-1; i>=0; i--)\r\n		if(a[i]!=0) break;\r\n	if(record>i)\r\n	{\r\n		cout << ".";\r\n		for(e=record-1; e>=0; e--)\r\n			cout << a[e];\r\n	}\r\n	else\r\n	{\r\n		for( ; i>record-1; i--)\r\n			cout <<a[i];\r\n		if(i>=0) cout << ".";\r\n		for(;i>=0; i--) cout << a[i];\r\n	}\r\n	cout << endl;\r\n}\r\n\r\nint main()\r\n{\r\n	sprintf(c, "2");\r\n	while(cin >> n)\r\n	{\r\n		if( n == 0)\r\n		{\r\n			cout << 1 << endl;\r\n			continue;\r\n		}\r\n		mi();\r\n	}\r\n	return 0;\r\n}'),
(686, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("1912");\r\n	\r\n}'),
(687, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2 9 13 15 23");\r\n	return 0;\r\n}\r\n'),
(688, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b=2228;\r\n	int i;\r\n	for(i=0;i<15;i++)\r\n	if(a[i]==b)\r\n	printf("%d\\n",a[i]);\r\n}'),
(689, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 86 380");\r\n	return 0;\r\n}'),
(690, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(691, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    double a[600],b[600],c[600];\r\n	a[0]=0;\r\n	a[1]=1;\r\n	for(int i=0;i<588;i++)\r\n	{\r\n		a[i+2]=a[i+1]+a[i];\r\n	}\r\nfor(int j=1;j<599;j++)\r\n{\r\nb[j]=a[j-1]+a[j+1];\r\n}\r\ndouble x,y;\r\nfor(int k=0;k<599;k++)\r\n{\r\n	x=y=1;\r\n	for(int q=0;q<k;q++)\r\n	{\r\n		\r\n		x=x*(1+sqrt(5));\r\n		y=y*(1-sqrt(5));\r\n	}\r\n	c[k]=(x+y)/b[k];\r\n}\r\nint n,p3[3],g;\r\nc[0]=1;\r\nfor(int w=0;w<3;w++)\r\n{\r\n	cin>>p3[w];\r\n}\r\nfor(int w1=0;w1<3;w1++)\r\n{\r\n	g=p3[w1];\r\n	cout<<c[g]<<endl;\r\n}\r\nreturn 0;\r\n}\r\n\r\n'),
(692, '#include <iostream>\r\n#include <string>\r\n#include <string.h>\r\nusing namespace std;\r\n#define MAX 200\r\n\r\nint a[MAX], n;\r\nchar c[20];\r\n\r\nvoid mi()\r\n{\r\n	int e,i,j,k,q,set=0, len, base=0, record =0;\r\n	memset(a, 0, sizeof(a));\r\n	len = strlen(c);\r\n	for( i=0; i<len; i++)\r\n	{\r\n		if(c[i]==''.'')\r\n		{\r\n			record=len-i-1;\r\n			continue;\r\n		}\r\n		base = base*10+c[i]-''0'';\r\n	}\r\n	if( record)\r\n		for(k=len-1; c[k]==''0''; k--,record--)\r\n		base/=10;\r\n	record*=n;\r\n	for(q=base,i=0;i<MAX; i++, q/=10)\r\n		a[i]=q%10;\r\n	for( j=0; j<n-1; j++)\r\n	{\r\n		for( i=0; i<MAX;i++)\r\n		{\r\n			a[i] = a[i]*base+set;\r\n			set=a[i]/10;\r\n			a[i]=a[i]%10;\r\n		}\r\n	}\r\n	for(i=MAX-1; i>=0; i--)\r\n		if(a[i]!=0) break;\r\n	if(record>i)\r\n	{\r\n		cout << ".";\r\n		for(e=record-1; e>=0; e--)\r\n			cout << a[e];\r\n	}\r\n	else\r\n	{\r\n		for( ; i>record-1; i--)\r\n			cout <<a[i];\r\n		if(i>=0) cout << ".";\r\n		for(;i>=0; i--) cout << a[i];\r\n	}\r\n	cout << endl;\r\n}\r\n\r\nint main()\r\n{\r\n	sprintf(c, "2");\r\n	while(cin >> n)\r\n	{\r\n		if( n == 0)\r\n		{\r\n			cout << 1 << endl;\r\n			continue;\r\n		}\r\n		mi();\r\n	}\r\n	return 0;\r\n}'),
(693, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=0;\r\n	printf("%d\\n",a);\r\n}\r\n\r\n'),
(694, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 4999 32767 61728395 493827161");\r\n	return 0;\r\n}'),
(695, '#include<stdio.h>\r\n#include<string.h>\r\nint main ()\r\n{\r\n	char roma[20];\r\n	int alb[20];\r\n	int n,sum;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	int i,j,len;\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		sum=0;\r\n		gets(roma);\r\n		len=strlen(roma);	\r\n		for(j=0;j<len;j++)\r\n		{\r\n			switch(roma[j])\r\n			{\r\n				case ''I'':alb[j]=1;break;\r\n				case ''V'':alb[j]=5;break;\r\n				case ''X'':alb[j]=10;break;\r\n				case ''L'':alb[j]=50;break;\r\n				case ''C'':alb[j]=100;break;\r\n			}\r\n		}\r\n		for(j=0;j<len;j++)\r\n		{\r\n			if(j!=len-1)\r\n			{\r\n				if(alb[j]<alb[j+1])\r\n				alb[j]=-alb[j];\r\n				sum+=alb[j];\r\n			}\r\n			else\r\n			{\r\n				sum+=alb[len-1];\r\n			}	\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(696, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("618");\r\n	\r\n}'),
(697, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(698, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("15");\r\n	\r\n}'),
(699, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=618;\r\n	printf("%d\\n",a);\r\n}\r\n'),
(700, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[110][110]={0};\r\n	int n, t[110], i;\r\n	cin>>n;\r\n	getchar();\r\n	for(i=0; i<n; i++)\r\n	{\r\n		gets(a[i]);\r\n	}\r\n\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0; i<n; i++)\r\n	{\r\n		cout<<a[i][t[i]-1];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(701, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=2012;\r\n	printf("%d\\n",a);\r\n}\r\n'),
(702, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("2046");\r\n	\r\n}'),
(703, '#include<stdio.h>\r\nint main()\r\n{\r\n int a,b;\r\n while (scanf("%d",&a) !=EOF) \r\n {	\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n }\r\n return 0;\r\n}'),
(704, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(705, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=1368;\r\n	printf("%d\\n",a);\r\n}\r\n'),
(706, '11 21 43 85 171'),
(707, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 39 79 164");\r\n	return 0;\r\n}'),
(708, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n\r\n	int a;\r\n	a=2010;\r\n	printf("%d\\n",a);\r\n}\r\n'),
(709, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2 9 13 15 21");\r\n	return 0;\r\n}'),
(710, '#include<stdio.h>\r\nint main()\r\n{\r\n	int m=0;\r\n	long t,n,a;\r\n	while(scanf("%ld",&n)!=EOF)\r\n	{\r\n		m++;\r\n		t=0;\r\n		while(n)\r\n		{\r\n			\r\n			scanf("%ld",&a);\r\n			t^=a;\r\n			n--;\r\n		}\r\n		printf("Case #%d: %ld\\n",m,t);\r\n	}\r\n	return 0;\r\n}'),
(711, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("2012");\r\n	\r\n}'),
(712, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 101 256 11112 31499");\r\n	return 0;\r\n}'),
(713, '#include<stdio.h>\r\nint main()\r\n{\r\n    printf("13 12 9 13 12");\r\n    return 0;\r\n}'),
(714, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nprintf("2228");\r\n	\r\n}'),
(715, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(716, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a;\r\nscanf("%d\\n",&a);\r\nprintf("%d",a%3);\r\nreturn 0;\r\n\r\n	\r\n}'),
(717, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("54250\\n");\r\n}\r\n\r\n\r\n'),
(718, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 36 81");\r\n	return 0;\r\n}'),
(719, '#include "stdio.h"\r\nint main()\r\n{long x;\r\nwhile(scanf("%ld",&x)!=EOF&&x)\r\n{printf("%ld\\n",x%3);\r\n}\r\nreturn 0;\r\n}'),
(720, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 72 330 1716 318774305125");\r\n	return 0;\r\n}'),
(721, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("2007\\n");\r\n}\r\n\r\n'),
(722, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 16 32 64 128");\r\n	return 0;\r\n}\r\n'),
(723, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b;\r\nscanf("%d\\n",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\nreturn 0;\r\n\r\n	\r\n}'),
(724, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(725, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("2046\\n");\r\n}\r\n\r\n'),
(726, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\nreturn 0;\r\n\r\n	\r\n}'),
(727, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		char a[200]={1};\r\n		char b[200]={0};\r\n		int i=1;\r\n		int j;\r\n		while(n--)\r\n		{\r\n			\r\n			for(j=0;j<i;j++)\r\n			{\r\n				a[j]=a[j]*2;\r\n			}\r\n			for(j=0;j<i;j++)\r\n			{\r\n				b[j]=a[j]/10;\r\n				a[j]=a[j]%10;\r\n				a[j+1]=a[j+1]+b[j];\r\n			}\r\n			if(a[i])\r\n				i++;\r\n		}\r\n		int c=strlen(a);\r\n		for(j=i-1;j>=0;j--)\r\n			printf("%d",a[j]);\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}\r\n\r\n\r\n\r\n\r\n			\r\n\r\n			\r\n		\r\n'),
(728, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\nreturn 0;\r\n\r\n	\r\n}'),
(729, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("1735\\n");\r\n}\r\n\r\n'),
(730, '#include <cstdio>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint getnum(char c)\r\n{\r\n	switch (c)\r\n	{\r\n		case ''I'': return 1;\r\n		case ''V'': return 5;\r\n		case ''X'': return 10;\r\n		case ''L'': return 50;\r\n		case ''C'': return 100;\r\n	};\r\n	return 1000;\r\n}\r\nint main()\r\n{\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		while(n--)\r\n		{\r\n			int sum = 0;\r\n			char tmp[100];\r\n			tmp[0] = ''A'';\r\n			scanf("%s",tmp+1);\r\n			for(int i = 1; tmp[i]; ++i)\r\n			{\r\n				sum += getnum(tmp[i]);\r\n				if(getnum(tmp[i]) > getnum(tmp[i-1]))\r\n				{\r\n					for(int j = 1; j < i; ++j)\r\n					{\r\n						if(getnum(tmp[j]) < getnum(tmp[i]))\r\n						{\r\n							sum -= getnum(tmp[j])*2;\r\n						}\r\n					}\r\n				}	\r\n			}\r\n			cout<<sum<<endl;\r\n		}\r\n	}	\r\n	return 0;\r\n}\r\n\r\n'),
(731, '#include<stdio.h>\r\nint main()\r\n{\r\n    long t,i,n,k,s=1;\r\n\r\n    while(scanf("%ld",&n)!=EOF)\r\n    {\r\n        t=0;\r\n        for(i=0;i<n;i++)\r\n            {scanf("%ld",&k);\r\n            t=t^k;}\r\n\r\n          printf("Case #%ld: %ld\\n",s,t);\r\n\r\n   s++;\r\n    }\r\n    return 0;\r\n}\r\n'),
(732, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("1644\\n");\r\n}\r\n\r\n');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(733, '#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\n\r\nstring a[610] = {"1", "2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536","131072","262144","524288","1048576","2097152","4194304","8388608","16777216","33554432","67108864","134217728","268435456","536870912","1073741824","2147483648","4294967296","8589934592","17179869184","34359738368","68719476736","137438953472","274877906944","549755813888","1099511627776","2199023255552","4398046511104","8796093022208","17592186044416","35184372088832","70368744177664","140737488355328","281474976710656","562949953421312","1125899906842624","2251799813685248","4503599627370496","9007199254740992","18014398509481984",\r\n"36028797018963968","72057594037927936","144115188075855872","288230376151711744","576460752303423488","1152921504606846976","2305843009213693952","4611686018427387904","9223372036854775808","18446744073709551616","36893488147419103232","73786976294838206464","147573952589676412928","295147905179352825856","590295810358705651712","1180591620717411303424","2361183241434822606848","4722366482869645213696","9444732965739290427392","18889465931478580854784","37778931862957161709568","75557863725914323419136","151115727451828646838272","302231454903657293676544","604462909807314587353088","1208925819614629174706176","2417851639229258349412352","4835703278458516698824704","9671406556917033397649408","19342813113834066795298816","38685626227668133590597632","77371252455336267181195264","154742504910672534362390528","309485009821345068724781056","618970019642690137449562112","1237940039285380274899124224","2475880078570760549798248448","4951760157141521099596496896","9903520314283042199192993792","19807040628566084398385987584","39614081257132168796771975168","79228162514264337593543950336","158456325028528675187087900672","316912650057057350374175801344","633825300114114700748351602688","1267650600228229401496703205376","2535301200456458802993406410752","5070602400912917605986812821504","10141204801825835211973625643008","20282409603651670423947251286016","40564819207303340847894502572032","81129638414606681695789005144064","162259276829213363391578010288128","324518553658426726783156020576256","649037107316853453566312041152512","1298074214633706907132624082305024","2596148429267413814265248164610048","5192296858534827628530496329220096","10384593717069655257060992658440192","20769187434139310514121985316880384","41538374868278621028243970633760768","83076749736557242056487941267521536","166153499473114484112975882535043072","332306998946228968225951765070086144","664613997892457936451903530140172288","1329227995784915872903807060280344576","2658455991569831745807614120560689152","5316911983139663491615228241121378304","10633823966279326983230456482242756608","21267647932558653966460912964485513216","42535295865117307932921825928971026432","85070591730234615865843651857942052864","170141183460469231731687303715884105728","340282366920938463463374607431768211456","680564733841876926926749214863536422912","1361129467683753853853498429727072845824","2722258935367507707706996859454145691648","5444517870735015415413993718908291383296","10889035741470030830827987437816582766592","21778071482940061661655974875633165533184","43556142965880123323311949751266331066368","87112285931760246646623899502532662132736","174224571863520493293247799005065324265472","348449143727040986586495598010130648530944","696898287454081973172991196020261297061888","1393796574908163946345982392040522594123776","2787593149816327892691964784081045188247552","5575186299632655785383929568162090376495104","11150372599265311570767859136324180752990208","22300745198530623141535718272648361505980416","44601490397061246283071436545296723011960832","89202980794122492566142873090593446023921664","178405961588244985132285746181186892047843328","356811923176489970264571492362373784095686656","713623846352979940529142984724747568191373312","1427247692705959881058285969449495136382746624","2854495385411919762116571938898990272765493248","5708990770823839524233143877797980545530986496","11417981541647679048466287755595961091061972992","22835963083295358096932575511191922182123945984","45671926166590716193865151022383844364247891968","91343852333181432387730302044767688728495783936","182687704666362864775460604089535377456991567872","365375409332725729550921208179070754913983135744","730750818665451459101842416358141509827966271488","1461501637330902918203684832716283019655932542976","2923003274661805836407369665432566039311865085952","5846006549323611672814739330865132078623730171904","11692013098647223345629478661730264157247460343808","23384026197294446691258957323460528314494920687616","46768052394588893382517914646921056628989841375232","93536104789177786765035829293842113257979682750464","187072209578355573530071658587684226515959365500928","374144419156711147060143317175368453031918731001856","748288838313422294120286634350736906063837462003712","1496577676626844588240573268701473812127674924007424","2993155353253689176481146537402947624255349848014848","5986310706507378352962293074805895248510699696029696","11972621413014756705924586149611790497021399392059392","23945242826029513411849172299223580994042798784118784","47890485652059026823698344598447161988085597568237568","95780971304118053647396689196894323976171195136475136","191561942608236107294793378393788647952342390272950272","383123885216472214589586756787577295904684780545900544","766247770432944429179173513575154591809369561091801088","1532495540865888858358347027150309183618739122183602176","3064991081731777716716694054300618367237478244367204352","6129982163463555433433388108601236734474956488734408704","12259964326927110866866776217202473468949912977468817408","24519928653854221733733552434404946937899825954937634816","49039857307708443467467104868809893875799651909875269632","98079714615416886934934209737619787751599303819750539264","196159429230833773869868419475239575503198607639501078528","392318858461667547739736838950479151006397215279002157056","784637716923335095479473677900958302012794430558004314112","1569275433846670190958947355801916604025588861116008628224","3138550867693340381917894711603833208051177722232017256448","6277101735386680763835789423207666416102355444464034512896","12554203470773361527671578846415332832204710888928069025792","25108406941546723055343157692830665664409421777856138051584","50216813883093446110686315385661331328818843555712276103168","100433627766186892221372630771322662657637687111424552206336","200867255532373784442745261542645325315275374222849104412672","401734511064747568885490523085290650630550748445698208825344","803469022129495137770981046170581301261101496891396417650688","1606938044258990275541962092341162602522202993782792835301376","3213876088517980551083924184682325205044405987565585670602752","6427752177035961102167848369364650410088811975131171341205504","12855504354071922204335696738729300820177623950262342682411008","25711008708143844408671393477458601640355247900524685364822016","51422017416287688817342786954917203280710495801049370729644032","102844034832575377634685573909834406561420991602098741459288064","205688069665150755269371147819668813122841983204197482918576128","411376139330301510538742295639337626245683966408394965837152256","822752278660603021077484591278675252491367932816789931674304512","1645504557321206042154969182557350504982735865633579863348609024","3291009114642412084309938365114701009965471731267159726697218048","6582018229284824168619876730229402019930943462534319453394436096","13164036458569648337239753460458804039861886925068638906788872192","26328072917139296674479506920917608079723773850137277813577744384","52656145834278593348959013841835216159447547700274555627155488768","105312291668557186697918027683670432318895095400549111254310977536","210624583337114373395836055367340864637790190801098222508621955072","421249166674228746791672110734681729275580381602196445017243910144","842498333348457493583344221469363458551160763204392890034487820288","1684996666696914987166688442938726917102321526408785780068975640576","3369993333393829974333376885877453834204643052817571560137951281152","6739986666787659948666753771754907668409286105635143120275902562304","13479973333575319897333507543509815336818572211270286240551805124608","26959946667150639794667015087019630673637144422540572481103610249216","53919893334301279589334030174039261347274288845081144962207220498432","107839786668602559178668060348078522694548577690162289924414440996864","215679573337205118357336120696157045389097155380324579848828881993728","431359146674410236714672241392314090778194310760649159697657763987456","862718293348820473429344482784628181556388621521298319395315527974912","1725436586697640946858688965569256363112777243042596638790631055949824","3450873173395281893717377931138512726225554486085193277581262111899648","6901746346790563787434755862277025452451108972170386555162524223799296","13803492693581127574869511724554050904902217944340773110325048447598592","27606985387162255149739023449108101809804435888681546220650096895197184","55213970774324510299478046898216203619608871777363092441300193790394368","110427941548649020598956093796432407239217743554726184882600387580788736","220855883097298041197912187592864814478435487109452369765200775161577472","441711766194596082395824375185729628956870974218904739530401550323154944","883423532389192164791648750371459257913741948437809479060803100646309888","1766847064778384329583297500742918515827483896875618958121606201292619776","3533694129556768659166595001485837031654967793751237916243212402585239552","7067388259113537318333190002971674063309935587502475832486424805170479104","14134776518227074636666380005943348126619871175004951664972849610340958208","28269553036454149273332760011886696253239742350009903329945699220681916416","56539106072908298546665520023773392506479484700019806659891398441363832832","113078212145816597093331040047546785012958969400039613319782796882727665664","226156424291633194186662080095093570025917938800079226639565593765455331328","452312848583266388373324160190187140051835877600158453279131187530910662656","904625697166532776746648320380374280103671755200316906558262375061821325312","1809251394333065553493296640760748560207343510400633813116524750123642650624","3618502788666131106986593281521497120414687020801267626233049500247285301248","7237005577332262213973186563042994240829374041602535252466099000494570602496","14474011154664524427946373126085988481658748083205070504932198000989141204992","28948022309329048855892746252171976963317496166410141009864396001978282409984","57896044618658097711785492504343953926634992332820282019728792003956564819968","115792089237316195423570985008687907853269984665640564039457584007913129639936","231584178474632390847141970017375815706539969331281128078915168015826259279872","463168356949264781694283940034751631413079938662562256157830336031652518559744","926336713898529563388567880069503262826159877325124512315660672063305037119488","1852673427797059126777135760139006525652319754650249024631321344126610074238976","3705346855594118253554271520278013051304639509300498049262642688253220148477952","7410693711188236507108543040556026102609279018600996098525285376506440296955904","14821387422376473014217086081112052205218558037201992197050570753012880593911808","29642774844752946028434172162224104410437116074403984394101141506025761187823616","59285549689505892056868344324448208820874232148807968788202283012051522375647232","118571099379011784113736688648896417641748464297615937576404566024103044751294464","237142198758023568227473377297792835283496928595231875152809132048206089502588928","474284397516047136454946754595585670566993857190463750305618264096412179005177856","948568795032094272909893509191171341133987714380927500611236528192824358010355712","1897137590064188545819787018382342682267975428761855001222473056385648716020711424","3794275180128377091639574036764685364535950857523710002444946112771297432041422848","7588550360256754183279148073529370729071901715047420004889892225542594864082845696","15177100720513508366558296147058741458143803430094840009779784451085189728165691392","30354201441027016733116592294117482916287606860189680019559568902170379456331382784","60708402882054033466233184588234965832575213720379360039119137804340758912662765568","121416805764108066932466369176469931665150427440758720078238275608681517825325531136","242833611528216133864932738352939863330300854881517440156476551217363035650651062272","485667223056432267729865476705879726660601709763034880312953102434726071301302124544","971334446112864535459730953411759453321203419526069760625906204869452142602604249088","1942668892225729070919461906823518906642406839052139521251812409738904285205208498176","3885337784451458141838923813647037813284813678104279042503624819477808570410416996352","7770675568902916283677847627294075626569627356208558085007249638955617140820833992704","15541351137805832567355695254588151253139254712417116170014499277911234281641667985408","31082702275611665134711390509176302506278509424834232340028998555822468563283335970816","62165404551223330269422781018352605012557018849668464680057997111644937126566671941632","124330809102446660538845562036705210025114037699336929360115994223289874253133343883264","248661618204893321077691124073410420050228075398673858720231988446579748506266687766528","497323236409786642155382248146820840100456150797347717440463976893159497012533375533056","994646472819573284310764496293641680200912301594695434880927953786318994025066751066112","1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224","3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448","7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896","15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792","31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584","63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168","127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336","254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672","509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344","1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688","2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376","4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752","8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504","16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008","32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016","65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032","130370302485407109521180524058200202307293977194619920040712988758680403184853549195737432064","260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128","521481209941628438084722096232800809229175908778479680162851955034721612739414196782949728256","1042962419883256876169444192465601618458351817556959360325703910069443225478828393565899456512","2085924839766513752338888384931203236916703635113918720651407820138886450957656787131798913024","4171849679533027504677776769862406473833407270227837441302815640277772901915313574263597826048","8343699359066055009355553539724812947666814540455674882605631280555545803830627148527195652096","16687398718132110018711107079449625895333629080911349765211262561111091607661254297054391304192","33374797436264220037422214158899251790667258161822699530422525122222183215322508594108782608384","66749594872528440074844428317798503581334516323645399060845050244444366430645017188217565216768","133499189745056880149688856635597007162669032647290798121690100488888732861290034376435130433536","266998379490113760299377713271194014325338065294581596243380200977777465722580068752870260867072","533996758980227520598755426542388028650676130589163192486760401955554931445160137505740521734144","1067993517960455041197510853084776057301352261178326384973520803911109862890320275011481043468288","2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576","4271974071841820164790043412339104229205409044713305539894083215644439451561281100045924173873152","8543948143683640329580086824678208458410818089426611079788166431288878903122562200091848347746304","17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608","34175792574734561318320347298712833833643272357706444319152665725155515612490248800367393390985216","68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432","136703170298938245273281389194851335334573089430825777276610662900622062449960995201469573563940864","273406340597876490546562778389702670669146178861651554553221325801244124899921990402939147127881728","546812681195752981093125556779405341338292357723303109106442651602488249799843980805878294255763456","1093625362391505962186251113558810682676584715446606218212885303204976499599687961611756588511526912","2187250724783011924372502227117621365353169430893212436425770606409952999199375923223513177023053824","4374501449566023848745004454235242730706338861786424872851541212819905998398751846447026354046107648","8749002899132047697490008908470485461412677723572849745703082425639811996797503692894052708092215296","17498005798264095394980017816940970922825355447145699491406164851279623993595007385788105416184430592","34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184","69992023193056381579920071267763883691301421788582797965624659405118495974380029543152421664737722368","139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444736","279968092772225526319680285071055534765205687154331191862498637620473983897520118172609686658950889472","559936185544451052639360570142111069530411374308662383724997275240947967795040236345219373317901778944","1119872371088902105278721140284222139060822748617324767449994550481895935590080472690438746635803557888","2239744742177804210557442280568444278121645497234649534899989100963791871180160945380877493271607115776","4479489484355608421114884561136888556243290994469299069799978201927583742360321890761754986543214231552","8958978968711216842229769122273777112486581988938598139599956403855167484720643781523509973086428463104","17917957937422433684459538244547554224973163977877196279199912807710334969441287563047019946172856926208","35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852416","71671831749689734737838152978190216899892655911508785116799651230841339877765150252188079784691427704832","143343663499379469475676305956380433799785311823017570233599302461682679755530300504376159569382855409664","286687326998758938951352611912760867599570623646035140467198604923365359511060601008752319138765710819328","573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656","1146749307995035755805410447651043470398282494584140561868794419693461438044242404035009276555062843277312","2293498615990071511610820895302086940796564989168281123737588839386922876088484808070018553110125686554624","4586997231980143023221641790604173881593129978336562247475177678773845752176969616140037106220251373109248","9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496","18347988927920572092886567162416695526372519913346248989900710715095383008707878464560148424881005492436992","36695977855841144185773134324833391052745039826692497979801421430190766017415756929120296849762010984873984","73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968","146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936","293567822846729153486185074598667128421960318613539983838411371441526128139326055432962374798096087878991872","587135645693458306972370149197334256843920637227079967676822742883052256278652110865924749596192175757983744","1174271291386916613944740298394668513687841274454159935353645485766104512557304221731849499192384351515967488","2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031934976","4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952","9394170331095332911557922387157348109502730195633279482829163886128836100458433773854795993539074812127739904","18788340662190665823115844774314696219005460391266558965658327772257672200916867547709591987078149624255479808","37576681324381331646231689548629392438010920782533117931316655544515344401833735095419183974156299248510959616","75153362648762663292463379097258784876021841565066235862633311089030688803667470190838367948312598497021919232","150306725297525326584926758194517569752043683130132471725266622178061377607334940381676735896625196994043838464","300613450595050653169853516389035139504087366260264943450533244356122755214669880763353471793250393988087676928","601226901190101306339707032778070279008174732520529886901066488712245510429339761526706943586500787976175353856","1202453802380202612679414065556140558016349465041059773802132977424491020858679523053413887173001575952350707712","2404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415424","4809815209520810450717656262224562232065397860164239095208531909697964083434718092213655548692006303809402830848","9619630419041620901435312524449124464130795720328478190417063819395928166869436184427311097384012607618805661696","19239260838083241802870625048898248928261591440656956380834127638791856333738872368854622194768025215237611323392","38478521676166483605741250097796497856523182881313912761668255277583712667477744737709244389536050430475222646784","76957043352332967211482500195592995713046365762627825523336510555167425334955489475418488779072100860950445293568","153914086704665934422965000391185991426092731525255651046673021110334850669910978950836977558144201721900890587136","307828173409331868845930000782371982852185463050511302093346042220669701339821957901673955116288403443801781174272","615656346818663737691860001564743965704370926101022604186692084441339402679643915803347910232576806887603562348544","1231312693637327475383720003129487931408741852202045208373384168882678805359287831606695820465153613775207124697088","2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394176","4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455100828498788352","9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704","19701003098197239606139520050071806902539869635232723333974146702122860885748605305707133127442457820403313995153408","39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816","78804012392788958424558080200287227610159478540930893335896586808491443542994421222828532509769831281613255980613632","157608024785577916849116160400574455220318957081861786671793173616982887085988842445657065019539662563226511961227264","315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528","630432099142311667396464641602297820881275828327447146687172694467931548343955369782628260078158650252906047844909056","1260864198284623334792929283204595641762551656654894293374345388935863096687910739565256520156317300505812095689818112","2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224","5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448","10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896","20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792","40347654345107946713373737062547060536401653012956617387979052445947619094013143666088208645002153616185987062074179584","80695308690215893426747474125094121072803306025913234775958104891895238188026287332176417290004307232371974124148359168","161390617380431786853494948250188242145606612051826469551916209783790476376052574664352834580008614464743948248296718336","322781234760863573706989896500376484291213224103652939103832419567580952752105149328705669160017228929487896496593436672","645562469521727147413979793000752968582426448207305878207664839135161905504210298657411338320034457858975792993186873344","1291124939043454294827959586001505937164852896414611756415329678270323811008420597314822676640068915717951585986373746688","2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376","5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752","10328999512347634358623676688012047497318823171316894051322637426162590488067364778518581413120551325743612687890989973504","20657999024695268717247353376024094994637646342633788102645274852325180976134729557037162826241102651487225375781979947008","41315998049390537434494706752048189989275292685267576205290549704650361952269459114074325652482205302974450751563959894016","82631996098781074868989413504096379978550585370535152410581099409300723904538918228148651304964410605948901503127919788032","165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064","330527984395124299475957654016385519914202341482140609642324397637202895618155672912594605219857642423795606012511679152128","661055968790248598951915308032771039828404682964281219284648795274405791236311345825189210439715284847591212025023358304256","1322111937580497197903830616065542079656809365928562438569297590548811582472622691650378420879430569695182424050046716608512","2644223875160994395807661232131084159313618731857124877138595181097623164945245383300756841758861139390364848100093433217024","5288447750321988791615322464262168318627237463714249754277190362195246329890490766601513683517722278780729696200186866434048","10576895500643977583230644928524336637254474927428499508554380724390492659780981533203027367035444557561459392400373732868096","21153791001287955166461289857048673274508949854856999017108761448780985319561963066406054734070889115122918784800747465736192","42307582002575910332922579714097346549017899709713998034217522897561970639123926132812109468141778230245837569601494931472384","84615164005151820665845159428194693098035799419427996068435045795123941278247852265624218936283556460491675139202989862944768","169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536","338460656020607282663380637712778772392143197677711984273740183180495765112991409062496875745134225841966700556811959451779072","676921312041214565326761275425557544784286395355423968547480366360991530225982818124993751490268451683933401113623918903558144","1353842624082429130653522550851115089568572790710847937094960732721983060451965636249987502980536903367866802227247837807116288","2707685248164858261307045101702230179137145581421695874189921465443966120903931272499975005961073806735733604454495675614232576","5415370496329716522614090203404460358274291162843391748379842930887932241807862544999950011922147613471467208908991351228465152","10830740992659433045228180406808920716548582325686783496759685861775864483615725089999900023844295226942934417817982702456930304","21661481985318866090456360813617841433097164651373566993519371723551728967231450179999800047688590453885868835635965404913860608","43322963970637732180912721627235682866194329302747133987038743447103457934462900359999600095377180907771737671271930809827721216","86645927941275464361825443254471365732388658605494267974077486894206915868925800719999200190754361815543475342543861619655442432","173291855882550928723650886508942731464777317210988535948154973788413831737851601439998400381508723631086950685087723239310884864","346583711765101857447301773017885462929554634421977071896309947576827663475703202879996800763017447262173901370175446478621769728","693167423530203714894603546035770925859109268843954143792619895153655326951406405759993601526034894524347802740350892957243539456",\r\n"1386334847060407429789207092071541851718218537687908287585239790307310653902812811519987203052069789048695605480701785914487078912","2772669694120814859578414184143083703436437075375816575170479580614621307805625623039974406104139578097391210961403571828974157824","5545339388241629719156828368286167406872874150751633150340959161229242615611251246079948812208279156194782421922807143657948315648","11090678776483259438313656736572334813745748301503266300681918322458485231222502492159897624416558312389564843845614287315896631296","22181357552966518876627313473144669627491496603006532601363836644916970462445004984319795248833116624779129687691228574631793262592","44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184","88725430211866075506509253892578678509965986412026130405455346579667881849780019937279180995332466499116518750764914298527173050368","177450860423732151013018507785157357019931972824052260810910693159335763699560039874558;361990664932998233037501529828597054346100736","354901720847464302026037015570314714039863945648104521621821386318671527399120079749116723981329865996466075003059657194108692201472","709803441694928604052074031140629428079727891296209043243642772637343054798240159498233447962659731992932150006119314388217384402944","1419606883389857208104148062281258856159455782592418086487285545274686109596480318996466895925319463985864300012238628776434768805888","2839213766779714416208296124562517712318911565184836172974571090549372219192960637992933791850638927971728600024477257552869537611776","5678427533559428832416592249125035424637823130369672345949142181098744438385921275985867583701277855943457200048954515105739075223552","11356855067118857664833184498250070849275646260739344691898284362197488876771842551971735167402555711886914400097909030211478150447104","22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208","45427420268475430659332737993000283397102585042957378767593137448789955507087370207886940669610222847547657600391636120845912601788416","90854840536950861318665475986000566794205170085914757535186274897579911014174740415773881339220445695095315200783272241691825203576832","181709681073901722637330951972001133588410340171829515070372549795159822028349480831547762678440891390190630401566544483383650407153664","363419362147803445274661903944002267176820680343659030140745099590319644056698961663095525356881782780381260803133088966767300814307328","726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656","1453677448591213781098647615776009068707282721374636120562980398361278576226795846652382101427527131121525043212532355867069203257229312","2907354897182427562197295231552018137414565442749272241125960796722557152453591693304764202855054262243050086425064711734138406514458624","5814709794364855124394590463104036274829130885498544482251921593445114304907183386609528405710108524486100172850129423468276813028917248","11629419588729710248789180926208072549658261770997088964503843186890228609814366773219056811420217048972200345700258846936553626057834496","23258839177459420497578361852416145099316523541994177929007686373780457219628733546438113622840434097944400691400517693873107252115668992","46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984","93035356709837681990313447409664580397266094167976711716030745495121828878514934185752454491361736391777602765602070775492429008462675968","186070713419675363980626894819329160794532188335953423432061490990243657757029868371504908982723472783555205531204141550984858016925351936","372141426839350727961253789638658321589064376671906846864122981980487315514059736743009817965446945567110411062408283101969716033850703872","744282853678701455922507579277316643178128753343813693728245963960974631028119473486019635930893891134220822124816566203939432067701407744","1488565707357402911845015158554633286356257506687627387456491927921949262056238946972039271861787782268441644249633132407878864135402815488","2977131414714805823690030317109266572712515013375254774912983855843898524112477893944078543723575564536883288499266264815757728270805630976","5954262829429611647380060634218533145425030026750509549825967711687797048224955787888157087447151129073766576998532529631515456541611261952","11908525658859223294760121268437066290850060053501019099651935423375594096449911575776314174894302258147533153997065059263030913083222523904","23817051317718446589520242536874132581700120107002038199303870846751188192899823151552628349788604516295066307994130118526061826166445047808","47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616","95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232","190536410541747572716161940294993060653600960856016305594430966774009505543198585212421026798308836130360530463953040948208494609331560382464","381072821083495145432323880589986121307201921712032611188861933548019011086397170424842053596617672260721060927906081896416989218663120764928","762145642166990290864647761179972242614403843424065222377723867096038022172794340849684107193235344521442121855812163792833978437326241529856","1524291284333980581729295522359944485228807686848130444755447734192076044345588681699368214386470689042884243711624327585667956874652483059712","3048582568667961163458591044719888970457615373696260889510895468384152088691177363398736428772941378085768487423248655171335913749304966119424","6097165137335922326917182089439777940915230747392521779021790936768304177382354726797472857545882756171536974846497310342671827498609932238848","12194330274671844653834364178879555881830461494785043558043581873536608354764709453594945715091765512343073949692994620685343654997219864477696","24388660549343689307668728357759111763660922989570087116087163747073216709529418907189891430183531024686147899385989241370687309994439728955392","48777321098687378615337456715518223527321845979140174232174327494146433419058837814379782860367062049372295798771978482741374619988879457910784","97554642197374757230674913431036447054643691958280348464348654988292866838117675628759565720734124098744591597543956965482749239977758915821568","195109284394749514461349826862072894109287383916560696928697309976585733676235351257519131441468248197489183195087913930965498479955517831643136","390218568789499028922699653724145788218574767833121393857394619953171467352470702515038262882936496394978366390175827861930996959911035663286272","780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544","1560874275157996115690798614896583152874299071332485575429578479812685869409882810060153051531745985579913465560703311447723987839644142653145088","3121748550315992231381597229793166305748598142664971150859156959625371738819765620120306103063491971159826931121406622895447975679288285306290176","6243497100631984462763194459586332611497196285329942301718313919250743477639531240240612206126983942319653862242813245790895951358576570612580352","12486994201263968925526388919172665222994392570659884603436627838501486955279062480481224412253967884639307724485626491581791902717153141225160704","24973988402527937851052777838345330445988785141319769206873255677002973910558124960962448824507935769278615448971252983163583805434306282450321408","49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816","99895953610111751404211111353381321783955140565279076827493022708011895642232499843849795298031743077114461795885011932654335221737225129801285632","199791907220223502808422222706762643567910281130558153654986045416023791284464999687699590596063486154228923591770023865308670443474450259602571264","399583814440447005616844445413525287135820562261116307309972090832047582568929999375399181192126972308457847183540047730617340886948900519205142528","799167628880894011233688890827050574271641124522232614619944181664095165137859998750798362384253944616915694367080095461234681773897801038410285056","1598335257761788022467377781654101148543282249044465229239888363328190330275719997501596724768507889233831388734160190922469363547795602076820570112","3196670515523576044934755563308202297086564498088930458479776726656380660551439995003193449537015778467662777468320381844938727095591204153641140224","6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448","12786682062094304179739022253232809188346257992355721833919106906625522642205759980012773798148063113870651109873281527379754908382364816614564560896","25573364124188608359478044506465618376692515984711443667838213813251045284411519960025547596296126227741302219746563054759509816764729633229129121792","51146728248377216718956089012931236753385031969422887335676427626502090568823039920051095192592252455482604439493126109519019633529459266458258243584","102293456496754433437912178025862473506770063938845774671352855253004181137646079840102190385184504910965208878986252219038039267058918532916516487168","204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336","409173825987017733751648712103449894027080255755383098685411421012016724550584319360408761540738019643860835515945008876152157068235674131666065948672","818347651974035467503297424206899788054160511510766197370822842024033449101168638720817523081476039287721671031890017752304314136471348263332131897344","1636695303948070935006594848413799576108321023021532394741645684048066898202337277441635046162952078575443342063780035504608628272942696526664263794688","3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376","6546781215792283740026379393655198304433284092086129578966582736192267592809349109766540184651808314301773368255120142018434513091770786106657055178752","13093562431584567480052758787310396608866568184172259157933165472384535185618698219533080369303616628603546736510240284036869026183541572213314110357504","26187124863169134960105517574620793217733136368344518315866330944769070371237396439066160738607233257207093473020480568073738052367083144426628220715008","52374249726338269920211035149241586435466272736689036631732661889538140742474792878132321477214466514414186946040961136147476104734166288853256441430016","104748499452676539840422070298483172870932545473378073263465323779076281484949585756264642954428933028828373892081922272294952209468332577706512882860032","209496998905353079680844140596966345741865090946756146526930647558152562969899171512529285908857866057656747784163844544589904418936665155413025765720064","418993997810706159361688281193932691483730181893512293053861295116305125939798343025058571817715732115313495568327689089179808837873330310826051531440128","837987995621412318723376562387865382967460363787024586107722590232610251879596686050117143635431464230626991136655378178359617675746660621652103062880256","1675975991242824637446753124775730765934920727574049172215445180465220503759193372100234287270862928461253982273310756356719235351493321243304206125760512","3351951982485649274893506249551461531869841455148098344430890360930441007518386744200468574541725856922507964546621512713438470702986642486608412251521024","6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048","13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096","26815615859885194199148049996411692254958731641184786755447122887443528060147093953603748596333806855380063716372972101707507765623893139892867298012168192","53631231719770388398296099992823384509917463282369573510894245774887056120294187907207497192667613710760127432745944203415015531247786279785734596024336384","107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768","214524926879081553593184399971293538039669853129478294043576983099548224481176751628829988770670454843040509730983776813660062124991145119142938384097345536","429049853758163107186368799942587076079339706258956588087153966199096448962353503257659977541340909686081019461967553627320124249982290238285876768194691072","858099707516326214372737599885174152158679412517913176174307932398192897924707006515319955082681819372162038923935107254640248499964580476571753536389382144","1716199415032652428745475199770348304317358825035826352348615864796385795849414013030639910165363638744324077847870214509280496999929160953143507072778764288","3432398830065304857490950399540696608634717650071652704697231729592771591698828026061279820330727277488648155695740429018560993999858321906287014145557528576","6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057152","13729595320261219429963801598162786434538870600286610818788926918371086366795312104245119281322909109954592622782961716074243975999433287625148056582230114304","27459190640522438859927603196325572869077741200573221637577853836742172733590624208490238562645818219909185245565923432148487951998866575250296113164460228608","54918381281044877719855206392651145738155482401146443275155707673484345467181248416980477125291636439818370491131846864296975903997733150500592226328920457216","109836762562089755439710412785302291476310964802292886550311415346968690934362496833960954250583272879636740982263693728593951807995466301001184452657840914432","219673525124179510879420825570604582952621929604585773100622830693937381868724993667921908501166545759273481964527387457187903615990932602002368905315681828864","439347050248359021758841651141209165905243859209171546201245661387874763737449987335843817002333091518546963929054774914375807231981865204004737810631363657728","878694100496718043517683302282418331810487718418343092402491322775749527474899974671687634004666183037093927858109549828751614463963730408009475621262727315456","1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912","3514776401986872174070733209129673327241950873673372369609965291102998109899599898686750536018664732148375711432438199315006457855854921632037902485050909261824","7029552803973744348141466418259346654483901747346744739219930582205996219799199797373501072037329464296751422864876398630012915711709843264075804970101818523648","14059105607947488696282932836518693308967803494693489478439861164411992439598399594747002144074658928593502845729752797260025831423419686528151609940203637047296","28118211215894977392565865673037386617935606989386978956879722328823984879196799189494004288149317857187005691459505594520051662846839373056303219880407274094592","56236422431789954785131731346074773235871213978773957913759444657647969758393598378988008576298635714374011382919011189040103325693678746112606439760814548189184","112472844863579909570263462692149546471742427957547915827518889315295939516787196757976017152597271428748022765838022378080206651387357492225212879521629096378368","224945689727159819140526925384299092943484855915095831655037778630591879033574393515952034305194542857496045531676044756160413302774714984450425759043258192756736","449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472","899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944","1799565517817278553124215403074392743547878847320766653240302229044735032268595148127616274441556342859968364253408358049283306422197719875603406072346065542053888","3599131035634557106248430806148785487095757694641533306480604458089470064537190296255232548883112685719936728506816716098566612844395439751206812144692131084107776","7198262071269114212496861612297570974191515389283066612961208916178940129074380592510465097766225371439873457013633432197133225688790879502413624289384262168215552","14396524142538228424993723224595141948383030778566133225922417832357880258148761185020930195532450742879746914027266864394266451377581759004827248578768524336431104","28793048285076456849987446449190283896766061557132266451844835664715760516297522370041860391064901485759493828054533728788532902755163518009654497157537048672862208","57586096570152913699974892898380567793532123114264532903689671329431521032595044740083720782129802971518987656109067457577065805510327036019308994315074097345724416","115172193140305827399949785796761135587064246228529065807379342658863042065190089480167441564259605943037975312218134915154131611020654072038617988630148194691448832","230344386280611654799899571593522271174128492457058131614758685317726084130380178960334883128519211886075950624436269830308263222041308144077235977260296389382897664","460688772561223309599799143187044542348256984914116263229517370635452168260760357920669766257038423772151901248872539660616526444082616288154471954520592778765795328","921377545122446619199598286374089084696513969828232526459034741270904336521520715841339532514076847544303802497745079321233052888165232576308943909041185557531590656","1842755090244893238399196572748178169393027939656465052918069482541808673043041431682679065028153695088607604995490158642466105776330465152617887818082371115063181312","3685510180489786476798393145496356338786055879312930105836138965083617346086082863365358130056307390177215209990980317284932211552660930305235775636164742230126362624","7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248","14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496","29484081443918291814387145163970850710288447034503440846689111720668938768688662906922865040450459121417721679927842538279457692421287442441886205089317937841010900992","58968162887836583628774290327941701420576894069006881693378223441337877537377325813845730080900918242835443359855685076558915384842574884883772410178635875682021801984","117936325775673167257548580655883402841153788138013763386756446882675755074754651627691460161801836485670886719711370153117830769685149769767544820357271751364043603968","235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936","471745303102692669030194322623533611364615152552055053547025787530703020299018606510765840647207345942683546878845480612471323078740599079070179281429087005456174415872","943490606205385338060388645247067222729230305104110107094051575061406040598037213021531681294414691885367093757690961224942646157481198158140358562858174010912348831744","1886981212410770676120777290494134445458460610208220214188103150122812081196074426043063362588829383770734187515381922449885292314962396316280717125716348021824697663488","3773962424821541352241554580988268890916921220416440428376206300245624162392148852086126725177658767541468375030763844899770584629924792632561434251432696043649395326976","7547924849643082704483109161976537781833842440832880856752412600491248324784297704172253450355317535082936750061527689799541169259849585265122868502865392087298790653952","15095849699286165408966218323953075563667684881665761713504825200982496649568595408344506900710635070165873500123055379599082338519699170530245737005730784174597581307904","30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808","60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616","120766797594289323271729746591624604509341479053326093708038601607859973196548763266756055205685080561326988000984443036792658708157593364241965896045846273396780650463232","241533595188578646543459493183249209018682958106652187416077203215719946393097526533512110411370161122653976001968886073585317416315186728483931792091692546793561300926464","483067190377157293086918986366498418037365916213304374832154406431439892786195053067024220822740322245307952003937772147170634832630373456967863584183385093587122601852928","966134380754314586173837972732996836074731832426608749664308812862879785572390106134048441645480644490615904007875544294341269665260746913935727168366770187174245203705856","1932268761508629172347675945465993672149463664853217499328617625725759571144780212268096883290961288981231808015751088588682539330521493827871454336733540374348490407411712","3864537523017258344695351890931987344298927329706434998657235251451519142289560424536193766581922577962463616031502177177365078661042987655742908673467080748696980814823424","7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848","15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696","30916300184138066757562815127455898754391418637651479989257882011612153138316483396289550132655380623699708928252017417418920629288343901245943269387736645989575846518587392","61832600368276133515125630254911797508782837275302959978515764023224306276632966792579100265310761247399417856504034834837841258576687802491886538775473291979151693037174784","123665200736552267030251260509823595017565674550605919957031528046448612553265933585158200530621522494798835713008069669675682517153375604983773077550946583958303386074349568","247330401473104534060502521019647190035131349101211839914063056092897225106531867170316401061243044989597671426016139339351365034306751209967546155101893167916606772148699136","494660802946209068121005042039294380070262698202423679828126112185794450213063734340632802122486089979195342852032278678702730068613502419935092310203786335833213544297398272","989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544","1978643211784836272484020168157177520281050792809694719312504448743177800852254937362531208489944359916781371408129114714810920274454009679740369240815145343332854177189593088","3957286423569672544968040336314355040562101585619389438625008897486355601704509874725062416979888719833562742816258229429621840548908019359480738481630290686665708354379186176","7914572847139345089936080672628710081124203171238778877250017794972711203409019749450124833959777439667125485632516458859243681097816038718961476963260581373331416708758372352","15829145694278690179872161345257420162248406342477557754500035589945422406818039498900249667919554879334250971265032917718487362195632077437922953926521162746662833417516744704","31658291388557380359744322690514840324496812684955115509000071179890844813636078997800499335839109758668501942530065835436974724391264154875845907853042325493325666835033489408","63316582777114760719488645381029680648993625369910231018000142359781689627272157995600998671678219517337003885060131670873949448782528309751691815706084650986651333670066978816","126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133957632","253266331108459042877954581524118722595974501479640924072000569439126758509088631982403994686712878069348015540240526683495797795130113239006767262824338603946605334680267915264","506532662216918085755909163048237445191949002959281848144001138878253517018177263964807989373425756138696031080481053366991595590260226478013534525648677207893210669360535830528","1013065324433836171511818326096474890383898005918563696288002277756507034036354527929615978746851512277392062160962106733983191180520452956027069051297354415786421338721071661056","2026130648867672343023636652192949780767796011837127392576004555513014068072709055859231957493703024554784124321924213467966382361040905912054138102594708831572842677442143322112","4052261297735344686047273304385899561535592023674254785152009111026028136145418111718463914987406049109568248643848426935932764722081811824108276205189417663145685354884286644224","8104522595470689372094546608771799123071184047348509570304018222052056272290836223436927829974812098219136497287696853871865529444163623648216552410378835326291370709768573288448","16209045190941378744189093217543598246142368094697019140608036444104112544581672446873855659949624196438272994575393707743731058888327247296433104820757670652582741419537146576896","32418090381882757488378186435087196492284736189394038281216072888208225089163344893747711319899248392876545989150787415487462117776654494592866209641515341305165482839074293153792","64836180763765514976756372870174392984569472378788076562432145776416450178326689787495422639798496785753091978301574830974924235553308989185732419283030682610330965678148586307584","129672361527531029953512745740348785969138944757576153124864291552832900356653379574990845279596993571506183956603149661949848471106617978371464838566061365220661931356297172615168","259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929677132122730441323862712594345230336","518689446110124119814050982961395143876555779030304612499457166211331601426613518299963381118387974286024735826412598647799393884426471913485859354264245460882647725425188690460672","1037378892220248239628101965922790287753111558060609224998914332422663202853227036599926762236775948572049471652825197295598787768852943826971718708528490921765295450850377380921344","2074757784440496479256203931845580575506223116121218449997828664845326405706454073199853524473551897144098943305650394591197575537705887653943437417056981843530590901700754761842688","4149515568880992958512407863691161151012446232242436899995657329690652811412908146399707048947103794288197886611300789182395151075411775307886874834113963687061181803401509523685376","8299031137761985917024815727382322302024892464484873799991314659381305622825816292799414097894207588576395773222601578364790302150823550615773749668227927374122363606803019047370752"};\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while( cin >> n)\r\n		cout << a[n] << endl;\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(734, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("1949\\n");\r\n}\r\n\r\n'),
(735, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("1912\\n");\r\n}\r\n\r\n'),
(736, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}'),
(737, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[10],b[10],i;\r\n	for(i=0;i<10;i++)\r\n	cin>>a[i];\r\n	for(i=0;i<10;i++)\r\n	b[i]=a[i]%3;\r\n	for(i=0;i<10;i++)\r\n	cout<<b[1]<<endl;\r\n	return 0;\r\n}'),
(738, '#include<stdio.h>\r\n\r\nmain()\r\n{\r\n	printf("2228\\n");\r\n}\r\n\r\n'),
(739, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 5040 3628800");\r\n	return 0;\r\n}'),
(740, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.96226 0.98113");\r\n	return 0;\r\n}'),
(741, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 20");\r\n	return 0;\r\n}'),
(742, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.01956 0.01956");\r\n	return 0;\r\n}'),
(743, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(744, '#include<iostream>\r\nusing namespace std;\r\nint max(int a,int b)\r\n{\r\n	if(a>b)return a;\r\n	else return b;\r\n}\r\nvoid print_tri(int *path,int count)\r\n{\r\nint cur_floor_count=1;\r\nint cur_floor_index=0;\r\nfor(int i=0;i<count;i++)\r\n{\r\n cout<<path[i]<<" ";\r\ncur_floor_index++;\r\nif(cur_floor_index==cur_floor_count)\r\n{\r\n	cout<<endl;\r\n	cur_floor_index=0;\r\n	cur_floor_count++;\r\n}\r\n}\r\ncout<<endl;\r\n}\r\nint main()\r\n{\r\n	int cur_floor_count;\r\n	int cur_floor_index;\r\n	int floors;\r\n	int count;\r\n	int *path=NULL;\r\n	int input;\r\n	int lc,rc;\r\n	int max_path;\r\n	while(true)\r\n	{\r\n		max_path=0;\r\n		cur_floor_count=1;\r\n		cur_floor_index=0;\r\n		cin>>floors;\r\n		if(floors==EOF)break;\r\n		count=(floors+1)*floors/2;\r\n		if(path) delete path;\r\n		path=new int[count];\r\n		for(int i=0;i<count;i++)path[i]=0;\r\n 	for( i=0;i<count;i++)\r\n		{\r\n			lc=i+cur_floor_count;\r\n			rc=lc+1;\r\n			cur_floor_index++;\r\n			if(cur_floor_index==cur_floor_count)\r\n			{\r\n				cur_floor_index=0;\r\n				cur_floor_count++;\r\n			}\r\n			cin>>input;\r\n			path[i]=max(path[i],input+path[i]);\r\n			if(lc<count)\r\n			{\r\n				path[lc]=max(path[lc],path[i]);\r\n				path[rc]=max(path[rc],path[i]);\r\n			}\r\n			else\r\n			{\r\n				max_path=max(path[i],max_path);\r\n			}\r\n		}\r\n		cout<<max_path<<endl;\r\n}\r\n}'),
(745, '#include<stdio.h>\r\n#include<stdlib.h>\r\ncmp(const void *a,const void *b)\r\n{\r\n	return((*(int *)a>*(int *)b)?1:-1);\r\n}\r\nint main()\r\n{\r\n	int i,j,n,*a,sum;\r\n	sum=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=(int*)calloc(n+2,sizeof(int));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}\r\n\r\n		qsort(a,n,sizeof(a[0]),cmp);\r\n\r\n\r\n		for(i=0;i<n-1;i++)\r\n		{\r\n			if(a[i]==a[i+1])\r\n				i++;\r\n			else\r\n			{\r\n				printf("Case #%d: %d\\n",sum,a[i-1]);\r\n				break;\r\n			}\r\n			if(a[n-1]!=a[n-2])\r\n			{\r\n				printf("Case #%d: %d\\n",sum,a[n-1]);\r\n				break;\r\n			}\r\n		}\r\n\r\n\r\n			sum++;\r\n	}\r\n	return 0;\r\n}'),
(746, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Worat Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(747, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 172");\r\n	return 0;\r\n}'),
(748, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 720 362880");\r\n	return 0;\r\n}'),
(749, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(750, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3  9 10 12 20");\r\nreturn 0;\r\n}\r\n'),
(751, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(752, '#include<stdio.h>\r\nint main()\r\n{ \r\nint a,b,c;\r\nscanf("%d%d%d",&a,&b,&c);\r\nprintf("%d\\n%d\\n%d\\n",a%3,b%3,c%3);\r\nreturn 0;\r\n}'),
(753, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int b,s,l,k,o[500],he=0;\r\n	char a[500];\r\n	while(scanf("%d",&b)!=EOF)\r\n	{getchar();\r\n		for(s=0;s<b;s++)\r\n		{he=0;\r\n			gets(a);\r\n			l=strlen(a);\r\n			for(k=0;k<l;k++)\r\n			{\r\n				if(a[k]==''I'')\r\n				o[k]=1;\r\n				if(a[k]==''V'')\r\n				o[k]=5;\r\n				if(a[k]==''X'')\r\n				o[k]=10;\r\n				if(a[k]==''L'')\r\n				o[k]=50;\r\n				if(a[k]==''C'')\r\n				o[k]=100;	\r\n				//printf("%d ",o[k]);\r\n					\r\n	     	}\r\n	     	if(l==1)\r\n	     	{\r\n	     		printf("%d\\n",o[0]);\r\n	     	}\r\n	     	else\r\n	     	\r\n	\r\n	     	\r\n	     	{\r\n			 for(k=0;k<l-1;)\r\n	     	{\r\n	     		if(o[k]<o[k+1])\r\n	     		{he+=(o[k+1]-o[k]);k+=2;}\r\n	     		else\r\n	     		{he+=o[k];k++;}\r\n	     	}\r\n	     	if(o[k]<=o[k-1])\r\n	     	he+=o[k];\r\n	        printf("%d\\n",he);}\r\n	   }\r\n		\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(754, 'import java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{\r\n	public static void main(String[] args)\r\n	{\r\n		Scanner sc = new Scanner(System.in);\r\n		BigInteger[] a = new BigInteger[600];\r\n		a[0] = new BigInteger("1");\r\n		for (int i = 1; i < 600; ++i)\r\n		{\r\n			a[i] = a[i - 1].multiply(new BigInteger("2"));\r\n		}\r\n		while (sc.hasNext())\r\n		{\r\n			int b = sc.nextInt();\r\n			System.out.println(a[b]);\r\n		}\r\n	}\r\n}'),
(755, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.066038 0.13208");\r\n	return 0;\r\n}'),
(756, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 22 44 88 176");\r\n	return 0;\r\n}\r\n'),
(757, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int n,int m)\r\n{\r\n	return n>m?n:m;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int k,i,j,x;\r\n	while(~scanf("%d",&k))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		x=0;\r\n		for(i=1;i<=k;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=k;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=k;i++)x=max(x,f[k][i]);\r\n		printf("%d\\n",x);\r\n	}\r\n	return 0;\r\n}'),
(758, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n=0,l,p;\r\n	int f[602];\r\n	while(n<600)\r\n	{\r\n	scanf("%d",&n);	\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d\\n",p);\r\n    }\r\n	return 0;\r\n}'),
(759, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d",b);\r\n}'),
(760, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(761, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3 9 10 12 21");\r\nreturn 0;\r\n}\r\n'),
(762, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(763, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 6 9");\r\n	return 0;\r\n}'),
(764, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d",b);\r\n}'),
(765, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3],i;\r\n	for(i=0;i<3;i++)\r\n	cin>>a[i];\r\n	for(i=0;i<3;i++)\r\n	b[i]=a[i]%3;\r\n	for(i=0;i<3;i++)\r\n	cout<<b[1]<<endl;\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(766, '#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nstring a[610] = {"1",\r\n"2",\r\n"4",\r\n"8",\r\n"16",\r\n"32",\r\n"64",\r\n"128",\r\n"256",\r\n"512",\r\n"1024",\r\n"2048",\r\n"4096",\r\n"8192",\r\n"16384",\r\n"32768",\r\n"65536",\r\n"131072",\r\n"262144",\r\n"524288",\r\n"1048576",\r\n"2097152",\r\n"4194304",\r\n"8388608",\r\n"16777216",\r\n"33554432",\r\n"67108864",\r\n"134217728",\r\n"268435456",\r\n"536870912",\r\n"1073741824",\r\n"2147483648",\r\n"4294967296",\r\n"8589934592",\r\n"17179869184",\r\n"34359738368",\r\n"68719476736",\r\n"137438953472",\r\n"274877906944",\r\n"549755813888",\r\n"1099511627776",\r\n"2199023255552",\r\n"4398046511104",\r\n"8796093022208",\r\n"17592186044416",\r\n"35184372088832",\r\n"70368744177664",\r\n"140737488355328",\r\n"281474976710656",\r\n"562949953421312",\r\n"1125899906842624",\r\n"2251799813685248",\r\n"4503599627370496",\r\n"9007199254740992",\r\n"18014398509481984",\r\n"36028797018963968",\r\n"72057594037927936",\r\n"144115188075855872",\r\n"288230376151711744",\r\n"576460752303423488",\r\n"1152921504606846976",\r\n"2305843009213693952",\r\n"4611686018427387904",\r\n"9223372036854775808",\r\n"18446744073709551616",\r\n"36893488147419103232",\r\n"73786976294838206464",\r\n"147573952589676412928",\r\n"295147905179352825856",\r\n"590295810358705651712",\r\n"1180591620717411303424",\r\n"2361183241434822606848",\r\n"4722366482869645213696",\r\n"9444732965739290427392",\r\n"18889465931478580854784",\r\n"37778931862957161709568",\r\n"75557863725914323419136",\r\n"151115727451828646838272",\r\n"302231454903657293676544",\r\n"604462909807314587353088",\r\n"1208925819614629174706176",\r\n"2417851639229258349412352",\r\n"4835703278458516698824704",\r\n"9671406556917033397649408",\r\n"19342813113834066795298816",\r\n"38685626227668133590597632",\r\n"77371252455336267181195264",\r\n"154742504910672534362390528",\r\n"309485009821345068724781056",\r\n"618970019642690137449562112",\r\n"1237940039285380274899124224",\r\n"2475880078570760549798248448",\r\n"4951760157141521099596496896",\r\n"9903520314283042199192993792",\r\n"19807040628566084398385987584",\r\n"39614081257132168796771975168",\r\n"79228162514264337593543950336",\r\n"158456325028528675187087900672",\r\n"316912650057057350374175801344",\r\n"633825300114114700748351602688",\r\n"1267650600228229401496703205376",\r\n"2535301200456458802993406410752",\r\n"5070602400912917605986812821504",\r\n"10141204801825835211973625643008",\r\n"20282409603651670423947251286016",\r\n"40564819207303340847894502572032",\r\n"81129638414606681695789005144064",\r\n"162259276829213363391578010288128",\r\n"324518553658426726783156020576256",\r\n"649037107316853453566312041152512",\r\n"1298074214633706907132624082305024",\r\n"2596148429267413814265248164610048",\r\n"5192296858534827628530496329220096",\r\n"10384593717069655257060992658440192",\r\n"20769187434139310514121985316880384",\r\n"41538374868278621028243970633760768",\r\n"83076749736557242056487941267521536",\r\n"166153499473114484112975882535043072",\r\n"332306998946228968225951765070086144",\r\n"664613997892457936451903530140172288",\r\n"1329227995784915872903807060280344576",\r\n"2658455991569831745807614120560689152",\r\n"5316911983139663491615228241121378304",\r\n"10633823966279326983230456482242756608",\r\n"21267647932558653966460912964485513216",\r\n"42535295865117307932921825928971026432",\r\n"85070591730234615865843651857942052864",\r\n"170141183460469231731687303715884105728",\r\n"340282366920938463463374607431768211456",\r\n"680564733841876926926749214863536422912",\r\n"1361129467683753853853498429727072845824",\r\n"2722258935367507707706996859454145691648",\r\n"5444517870735015415413993718908291383296",\r\n"10889035741470030830827987437816582766592",\r\n"21778071482940061661655974875633165533184",\r\n"43556142965880123323311949751266331066368",\r\n"87112285931760246646623899502532662132736",\r\n"174224571863520493293247799005065324265472",\r\n"348449143727040986586495598010130648530944",\r\n"696898287454081973172991196020261297061888",\r\n"1393796574908163946345982392040522594123776",\r\n"2787593149816327892691964784081045188247552",\r\n"5575186299632655785383929568162090376495104",\r\n"11150372599265311570767859136324180752990208",\r\n"22300745198530623141535718272648361505980416",\r\n"44601490397061246283071436545296723011960832",\r\n"89202980794122492566142873090593446023921664",\r\n"178405961588244985132285746181186892047843328",\r\n"356811923176489970264571492362373784095686656",\r\n"713623846352979940529142984724747568191373312",\r\n"1427247692705959881058285969449495136382746624",\r\n"2854495385411919762116571938898990272765493248",\r\n"5708990770823839524233143877797980545530986496",\r\n"11417981541647679048466287755595961091061972992",\r\n"22835963083295358096932575511191922182123945984",\r\n"45671926166590716193865151022383844364247891968",\r\n"91343852333181432387730302044767688728495783936",\r\n"182687704666362864775460604089535377456991567872",\r\n"365375409332725729550921208179070754913983135744",\r\n"730750818665451459101842416358141509827966271488",\r\n"1461501637330902918203684832716283019655932542976",\r\n"2923003274661805836407369665432566039311865085952",\r\n"5846006549323611672814739330865132078623730171904",\r\n"11692013098647223345629478661730264157247460343808",\r\n"23384026197294446691258957323460528314494920687616",\r\n"46768052394588893382517914646921056628989841375232",\r\n"93536104789177786765035829293842113257979682750464",\r\n"187072209578355573530071658587684226515959365500928",\r\n"374144419156711147060143317175368453031918731001856",\r\n"748288838313422294120286634350736906063837462003712",\r\n"1496577676626844588240573268701473812127674924007424",\r\n"2993155353253689176481146537402947624255349848014848",\r\n"5986310706507378352962293074805895248510699696029696",\r\n"11972621413014756705924586149611790497021399392059392",\r\n"23945242826029513411849172299223580994042798784118784",\r\n"47890485652059026823698344598447161988085597568237568",\r\n"95780971304118053647396689196894323976171195136475136",\r\n"191561942608236107294793378393788647952342390272950272",\r\n"383123885216472214589586756787577295904684780545900544",\r\n"766247770432944429179173513575154591809369561091801088",\r\n"1532495540865888858358347027150309183618739122183602176",\r\n"3064991081731777716716694054300618367237478244367204352",\r\n"6129982163463555433433388108601236734474956488734408704",\r\n"12259964326927110866866776217202473468949912977468817408",\r\n"24519928653854221733733552434404946937899825954937634816",\r\n"49039857307708443467467104868809893875799651909875269632",\r\n"98079714615416886934934209737619787751599303819750539264",\r\n"196159429230833773869868419475239575503198607639501078528",\r\n"392318858461667547739736838950479151006397215279002157056",\r\n"784637716923335095479473677900958302012794430558004314112",\r\n"1569275433846670190958947355801916604025588861116008628224",\r\n"3138550867693340381917894711603833208051177722232017256448",\r\n"6277101735386680763835789423207666416102355444464034512896",\r\n"12554203470773361527671578846415332832204710888928069025792",\r\n"25108406941546723055343157692830665664409421777856138051584",\r\n"50216813883093446110686315385661331328818843555712276103168",\r\n"100433627766186892221372630771322662657637687111424552206336",\r\n"200867255532373784442745261542645325315275374222849104412672",\r\n"401734511064747568885490523085290650630550748445698208825344",\r\n"803469022129495137770981046170581301261101496891396417650688",\r\n"1606938044258990275541962092341162602522202993782792835301376",\r\n"3213876088517980551083924184682325205044405987565585670602752",\r\n"6427752177035961102167848369364650410088811975131171341205504",\r\n"12855504354071922204335696738729300820177623950262342682411008",\r\n"25711008708143844408671393477458601640355247900524685364822016",\r\n"51422017416287688817342786954917203280710495801049370729644032",\r\n"102844034832575377634685573909834406561420991602098741459288064",\r\n"205688069665150755269371147819668813122841983204197482918576128",\r\n"411376139330301510538742295639337626245683966408394965837152256",\r\n"822752278660603021077484591278675252491367932816789931674304512",\r\n"1645504557321206042154969182557350504982735865633579863348609024",\r\n"3291009114642412084309938365114701009965471731267159726697218048",\r\n"6582018229284824168619876730229402019930943462534319453394436096",\r\n"13164036458569648337239753460458804039861886925068638906788872192",\r\n"26328072917139296674479506920917608079723773850137277813577744384",\r\n"52656145834278593348959013841835216159447547700274555627155488768",\r\n"105312291668557186697918027683670432318895095400549111254310977536",\r\n"210624583337114373395836055367340864637790190801098222508621955072",\r\n"421249166674228746791672110734681729275580381602196445017243910144",\r\n"842498333348457493583344221469363458551160763204392890034487820288",\r\n"1684996666696914987166688442938726917102321526408785780068975640576",\r\n"3369993333393829974333376885877453834204643052817571560137951281152",\r\n"6739986666787659948666753771754907668409286105635143120275902562304",\r\n"13479973333575319897333507543509815336818572211270286240551805124608",\r\n"26959946667150639794667015087019630673637144422540572481103610249216",\r\n"53919893334301279589334030174039261347274288845081144962207220498432",\r\n"107839786668602559178668060348078522694548577690162289924414440996864",\r\n"215679573337205118357336120696157045389097155380324579848828881993728",\r\n"431359146674410236714672241392314090778194310760649159697657763987456",\r\n"862718293348820473429344482784628181556388621521298319395315527974912",\r\n"1725436586697640946858688965569256363112777243042596638790631055949824",\r\n"3450873173395281893717377931138512726225554486085193277581262111899648",\r\n"6901746346790563787434755862277025452451108972170386555162524223799296",\r\n"13803492693581127574869511724554050904902217944340773110325048447598592",\r\n"27606985387162255149739023449108101809804435888681546220650096895197184",\r\n"55213970774324510299478046898216203619608871777363092441300193790394368",\r\n"110427941548649020598956093796432407239217743554726184882600387580788736",\r\n"220855883097298041197912187592864814478435487109452369765200775161577472",\r\n"441711766194596082395824375185729628956870974218904739530401550323154944",\r\n"883423532389192164791648750371459257913741948437809479060803100646309888",\r\n"1766847064778384329583297500742918515827483896875618958121606201292619776",\r\n"3533694129556768659166595001485837031654967793751237916243212402585239552",\r\n"7067388259113537318333190002971674063309935587502475832486424805170479104",\r\n"14134776518227074636666380005943348126619871175004951664972849610340958208",\r\n"28269553036454149273332760011886696253239742350009903329945699220681916416",\r\n"56539106072908298546665520023773392506479484700019806659891398441363832832",\r\n"113078212145816597093331040047546785012958969400039613319782796882727665664",\r\n"226156424291633194186662080095093570025917938800079226639565593765455331328",\r\n"452312848583266388373324160190187140051835877600158453279131187530910662656",\r\n"904625697166532776746648320380374280103671755200316906558262375061821325312",\r\n"1809251394333065553493296640760748560207343510400633813116524750123642650624",\r\n"3618502788666131106986593281521497120414687020801267626233049500247285301248",\r\n"7237005577332262213973186563042994240829374041602535252466099000494570602496",\r\n"14474011154664524427946373126085988481658748083205070504932198000989141204992",\r\n"28948022309329048855892746252171976963317496166410141009864396001978282409984",\r\n"57896044618658097711785492504343953926634992332820282019728792003956564819968",\r\n"115792089237316195423570985008687907853269984665640564039457584007913129639936",\r\n"231584178474632390847141970017375815706539969331281128078915168015826259279872",\r\n"463168356949264781694283940034751631413079938662562256157830336031652518559744",\r\n"926336713898529563388567880069503262826159877325124512315660672063305037119488",\r\n"1852673427797059126777135760139006525652319754650249024631321344126610074238976",\r\n"3705346855594118253554271520278013051304639509300498049262642688253220148477952",\r\n"7410693711188236507108543040556026102609279018600996098525285376506440296955904",\r\n"14821387422376473014217086081112052205218558037201992197050570753012880593911808",\r\n"29642774844752946028434172162224104410437116074403984394101141506025761187823616",\r\n"59285549689505892056868344324448208820874232148807968788202283012051522375647232",\r\n"118571099379011784113736688648896417641748464297615937576404566024103044751294464",\r\n"237142198758023568227473377297792835283496928595231875152809132048206089502588928",\r\n"474284397516047136454946754595585670566993857190463750305618264096412179005177856",\r\n"948568795032094272909893509191171341133987714380927500611236528192824358010355712",\r\n"1897137590064188545819787018382342682267975428761855001222473056385648716020711424",\r\n"3794275180128377091639574036764685364535950857523710002444946112771297432041422848",\r\n"7588550360256754183279148073529370729071901715047420004889892225542594864082845696",\r\n"15177100720513508366558296147058741458143803430094840009779784451085189728165691392",\r\n"30354201441027016733116592294117482916287606860189680019559568902170379456331382784",\r\n"60708402882054033466233184588234965832575213720379360039119137804340758912662765568",\r\n"121416805764108066932466369176469931665150427440758720078238275608681517825325531136",\r\n"242833611528216133864932738352939863330300854881517440156476551217363035650651062272",\r\n"485667223056432267729865476705879726660601709763034880312953102434726071301302124544",\r\n"971334446112864535459730953411759453321203419526069760625906204869452142602604249088",\r\n"1942668892225729070919461906823518906642406839052139521251812409738904285205208498176",\r\n"3885337784451458141838923813647037813284813678104279042503624819477808570410416996352",\r\n"7770675568902916283677847627294075626569627356208558085007249638955617140820833992704",\r\n"15541351137805832567355695254588151253139254712417116170014499277911234281641667985408",\r\n"31082702275611665134711390509176302506278509424834232340028998555822468563283335970816",\r\n"62165404551223330269422781018352605012557018849668464680057997111644937126566671941632",\r\n"124330809102446660538845562036705210025114037699336929360115994223289874253133343883264",\r\n"248661618204893321077691124073410420050228075398673858720231988446579748506266687766528",\r\n"497323236409786642155382248146820840100456150797347717440463976893159497012533375533056",\r\n"994646472819573284310764496293641680200912301594695434880927953786318994025066751066112",\r\n"1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224",\r\n"3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448",\r\n"7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896",\r\n"15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792",\r\n"31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584",\r\n"63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168",\r\n"127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336",\r\n"254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672",\r\n"509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344",\r\n"1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688",\r\n"2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376",\r\n"4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752",\r\n"8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504",\r\n"16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008",\r\n"32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016",\r\n"65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032",\r\n"130370302485407109521180524058200202307293977194619920040712988758680403184853549195737432064",\r\n"260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128",\r\n"521481209941628438084722096232800809229175908778479680162851955034721612739414196782949728256",\r\n"1042962419883256876169444192465601618458351817556959360325703910069443225478828393565899456512",\r\n"2085924839766513752338888384931203236916703635113918720651407820138886450957656787131798913024",\r\n"4171849679533027504677776769862406473833407270227837441302815640277772901915313574263597826048",\r\n"8343699359066055009355553539724812947666814540455674882605631280555545803830627148527195652096",\r\n"16687398718132110018711107079449625895333629080911349765211262561111091607661254297054391304192",\r\n"33374797436264220037422214158899251790667258161822699530422525122222183215322508594108782608384",\r\n"66749594872528440074844428317798503581334516323645399060845050244444366430645017188217565216768",\r\n"133499189745056880149688856635597007162669032647290798121690100488888732861290034376435130433536",\r\n"266998379490113760299377713271194014325338065294581596243380200977777465722580068752870260867072",\r\n"533996758980227520598755426542388028650676130589163192486760401955554931445160137505740521734144",\r\n"1067993517960455041197510853084776057301352261178326384973520803911109862890320275011481043468288",\r\n"2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576",\r\n"4271974071841820164790043412339104229205409044713305539894083215644439451561281100045924173873152",\r\n"8543948143683640329580086824678208458410818089426611079788166431288878903122562200091848347746304",\r\n"17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608",\r\n"34175792574734561318320347298712833833643272357706444319152665725155515612490248800367393390985216",\r\n"68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432",\r\n"136703170298938245273281389194851335334573089430825777276610662900622062449960995201469573563940864",\r\n"273406340597876490546562778389702670669146178861651554553221325801244124899921990402939147127881728",\r\n"546812681195752981093125556779405341338292357723303109106442651602488249799843980805878294255763456",\r\n"1093625362391505962186251113558810682676584715446606218212885303204976499599687961611756588511526912",\r\n"2187250724783011924372502227117621365353169430893212436425770606409952999199375923223513177023053824",\r\n"4374501449566023848745004454235242730706338861786424872851541212819905998398751846447026354046107648",\r\n"8749002899132047697490008908470485461412677723572849745703082425639811996797503692894052708092215296",\r\n"17498005798264095394980017816940970922825355447145699491406164851279623993595007385788105416184430592",\r\n"34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184",\r\n"69992023193056381579920071267763883691301421788582797965624659405118495974380029543152421664737722368",\r\n"139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444736",\r\n"279968092772225526319680285071055534765205687154331191862498637620473983897520118172609686658950889472",\r\n"559936185544451052639360570142111069530411374308662383724997275240947967795040236345219373317901778944",\r\n"1119872371088902105278721140284222139060822748617324767449994550481895935590080472690438746635803557888",\r\n"2239744742177804210557442280568444278121645497234649534899989100963791871180160945380877493271607115776",\r\n"4479489484355608421114884561136888556243290994469299069799978201927583742360321890761754986543214231552",\r\n"8958978968711216842229769122273777112486581988938598139599956403855167484720643781523509973086428463104",\r\n"17917957937422433684459538244547554224973163977877196279199912807710334969441287563047019946172856926208",\r\n"35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852416",\r\n"71671831749689734737838152978190216899892655911508785116799651230841339877765150252188079784691427704832",\r\n"143343663499379469475676305956380433799785311823017570233599302461682679755530300504376159569382855409664",\r\n"286687326998758938951352611912760867599570623646035140467198604923365359511060601008752319138765710819328",\r\n"573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656",\r\n"1146749307995035755805410447651043470398282494584140561868794419693461438044242404035009276555062843277312",\r\n"2293498615990071511610820895302086940796564989168281123737588839386922876088484808070018553110125686554624",\r\n"4586997231980143023221641790604173881593129978336562247475177678773845752176969616140037106220251373109248",\r\n"9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496",\r\n"18347988927920572092886567162416695526372519913346248989900710715095383008707878464560148424881005492436992",\r\n"36695977855841144185773134324833391052745039826692497979801421430190766017415756929120296849762010984873984",\r\n"73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968",\r\n"146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936",\r\n"293567822846729153486185074598667128421960318613539983838411371441526128139326055432962374798096087878991872",\r\n"587135645693458306972370149197334256843920637227079967676822742883052256278652110865924749596192175757983744",\r\n"1174271291386916613944740298394668513687841274454159935353645485766104512557304221731849499192384351515967488",\r\n"2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031934976",\r\n"4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952",\r\n"9394170331095332911557922387157348109502730195633279482829163886128836100458433773854795993539074812127739904",\r\n"18788340662190665823115844774314696219005460391266558965658327772257672200916867547709591987078149624255479808",\r\n"37576681324381331646231689548629392438010920782533117931316655544515344401833735095419183974156299248510959616",\r\n"75153362648762663292463379097258784876021841565066235862633311089030688803667470190838367948312598497021919232",\r\n"150306725297525326584926758194517569752043683130132471725266622178061377607334940381676735896625196994043838464",\r\n"300613450595050653169853516389035139504087366260264943450533244356122755214669880763353471793250393988087676928",\r\n"601226901190101306339707032778070279008174732520529886901066488712245510429339761526706943586500787976175353856",\r\n"1202453802380202612679414065556140558016349465041059773802132977424491020858679523053413887173001575952350707712",\r\n"2404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415424",\r\n"4809815209520810450717656262224562232065397860164239095208531909697964083434718092213655548692006303809402830848",\r\n"9619630419041620901435312524449124464130795720328478190417063819395928166869436184427311097384012607618805661696",\r\n"19239260838083241802870625048898248928261591440656956380834127638791856333738872368854622194768025215237611323392",\r\n"38478521676166483605741250097796497856523182881313912761668255277583712667477744737709244389536050430475222646784",\r\n"76957043352332967211482500195592995713046365762627825523336510555167425334955489475418488779072100860950445293568",\r\n"153914086704665934422965000391185991426092731525255651046673021110334850669910978950836977558144201721900890587136",\r\n"307828173409331868845930000782371982852185463050511302093346042220669701339821957901673955116288403443801781174272",\r\n"615656346818663737691860001564743965704370926101022604186692084441339402679643915803347910232576806887603562348544",\r\n"1231312693637327475383720003129487931408741852202045208373384168882678805359287831606695820465153613775207124697088",\r\n"2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394176",\r\n"4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455100828498788352",\r\n"9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704",\r\n"19701003098197239606139520050071806902539869635232723333974146702122860885748605305707133127442457820403313995153408",\r\n"39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816",\r\n"78804012392788958424558080200287227610159478540930893335896586808491443542994421222828532509769831281613255980613632",\r\n"157608024785577916849116160400574455220318957081861786671793173616982887085988842445657065019539662563226511961227264",\r\n"315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528",\r\n"630432099142311667396464641602297820881275828327447146687172694467931548343955369782628260078158650252906047844909056",\r\n"1260864198284623334792929283204595641762551656654894293374345388935863096687910739565256520156317300505812095689818112",\r\n"2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224",\r\n"5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448",\r\n"10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896",\r\n"20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792",\r\n"40347654345107946713373737062547060536401653012956617387979052445947619094013143666088208645002153616185987062074179584",\r\n"80695308690215893426747474125094121072803306025913234775958104891895238188026287332176417290004307232371974124148359168",\r\n"161390617380431786853494948250188242145606612051826469551916209783790476376052574664352834580008614464743948248296718336",\r\n"322781234760863573706989896500376484291213224103652939103832419567580952752105149328705669160017228929487896496593436672",\r\n"645562469521727147413979793000752968582426448207305878207664839135161905504210298657411338320034457858975792993186873344",\r\n"1291124939043454294827959586001505937164852896414611756415329678270323811008420597314822676640068915717951585986373746688",\r\n"2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376",\r\n"5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752",\r\n"10328999512347634358623676688012047497318823171316894051322637426162590488067364778518581413120551325743612687890989973504",\r\n"20657999024695268717247353376024094994637646342633788102645274852325180976134729557037162826241102651487225375781979947008",\r\n"41315998049390537434494706752048189989275292685267576205290549704650361952269459114074325652482205302974450751563959894016",\r\n"82631996098781074868989413504096379978550585370535152410581099409300723904538918228148651304964410605948901503127919788032",\r\n"165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064",\r\n"330527984395124299475957654016385519914202341482140609642324397637202895618155672912594605219857642423795606012511679152128",\r\n"661055968790248598951915308032771039828404682964281219284648795274405791236311345825189210439715284847591212025023358304256",\r\n"1322111937580497197903830616065542079656809365928562438569297590548811582472622691650378420879430569695182424050046716608512",\r\n"2644223875160994395807661232131084159313618731857124877138595181097623164945245383300756841758861139390364848100093433217024",\r\n"5288447750321988791615322464262168318627237463714249754277190362195246329890490766601513683517722278780729696200186866434048",\r\n"10576895500643977583230644928524336637254474927428499508554380724390492659780981533203027367035444557561459392400373732868096",\r\n"21153791001287955166461289857048673274508949854856999017108761448780985319561963066406054734070889115122918784800747465736192",\r\n"42307582002575910332922579714097346549017899709713998034217522897561970639123926132812109468141778230245837569601494931472384",\r\n"84615164005151820665845159428194693098035799419427996068435045795123941278247852265624218936283556460491675139202989862944768",\r\n"169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536",\r\n"338460656020607282663380637712778772392143197677711984273740183180495765112991409062496875745134225841966700556811959451779072",\r\n"676921312041214565326761275425557544784286395355423968547480366360991530225982818124993751490268451683933401113623918903558144",\r\n"1353842624082429130653522550851115089568572790710847937094960732721983060451965636249987502980536903367866802227247837807116288",\r\n"2707685248164858261307045101702230179137145581421695874189921465443966120903931272499975005961073806735733604454495675614232576",\r\n"5415370496329716522614090203404460358274291162843391748379842930887932241807862544999950011922147613471467208908991351228465152",\r\n"10830740992659433045228180406808920716548582325686783496759685861775864483615725089999900023844295226942934417817982702456930304",\r\n"21661481985318866090456360813617841433097164651373566993519371723551728967231450179999800047688590453885868835635965404913860608",\r\n"43322963970637732180912721627235682866194329302747133987038743447103457934462900359999600095377180907771737671271930809827721216",\r\n"86645927941275464361825443254471365732388658605494267974077486894206915868925800719999200190754361815543475342543861619655442432",\r\n"173291855882550928723650886508942731464777317210988535948154973788413831737851601439998400381508723631086950685087723239310884864",\r\n"346583711765101857447301773017885462929554634421977071896309947576827663475703202879996800763017447262173901370175446478621769728",\r\n"693167423530203714894603546035770925859109268843954143792619895153655326951406405759993601526034894524347802740350892957243539456",\r\n"1386334847060407429789207092071541851718218537687908287585239790307310653902812811519987203052069789048695605480701785914487078912",\r\n"2772669694120814859578414184143083703436437075375816575170479580614621307805625623039974406104139578097391210961403571828974157824",\r\n"5545339388241629719156828368286167406872874150751633150340959161229242615611251246079948812208279156194782421922807143657948315648",\r\n"11090678776483259438313656736572334813745748301503266300681918322458485231222502492159897624416558312389564843845614287315896631296",\r\n"22181357552966518876627313473144669627491496603006532601363836644916970462445004984319795248833116624779129687691228574631793262592",\r\n"44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184",\r\n"88725430211866075506509253892578678509965986412026130405455346579667881849780019937279180995332466499116518750764914298527173050368",\r\n"177450860423732151013018507785157357019931972824052260810910693159335763699560039874558361990664932998233037501529828597054346100736",\r\n"354901720847464302026037015570314714039863945648104521621821386318671527399120079749116723981329865996466075003059657194108692201472",\r\n"709803441694928604052074031140629428079727891296209043243642772637343054798240159498233447962659731992932150006119314388217384402944",\r\n"1419606883389857208104148062281258856159455782592418086487285545274686109596480318996466895925319463985864300012238628776434768805888",\r\n"2839213766779714416208296124562517712318911565184836172974571090549372219192960637992933791850638927971728600024477257552869537611776",\r\n"5678427533559428832416592249125035424637823130369672345949142181098744438385921275985867583701277855943457200048954515105739075223552",\r\n"11356855067118857664833184498250070849275646260739344691898284362197488876771842551971735167402555711886914400097909030211478150447104",\r\n"22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208",\r\n"45427420268475430659332737993000283397102585042957378767593137448789955507087370207886940669610222847547657600391636120845912601788416",\r\n"90854840536950861318665475986000566794205170085914757535186274897579911014174740415773881339220445695095315200783272241691825203576832",\r\n"181709681073901722637330951972001133588410340171829515070372549795159822028349480831547762678440891390190630401566544483383650407153664",\r\n"363419362147803445274661903944002267176820680343659030140745099590319644056698961663095525356881782780381260803133088966767300814307328",\r\n"726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656",\r\n"1453677448591213781098647615776009068707282721374636120562980398361278576226795846652382101427527131121525043212532355867069203257229312",\r\n"2907354897182427562197295231552018137414565442749272241125960796722557152453591693304764202855054262243050086425064711734138406514458624",\r\n"5814709794364855124394590463104036274829130885498544482251921593445114304907183386609528405710108524486100172850129423468276813028917248",\r\n"11629419588729710248789180926208072549658261770997088964503843186890228609814366773219056811420217048972200345700258846936553626057834496",\r\n"23258839177459420497578361852416145099316523541994177929007686373780457219628733546438113622840434097944400691400517693873107252115668992",\r\n"46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984",\r\n"93035356709837681990313447409664580397266094167976711716030745495121828878514934185752454491361736391777602765602070775492429008462675968",\r\n"186070713419675363980626894819329160794532188335953423432061490990243657757029868371504908982723472783555205531204141550984858016925351936",\r\n"372141426839350727961253789638658321589064376671906846864122981980487315514059736743009817965446945567110411062408283101969716033850703872",\r\n"744282853678701455922507579277316643178128753343813693728245963960974631028119473486019635930893891134220822124816566203939432067701407744",\r\n"1488565707357402911845015158554633286356257506687627387456491927921949262056238946972039271861787782268441644249633132407878864135402815488",\r\n"2977131414714805823690030317109266572712515013375254774912983855843898524112477893944078543723575564536883288499266264815757728270805630976",\r\n"5954262829429611647380060634218533145425030026750509549825967711687797048224955787888157087447151129073766576998532529631515456541611261952",\r\n"11908525658859223294760121268437066290850060053501019099651935423375594096449911575776314174894302258147533153997065059263030913083222523904",\r\n"23817051317718446589520242536874132581700120107002038199303870846751188192899823151552628349788604516295066307994130118526061826166445047808",\r\n"47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616",\r\n"95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232",\r\n"190536410541747572716161940294993060653600960856016305594430966774009505543198585212421026798308836130360530463953040948208494609331560382464",\r\n"381072821083495145432323880589986121307201921712032611188861933548019011086397170424842053596617672260721060927906081896416989218663120764928",\r\n"762145642166990290864647761179972242614403843424065222377723867096038022172794340849684107193235344521442121855812163792833978437326241529856",\r\n"1524291284333980581729295522359944485228807686848130444755447734192076044345588681699368214386470689042884243711624327585667956874652483059712",\r\n"3048582568667961163458591044719888970457615373696260889510895468384152088691177363398736428772941378085768487423248655171335913749304966119424",\r\n"6097165137335922326917182089439777940915230747392521779021790936768304177382354726797472857545882756171536974846497310342671827498609932238848",\r\n"12194330274671844653834364178879555881830461494785043558043581873536608354764709453594945715091765512343073949692994620685343654997219864477696",\r\n"24388660549343689307668728357759111763660922989570087116087163747073216709529418907189891430183531024686147899385989241370687309994439728955392",\r\n"48777321098687378615337456715518223527321845979140174232174327494146433419058837814379782860367062049372295798771978482741374619988879457910784",\r\n"97554642197374757230674913431036447054643691958280348464348654988292866838117675628759565720734124098744591597543956965482749239977758915821568",\r\n"195109284394749514461349826862072894109287383916560696928697309976585733676235351257519131441468248197489183195087913930965498479955517831643136",\r\n"390218568789499028922699653724145788218574767833121393857394619953171467352470702515038262882936496394978366390175827861930996959911035663286272",\r\n"780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544",\r\n"1560874275157996115690798614896583152874299071332485575429578479812685869409882810060153051531745985579913465560703311447723987839644142653145088",\r\n"3121748550315992231381597229793166305748598142664971150859156959625371738819765620120306103063491971159826931121406622895447975679288285306290176",\r\n"6243497100631984462763194459586332611497196285329942301718313919250743477639531240240612206126983942319653862242813245790895951358576570612580352",\r\n"12486994201263968925526388919172665222994392570659884603436627838501486955279062480481224412253967884639307724485626491581791902717153141225160704",\r\n"24973988402527937851052777838345330445988785141319769206873255677002973910558124960962448824507935769278615448971252983163583805434306282450321408",\r\n"49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816",\r\n"99895953610111751404211111353381321783955140565279076827493022708011895642232499843849795298031743077114461795885011932654335221737225129801285632",\r\n"199791907220223502808422222706762643567910281130558153654986045416023791284464999687699590596063486154228923591770023865308670443474450259602571264",\r\n"399583814440447005616844445413525287135820562261116307309972090832047582568929999375399181192126972308457847183540047730617340886948900519205142528",\r\n"799167628880894011233688890827050574271641124522232614619944181664095165137859998750798362384253944616915694367080095461234681773897801038410285056",\r\n"1598335257761788022467377781654101148543282249044465229239888363328190330275719997501596724768507889233831388734160190922469363547795602076820570112",\r\n"3196670515523576044934755563308202297086564498088930458479776726656380660551439995003193449537015778467662777468320381844938727095591204153641140224",\r\n"6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448",\r\n"12786682062094304179739022253232809188346257992355721833919106906625522642205759980012773798148063113870651109873281527379754908382364816614564560896",\r\n"25573364124188608359478044506465618376692515984711443667838213813251045284411519960025547596296126227741302219746563054759509816764729633229129121792",\r\n"51146728248377216718956089012931236753385031969422887335676427626502090568823039920051095192592252455482604439493126109519019633529459266458258243584",\r\n"102293456496754433437912178025862473506770063938845774671352855253004181137646079840102190385184504910965208878986252219038039267058918532916516487168",\r\n"204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336",\r\n"409173825987017733751648712103449894027080255755383098685411421012016724550584319360408761540738019643860835515945008876152157068235674131666065948672",\r\n"818347651974035467503297424206899788054160511510766197370822842024033449101168638720817523081476039287721671031890017752304314136471348263332131897344",\r\n"1636695303948070935006594848413799576108321023021532394741645684048066898202337277441635046162952078575443342063780035504608628272942696526664263794688",\r\n"3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376",\r\n"6546781215792283740026379393655198304433284092086129578966582736192267592809349109766540184651808314301773368255120142018434513091770786106657055178752",\r\n"13093562431584567480052758787310396608866568184172259157933165472384535185618698219533080369303616628603546736510240284036869026183541572213314110357504",\r\n"26187124863169134960105517574620793217733136368344518315866330944769070371237396439066160738607233257207093473020480568073738052367083144426628220715008",\r\n"52374249726338269920211035149241586435466272736689036631732661889538140742474792878132321477214466514414186946040961136147476104734166288853256441430016",\r\n"104748499452676539840422070298483172870932545473378073263465323779076281484949585756264642954428933028828373892081922272294952209468332577706512882860032",\r\n"209496998905353079680844140596966345741865090946756146526930647558152562969899171512529285908857866057656747784163844544589904418936665155413025765720064",\r\n"418993997810706159361688281193932691483730181893512293053861295116305125939798343025058571817715732115313495568327689089179808837873330310826051531440128",\r\n"837987995621412318723376562387865382967460363787024586107722590232610251879596686050117143635431464230626991136655378178359617675746660621652103062880256",\r\n"1675975991242824637446753124775730765934920727574049172215445180465220503759193372100234287270862928461253982273310756356719235351493321243304206125760512",\r\n"3351951982485649274893506249551461531869841455148098344430890360930441007518386744200468574541725856922507964546621512713438470702986642486608412251521024",\r\n"6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048",\r\n"13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096",\r\n"26815615859885194199148049996411692254958731641184786755447122887443528060147093953603748596333806855380063716372972101707507765623893139892867298012168192",\r\n"53631231719770388398296099992823384509917463282369573510894245774887056120294187907207497192667613710760127432745944203415015531247786279785734596024336384",\r\n"107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768",\r\n"214524926879081553593184399971293538039669853129478294043576983099548224481176751628829988770670454843040509730983776813660062124991145119142938384097345536",\r\n"429049853758163107186368799942587076079339706258956588087153966199096448962353503257659977541340909686081019461967553627320124249982290238285876768194691072",\r\n"858099707516326214372737599885174152158679412517913176174307932398192897924707006515319955082681819372162038923935107254640248499964580476571753536389382144",\r\n"1716199415032652428745475199770348304317358825035826352348615864796385795849414013030639910165363638744324077847870214509280496999929160953143507072778764288",\r\n"3432398830065304857490950399540696608634717650071652704697231729592771591698828026061279820330727277488648155695740429018560993999858321906287014145557528576",\r\n"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057152",\r\n"13729595320261219429963801598162786434538870600286610818788926918371086366795312104245119281322909109954592622782961716074243975999433287625148056582230114304",\r\n"27459190640522438859927603196325572869077741200573221637577853836742172733590624208490238562645818219909185245565923432148487951998866575250296113164460228608",\r\n"54918381281044877719855206392651145738155482401146443275155707673484345467181248416980477125291636439818370491131846864296975903997733150500592226328920457216",\r\n"109836762562089755439710412785302291476310964802292886550311415346968690934362496833960954250583272879636740982263693728593951807995466301001184452657840914432",\r\n"219673525124179510879420825570604582952621929604585773100622830693937381868724993667921908501166545759273481964527387457187903615990932602002368905315681828864",\r\n"439347050248359021758841651141209165905243859209171546201245661387874763737449987335843817002333091518546963929054774914375807231981865204004737810631363657728",\r\n"878694100496718043517683302282418331810487718418343092402491322775749527474899974671687634004666183037093927858109549828751614463963730408009475621262727315456",\r\n"1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912",\r\n"3514776401986872174070733209129673327241950873673372369609965291102998109899599898686750536018664732148375711432438199315006457855854921632037902485050909261824",\r\n"7029552803973744348141466418259346654483901747346744739219930582205996219799199797373501072037329464296751422864876398630012915711709843264075804970101818523648",\r\n"14059105607947488696282932836518693308967803494693489478439861164411992439598399594747002144074658928593502845729752797260025831423419686528151609940203637047296",\r\n"28118211215894977392565865673037386617935606989386978956879722328823984879196799189494004288149317857187005691459505594520051662846839373056303219880407274094592",\r\n"56236422431789954785131731346074773235871213978773957913759444657647969758393598378988008576298635714374011382919011189040103325693678746112606439760814548189184",\r\n"112472844863579909570263462692149546471742427957547915827518889315295939516787196757976017152597271428748022765838022378080206651387357492225212879521629096378368",\r\n"224945689727159819140526925384299092943484855915095831655037778630591879033574393515952034305194542857496045531676044756160413302774714984450425759043258192756736",\r\n"449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472",\r\n"899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944",\r\n"1799565517817278553124215403074392743547878847320766653240302229044735032268595148127616274441556342859968364253408358049283306422197719875603406072346065542053888",\r\n"3599131035634557106248430806148785487095757694641533306480604458089470064537190296255232548883112685719936728506816716098566612844395439751206812144692131084107776",\r\n"7198262071269114212496861612297570974191515389283066612961208916178940129074380592510465097766225371439873457013633432197133225688790879502413624289384262168215552",\r\n"14396524142538228424993723224595141948383030778566133225922417832357880258148761185020930195532450742879746914027266864394266451377581759004827248578768524336431104",\r\n"28793048285076456849987446449190283896766061557132266451844835664715760516297522370041860391064901485759493828054533728788532902755163518009654497157537048672862208",\r\n"57586096570152913699974892898380567793532123114264532903689671329431521032595044740083720782129802971518987656109067457577065805510327036019308994315074097345724416",\r\n"115172193140305827399949785796761135587064246228529065807379342658863042065190089480167441564259605943037975312218134915154131611020654072038617988630148194691448832",\r\n"230344386280611654799899571593522271174128492457058131614758685317726084130380178960334883128519211886075950624436269830308263222041308144077235977260296389382897664",\r\n"460688772561223309599799143187044542348256984914116263229517370635452168260760357920669766257038423772151901248872539660616526444082616288154471954520592778765795328",\r\n"921377545122446619199598286374089084696513969828232526459034741270904336521520715841339532514076847544303802497745079321233052888165232576308943909041185557531590656",\r\n"1842755090244893238399196572748178169393027939656465052918069482541808673043041431682679065028153695088607604995490158642466105776330465152617887818082371115063181312",\r\n"3685510180489786476798393145496356338786055879312930105836138965083617346086082863365358130056307390177215209990980317284932211552660930305235775636164742230126362624",\r\n"7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248",\r\n"14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496",\r\n"29484081443918291814387145163970850710288447034503440846689111720668938768688662906922865040450459121417721679927842538279457692421287442441886205089317937841010900992",\r\n"58968162887836583628774290327941701420576894069006881693378223441337877537377325813845730080900918242835443359855685076558915384842574884883772410178635875682021801984",\r\n"117936325775673167257548580655883402841153788138013763386756446882675755074754651627691460161801836485670886719711370153117830769685149769767544820357271751364043603968",\r\n"235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936",\r\n"471745303102692669030194322623533611364615152552055053547025787530703020299018606510765840647207345942683546878845480612471323078740599079070179281429087005456174415872",\r\n"943490606205385338060388645247067222729230305104110107094051575061406040598037213021531681294414691885367093757690961224942646157481198158140358562858174010912348831744",\r\n"1886981212410770676120777290494134445458460610208220214188103150122812081196074426043063362588829383770734187515381922449885292314962396316280717125716348021824697663488",\r\n"3773962424821541352241554580988268890916921220416440428376206300245624162392148852086126725177658767541468375030763844899770584629924792632561434251432696043649395326976",\r\n"7547924849643082704483109161976537781833842440832880856752412600491248324784297704172253450355317535082936750061527689799541169259849585265122868502865392087298790653952",\r\n"15095849699286165408966218323953075563667684881665761713504825200982496649568595408344506900710635070165873500123055379599082338519699170530245737005730784174597581307904",\r\n"30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808",\r\n"60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616",\r\n"120766797594289323271729746591624604509341479053326093708038601607859973196548763266756055205685080561326988000984443036792658708157593364241965896045846273396780650463232",\r\n"241533595188578646543459493183249209018682958106652187416077203215719946393097526533512110411370161122653976001968886073585317416315186728483931792091692546793561300926464",\r\n"483067190377157293086918986366498418037365916213304374832154406431439892786195053067024220822740322245307952003937772147170634832630373456967863584183385093587122601852928",\r\n"966134380754314586173837972732996836074731832426608749664308812862879785572390106134048441645480644490615904007875544294341269665260746913935727168366770187174245203705856",\r\n"1932268761508629172347675945465993672149463664853217499328617625725759571144780212268096883290961288981231808015751088588682539330521493827871454336733540374348490407411712",\r\n"3864537523017258344695351890931987344298927329706434998657235251451519142289560424536193766581922577962463616031502177177365078661042987655742908673467080748696980814823424",\r\n"7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848",\r\n"15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696",\r\n"30916300184138066757562815127455898754391418637651479989257882011612153138316483396289550132655380623699708928252017417418920629288343901245943269387736645989575846518587392",\r\n"61832600368276133515125630254911797508782837275302959978515764023224306276632966792579100265310761247399417856504034834837841258576687802491886538775473291979151693037174784",\r\n"123665200736552267030251260509823595017565674550605919957031528046448612553265933585158200530621522494798835713008069669675682517153375604983773077550946583958303386074349568",\r\n"247330401473104534060502521019647190035131349101211839914063056092897225106531867170316401061243044989597671426016139339351365034306751209967546155101893167916606772148699136",\r\n"494660802946209068121005042039294380070262698202423679828126112185794450213063734340632802122486089979195342852032278678702730068613502419935092310203786335833213544297398272",\r\n"989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544",\r\n"1978643211784836272484020168157177520281050792809694719312504448743177800852254937362531208489944359916781371408129114714810920274454009679740369240815145343332854177189593088",\r\n"3957286423569672544968040336314355040562101585619389438625008897486355601704509874725062416979888719833562742816258229429621840548908019359480738481630290686665708354379186176",\r\n"7914572847139345089936080672628710081124203171238778877250017794972711203409019749450124833959777439667125485632516458859243681097816038718961476963260581373331416708758372352",\r\n"15829145694278690179872161345257420162248406342477557754500035589945422406818039498900249667919554879334250971265032917718487362195632077437922953926521162746662833417516744704",\r\n"31658291388557380359744322690514840324496812684955115509000071179890844813636078997800499335839109758668501942530065835436974724391264154875845907853042325493325666835033489408",\r\n"63316582777114760719488645381029680648993625369910231018000142359781689627272157995600998671678219517337003885060131670873949448782528309751691815706084650986651333670066978816",\r\n"126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133957632",\r\n"253266331108459042877954581524118722595974501479640924072000569439126758509088631982403994686712878069348015540240526683495797795130113239006767262824338603946605334680267915264",\r\n"506532662216918085755909163048237445191949002959281848144001138878253517018177263964807989373425756138696031080481053366991595590260226478013534525648677207893210669360535830528",\r\n"1013065324433836171511818326096474890383898005918563696288002277756507034036354527929615978746851512277392062160962106733983191180520452956027069051297354415786421338721071661056",\r\n"2026130648867672343023636652192949780767796011837127392576004555513014068072709055859231957493703024554784124321924213467966382361040905912054138102594708831572842677442143322112",\r\n"4052261297735344686047273304385899561535592023674254785152009111026028136145418111718463914987406049109568248643848426935932764722081811824108276205189417663145685354884286644224",\r\n"8104522595470689372094546608771799123071184047348509570304018222052056272290836223436927829974812098219136497287696853871865529444163623648216552410378835326291370709768573288448",\r\n"16209045190941378744189093217543598246142368094697019140608036444104112544581672446873855659949624196438272994575393707743731058888327247296433104820757670652582741419537146576896",\r\n"32418090381882757488378186435087196492284736189394038281216072888208225089163344893747711319899248392876545989150787415487462117776654494592866209641515341305165482839074293153792",\r\n"64836180763765514976756372870174392984569472378788076562432145776416450178326689787495422639798496785753091978301574830974924235553308989185732419283030682610330965678148586307584",\r\n"129672361527531029953512745740348785969138944757576153124864291552832900356653379574990845279596993571506183956603149661949848471106617978371464838566061365220661931356297172615168",\r\n"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929677132122730441323862712594345230336",\r\n"518689446110124119814050982961395143876555779030304612499457166211331601426613518299963381118387974286024735826412598647799393884426471913485859354264245460882647725425188690460672",\r\n"1037378892220248239628101965922790287753111558060609224998914332422663202853227036599926762236775948572049471652825197295598787768852943826971718708528490921765295450850377380921344",\r\n"2074757784440496479256203931845580575506223116121218449997828664845326405706454073199853524473551897144098943305650394591197575537705887653943437417056981843530590901700754761842688",\r\n"4149515568880992958512407863691161151012446232242436899995657329690652811412908146399707048947103794288197886611300789182395151075411775307886874834113963687061181803401509523685376",\r\n"8299031137761985917024815727382322302024892464484873799991314659381305622825816292799414097894207588576395773222601578364790302150823550615773749668227927374122363606803019047370752"};\r\n\r\nint main()\r\n{\r\n	int n;\r\n	while( cin >> n)\r\n	{\r\n		cout << a[n] << endl;\r\n	}\r\n	return 0;\r\n}\r\n');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(767, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("25 11 2 10 31");\r\n	return 0;\r\n}'),
(768, '#include <stdio.h>\r\nmain()\r\n{int h ,x=0,j,i;\r\nint a[100][100];\r\nscanf("%d",&h);\r\n\r\nwhile(h--)\r\n{for(i=0;i<h;i++)\r\n for(j=0;j<=i;j++)\r\nscanf("%d",&a[i][j]);\r\nx+=a[1][0];\r\n}\r\nprintf("%d\\n",x);\r\n}\r\n'),
(769, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(770, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(771, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(772, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 18");\r\n	return 0;\r\n}'),
(773, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int f[600],n,i,ln;\r\n	double a1,a2;\r\n	float p;\r\n	f[0]=0;\r\n	f[1]=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			f[i+2]=f[i]+f[i+1];\r\n		}\r\n		if(n>=1)\r\n			ln=(f[n-1]+f[n+1]);\r\n		else\r\n			ln=2;\r\n		a1=pow((1+sqrt(5)),n);\r\n		a2=pow((1-sqrt(5)),n);\r\n		p=(a1+a2)/ln;\r\n		printf("%.0f\\n",p);	\r\n} \r\nreturn 0;\r\n\r\n}'),
(774, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.13208");\r\n	return 0;\r\n}'),
(775, '#include "stdio.h"\r\nint main()\r\n{long a,b,i,x;\r\nwhile(scanf("%ld",&x)!=EOF&&x)\r\n{\r\n	for(i=0;i<x;i++)\r\n	{scanf("%ld",&a);\r\n	if(i==x/2)\r\n		b=a;\r\n	}\r\n	printf("%ld\\n",b);\r\n}\r\nreturn 0;\r\n}'),
(776, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(777, '#include "stdio.h"\r\nint main()\r\n{long a,b,i,x;\r\nwhile(scanf("%ld",&x)!=EOF&&x)\r\n{\r\n	for(i=0;i<x;i++)\r\n	{scanf("%ld",&a);\r\n	if(i==x/2)\r\n		b=a;\r\n	}\r\n	printf("%ld\\n",b);\r\n}\r\nreturn 0;\r\n}'),
(778, '#include<iostream>\r\n#define MAX(x,y)(x>y)?x:y\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n;\r\n	int i,j;\r\n	int tower[101][101];\r\n	while(cin>>n)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		 for(j=0;j<=i;j++)\r\n		 scanf("%d",&tower[i][j]);\r\n		\r\n		/* for(i=0;i<n;i++)\r\n		 {\r\n		 	for(j=0;j<=i;j++)\r\n		 	{cout<<tower[i][j]<<" ";\r\n		 	cout<<endl;\r\n		 	}*/\r\n		 	for(i=n-2;i>=0;i--)\r\n		 	for(j=0;j<=i;j++)\r\n		 	{\r\n		 		tower[i][j]+=MAX(tower[i+1][j],tower[i+1][j+1]);\r\n	 		}\r\n	 		cout<<tower[0][0]<<endl;\r\n	}\r\n}'),
(779, '#include <stdio.h>\r\nmain()\r\n{int h ,x=0,j,i;\r\nint a[100][100];\r\nscanf("%d",&h);\r\n\r\nwhile(h--)\r\n{for(i=0;i<h;i++)\r\n for(j=0;j<=i;j++)\r\nscanf("%d",&a[i][j]);\r\nx+=a[1][0];\r\n}\r\nprintf("%d\\n",x);\r\n}\r\n'),
(780, '#include<string>\r\n#include<iostream>\r\n#include<stdio.h>\r\nusing namespace std;\r\nvoid main()\r\n{\r\n	int n,i;\r\n	char string[100][100];\r\n	int	num[100];\r\n	char *p;\r\n	scanf("%d",&n);\r\n\r\n	for(i=0;i<n;i++)\r\n	{\r\n		p=&string[i][0];\r\n		scanf("%s",p);	\r\n	}\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&num[i]);\r\n	}\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		printf("%c\\n" ,string[i][ num[i] -1] );\r\n	}\r\n	\r\n}'),
(781, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 720 362880");\r\n	return 0;\r\n}'),
(782, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(783, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827160");\r\n	return 0;\r\n}'),
(784, '#include <queue>\r\n#include <stack>\r\n#include <math.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <iostream>\r\n#include <limits.h>\r\n#include <string.h>\r\n#include <string>\r\n#include <algorithm>\r\nusing namespace std;\r\nconst int MAX = 110;\r\nstruct point{ double x,y;};     //点 \r\nstruct polygon{ point c[MAX],a; double area; int n;};\r\nstruct segment{ point a,b;};        // 线段 \r\nconst double eps = 1e-6;\r\nbool dy(double x,double y)  {   return x > y + eps;}    // x > y \r\nbool xy(double x,double y)  {   return x < y - eps;}    // x < y \r\nbool dyd(double x,double y) {   return x > y - eps;}    // x >= y \r\nbool xyd(double x,double y) {   return x < y + eps;}    // x <= y \r\nbool dd(double x,double y)  {   return fabs( x - y ) < eps;}  // x == y\r\npolygon king[MAX];\r\npoint c[MAX];\r\ndouble crossProduct(point a,point b,point c)//向量 ac 在 ab 的方向 \r\n{\r\n    return (c.x - a.x)*(b.y - a.y) - (b.x - a.x)*(c.y - a.y);\r\n}\r\ndouble disp2p(point a,point b) \r\n{\r\n    return sqrt( ( a.x - b.x ) * ( a.x - b.x ) + ( a.y - b.y ) * ( a.y - b.y ) );\r\n}\r\ndouble area_polygon(point p[],int n)\r\n{\r\n    double s = 0.0;\r\n    for(int i=0; i<n; i++)\r\n        s += p[(i+1)%n].y * p[i].x - p[(i+1)%n].x * p[i].y;\r\n    return fabs(s)/2.0;\r\n}\r\nbool cmp(point a,point b)  // 排序   \r\n{  \r\n    double len = crossProduct(c[0],a,b);  \r\n    if( dd(len,0.0) )  \r\n        return xy(disp2p(c[0],a),disp2p(c[0],b));  \r\n    return xy(len,0.0);  \r\n}\r\nbool onSegment(point a, point b, point c)\r\n{\r\n    double maxx = max(a.x,b.x);\r\n    double maxy = max(a.y,b.y);\r\n    double minx = min(a.x,b.x);\r\n    double miny = min(a.y,b.y);\r\n    if( dd(crossProduct(a,b,c),0.0) && dyd(c.x,minx) && xyd(c.x,maxx) && dyd(c.y,miny) && xyd(c.y,maxy) )\r\n        return true;\r\n    return false;\r\n}\r\nbool segIntersect(point p1,point p2, point p3, point p4) \r\n{\r\n    double d1 = crossProduct(p3,p4,p1);\r\n    double d2 = crossProduct(p3,p4,p2);\r\n    double d3 = crossProduct(p1,p2,p3);\r\n    double d4 = crossProduct(p1,p2,p4);\r\n    if( xy(d1 * d2,0.0) && xy(d3 * d4,0.0) )    return true;\r\n    if( dd(d1,0.0) && onSegment(p3,p4,p1) )     return true;//如果不判端点相交，则下面这四句话不需要 \r\n    if( dd(d2,0.0) && onSegment(p3,p4,p2) )     return true;\r\n    if( dd(d3,0.0) && onSegment(p1,p2,p3) )     return true;\r\n    if( dd(d4,0.0) && onSegment(p1,p2,p4) )     return true;\r\n    return false;\r\n}\r\nbool point_inPolygon(point pot,point p[],int n) \r\n{\r\n    int count = 0;\r\n    segment l;\r\n    l.a = pot;\r\n    l.b.x = 1e10*1.0;\r\n    l.b.y = pot.y;\r\n    p[n] = p[0];\r\n    for(int i=0; i<n; i++)\r\n    {\r\n        if( onSegment(p[i],p[i+1],pot) )\r\n            return true;\r\n        if( !dd(p[i].y,p[i+1].y) )\r\n        {\r\n            int tmp = -1;\r\n            if( onSegment(l.a,l.b,p[i]) )\r\n                tmp = i;\r\n            else\r\n                if( onSegment(l.a,l.b,p[i+1]) )\r\n                    tmp = i+1;\r\n            if( tmp != -1 && dd(p[tmp].y,max(p[i].y,p[i+1].y)) )\r\n                count++;\r\n            else\r\n                if( tmp == -1 && segIntersect(p[i],p[i+1],l.a,l.b) )\r\n                    count++;\r\n        }\r\n    }\r\n    if( count % 2 == 1 )\r\n        return true;\r\n    return false;\r\n} \r\npoint stk[MAX];\r\nint top;\r\ndouble Graham(int n)\r\n{\r\n    int tmp = 0;  \r\n    for(int i=1; i<n; i++)\r\n        if( xy(c[i].x,c[tmp].x) || dd(c[i].x,c[tmp].x) && xy(c[i].y,c[tmp].y) )\r\n            tmp = i;\r\n    swap(c[0],c[tmp]);\r\n    sort(c+1,c+n,cmp);\r\n    stk[0] = c[0]; stk[1] = c[1];\r\n    top = 1;\r\n    for(int i=2; i<n; i++)\r\n    {\r\n        while( xyd( crossProduct(stk[top],stk[top-1],c[i]), 0.0 ) && top >= 1 )\r\n            top--;\r\n        stk[++top] = c[i];\r\n    }\r\n    return area_polygon(stk,top+1);\r\n}\r\nint main()\r\n{\r\n    int n;\r\n    int i;\r\n    double x,y;\r\n    int cases;\r\n    for(cases=1; ~scanf("%d", &n); cases++)\r\n    {\r\n        i = 0;\r\n    king[i].n = n;\r\n    for(int k=0; k<n; k++)\r\n        scanf("%lf %lf",&king[i].c[k].x,&king[i].c[k].y);\r\n    king[i].a = king[i].c[0];\r\n    i++;\r\n\r\n    double sum = 0.0;\r\n    for(int k=0; k<i; k++)\r\n    {\r\n        memcpy(c,king[k].c,sizeof(king[k].c));\r\n        king[k].area = Graham(king[k].n);\r\n        memcpy(king[k].c,stk,sizeof(stk));\r\n        king[k].n = top+1;\r\n    }\r\n    point pot;\r\n    bool die[MAX];\r\n    memset(die,false,sizeof(die));\r\n    scanf("%lf %lf",&pot.x,&pot.y);\r\n    for(int k=0; k<i; k++)\r\n        if( point_inPolygon(pot,king[k].c,king[k].n))\r\n        {\r\n            printf("Case #%d: YES\\n", cases);\r\n        }\r\n        else\r\n        {\r\n            printf("Case #%d: NO\\n", cases);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n'),
(785, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int n,i;\r\n	char string[100][100];\r\n	int	num[100];\r\n	char *p;\r\n	scanf("%d",&n);\r\n\r\n	for(i=0;i<n;i++)\r\n	{\r\n		p=&string[i][0];\r\n		scanf("%s",p);	\r\n	}\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&num[i]);\r\n	}\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		printf("%c\\n" ,string[i][ num[i] -1] );\r\n	}\r\n	\r\n}'),
(786, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			switch(s[i])\r\n			{\r\n				case ''I'':s[i]=1;\r\n				continue;\r\n				case ''V'':s[i]=5;\r\n				continue;\r\n				case ''X'':s[i]=10;\r\n				continue;\r\n				case ''L'':s[i]=50;\r\n				continue;\r\n				case ''C'':s[i]=100;\r\n				continue;\r\n			}\r\n\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(787, '#include<iostream>\r\nusing namespace std;\r\nint max(int a,int b)\r\n{\r\n	if(a>b)return a;\r\n	else return b;\r\n}\r\nvoid print_tri(int *path,int count)\r\n{\r\nint cur_floor_count=1;\r\nint cur_floor_index=0;\r\nfor(int i=0;i<count;i++)\r\n{\r\n cout<<path[i]<<" ";\r\ncur_floor_index++;\r\nif(cur_floor_index==cur_floor_count)\r\n{\r\n	cout<<endl;\r\n	cur_floor_index=0;\r\n	cur_floor_count++;\r\n}\r\n}\r\ncout<<endl;\r\n}\r\nint main()\r\n{\r\n	int cur_floor_count;\r\n	int cur_floor_index;\r\n	int floors;\r\n	int count;\r\n	int *path=NULL;\r\n	int input;\r\n	int lc,rc;\r\n	int max_path;\r\n	int i;\r\n	while(true)\r\n	{\r\n		max_path=0;\r\n		cur_floor_count=1;\r\n		cur_floor_index=0;\r\n		cin>>floors;\r\n		if(floors==EOF)break;\r\n		count=(floors+1)*floors/2;\r\n		if(path) delete path;\r\n		path=new int[count];\r\n		for(int i=0;i<count;i++)path[i]=0;\r\n 	for(  i=0;i<count;i++)\r\n		{\r\n			lc=i+cur_floor_count;\r\n			rc=lc+1;\r\n			cur_floor_index++;\r\n			if(cur_floor_index==cur_floor_count)\r\n			{\r\n				cur_floor_index=0;\r\n				cur_floor_count++;\r\n			}\r\n			cin>>input;\r\n			path[i]=max(path[i],input+path[i]);\r\n			if(lc<count)\r\n			{\r\n				path[lc]=max(path[lc],path[i]);\r\n				path[rc]=max(path[rc],path[i]);\r\n			}\r\n			else\r\n			{\r\n				max_path=max(path[i],max_path);\r\n			}\r\n		}\r\n		cout<<max_path<<endl;\r\n}\r\n}'),
(788, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(789, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    long int n;\r\n	int v=0;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		if(n>0&&(n%2==1))\r\n		{\r\n			int a[n];\r\n			int x;\r\n			for(int i=0;i<n;i++)\r\n			{\r\n				scanf("%d",&a[i]);	\r\n			}\r\n			for(int j=0;j<n;j++)\r\n			{\r\n				x=0;\r\n				for(int k=0;k<n;k++)\r\n				{		\r\n				if(j!=k)\r\n				{\r\n					if(a[j]==a[k])	\r\n						{ x=1;\r\n						//	printf("^%d ",a[k])	;\r\n					//	break;\r\n						}\r\n				}			\r\n						\r\n						\r\n				}\r\n				if(x==0)\r\n				{	\r\n					v++;\r\n					printf("Case #%d: %d\\n",v,a[j]);\r\n					break;\r\n				}\r\n			}	\r\n		}\r\n		else break;\r\n		\r\n	}\r\n	return 0;\r\n}'),
(790, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{\r\nb=a%3;\r\nprintf("%d",b);\r\n}\r\n}'),
(791, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}'),
(792, '#include<stdio.h>\r\nint main()\r\n{ \r\n	long a,b,c;\r\n	while(scanf("%d",&a)!=EOF)\r\n	{\r\n		b=a%3;\r\n		printf("%ld\\n",b);\r\n	}\r\nreturn 0;\r\n}'),
(793, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3],i;\r\n	for(i=0;i<3;i++)\r\n	cin>>a[i]>>endl;\r\n	for(i=0;i<3;i++)\r\n	b[i]=a[i]%3;\r\n	for(i=0;i<3;i++)\r\n	cout<<b[1]<<endl;\r\n	return 0;\r\n}'),
(794, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint t;\r\nint f[200];\r\ndouble a,b,m,c;\r\n\r\nscanf("%d",&n);\r\n\r\n{\r\nfor(i=0;i<2*n;i++)\r\n{\r\n	scanf("%d",&f[i]);\r\n	if(i>50) break;\r\n}\r\nscanf("%lf %lf",&m,&c);\r\n\r\n\r\nfor(i=0;i<n;i++)\r\n{j=f[i];\r\nif(j==1)x++;\r\n\r\n}a=(double)x/((double)n);\r\nfor(i=n;i<n*2;i++)\r\n{\r\nt=f[i];\r\nif(t==1)y++;\r\n\r\n}b=(double)y/((double)n);\r\n\r\n\r\nif((a==m)&&(b==c))\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n\r\n}\r\n\r\n}'),
(795, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 13108 24691359 197530865");\r\n	return 0;\r\n}'),
(796, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 11 13 15 20");\r\n	return 0;\r\n}'),
(797, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{\r\nb=a%3;\r\nprintf("%d",b);\r\n}\r\n}'),
(798, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(799, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 8 13 15 22");\r\n	return 0;\r\n}'),
(800, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3],i;\r\n	for(i=0;i<3;i++)\r\n	cin>>a[i];\r\n	for(i=0;i<3;i++)\r\n	b[i]=a[i]%3;\r\n	for(i=0;i<3;i++)\r\n	cout<<b[i]<<endl;\r\n	return 0;\r\n}'),
(801, '#include<stdio.h>\r\n#include<string.h>\r\n \r\nlong s[1000005];\r\n \r\nint main()\r\n{\r\n    long n,i;\r\n    long a;\r\n    long x=1;\r\n    while(~scanf("%ld",&n))\r\n    {\r\n        memset(s,0,sizeof(s));\r\n        for(i=0;i<n;i++)\r\n        {\r\n            scanf("%ld",&a);\r\n            s[a]++;\r\n        }\r\n        printf("Case #%ld: ",x);x++;\r\n        for(i=0;i<1000001;i++)\r\n        {\r\n            if(s[i]%2!=0)\r\n            {\r\n                printf("%ld\\n",i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(802, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3 9 13 15 21");\r\nreturn 0;\r\n}\r\n'),
(803, '#include <iostream>\r\nusing namespace std;\r\nint a[101][101];\r\nint main()\r\n{\r\n	int n,i,j;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;j<i+1;j++)\r\n		{\r\n			cin>>a[i][j];\r\n		}\r\n	}\r\n	int sum=a[0][0];\r\n	int n1,n2;\r\n	int max=0;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		n1=a[i][max];\r\n		n2=a[i][max+1];\r\n		if(n1>n2)\r\n		{\r\n			sum+=n1;\r\n		}\r\n		else \r\n		{\r\n			sum+=n2;\r\n			max+=1;	\r\n		}		\r\n	}\r\n	cout<<sum;\r\n	return 0;\r\n}\r\n'),
(804, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    long int n;\r\n	int v=0;\r\n	while((scanf("%d",&n))!=EOF)\r\n	{\r\n		if(n>0&&(n%2==1))\r\n		{\r\n			int a[n];\r\n			int x;\r\n			for(int i=0;i<n;i++)\r\n			{\r\n				scanf("%d",&a[i]);	\r\n			}\r\n			for(int j=0;j<n;j++)\r\n			{\r\n				x=0;\r\n				for(int k=0;k<n;k++)\r\n				{		\r\n				if(j!=k)\r\n				{\r\n					if(a[j]==a[k])	\r\n						{ x=1;\r\n						//	printf("^%d ",a[k])	;\r\n					//	break;\r\n						}\r\n				}			\r\n						\r\n						\r\n				}\r\n				if(x==0)\r\n				{	\r\n					v++;\r\n					printf("Case #%d: %d\\n",v,a[j]);\r\n					break;\r\n				}\r\n			}	\r\n		}\r\n		else break;\r\n		\r\n	}\r\n	return 0;\r\n}'),
(805, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(806, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=1735;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(807, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=2007;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(808, '#include<iostream>\r\nusing namespace std;\r\nint max(int a,int b)\r\n{\r\n	if(a>b)return a;\r\n	else return b;\r\n}\r\nvoid print_tri(int *path,int count)\r\n{\r\nint cur_floor_count=1;\r\nint cur_floor_index=0;\r\nfor(int i=0;i<count;i++)\r\n{\r\n cout<<path[i]<<" ";\r\ncur_floor_index++;\r\nif(cur_floor_index==cur_floor_count)\r\n{\r\n	cout<<endl;\r\n	cur_floor_index=0;\r\n	cur_floor_count++;\r\n}\r\n}\r\ncout<<endl;\r\n}\r\nint main()\r\n{\r\n	int cur_floor_count;\r\n	int cur_floor_index;\r\n	int floors;\r\n	int count;\r\n	int *path=NULL;\r\n	int input;\r\n	int lc,rc;\r\n	int max_path;\r\n	int i;\r\n	while(true)\r\n	{\r\n		max_path=0;\r\n		cur_floor_count=1;\r\n		cur_floor_index=0;\r\n		cin>>floors;\r\n		if(floors==EOF)break;\r\n		if(floors>100)break;\r\n		count=(floors+1)*floors/2;\r\n		if(path) delete path;\r\n		path=new int[count];\r\n		for(int i=0;i<count;i++)path[i]=0;\r\n 	for(  i=0;i<count;i++)\r\n		{\r\n			lc=i+cur_floor_count;\r\n			rc=lc+1;\r\n			cur_floor_index++;\r\n			if(cur_floor_index==cur_floor_count)\r\n			{\r\n				cur_floor_index=0;\r\n				cur_floor_count++;\r\n			}\r\n			cin>>input;\r\n			path[i]=max(path[i],input+path[i]);\r\n			if(lc<count)\r\n			{\r\n				path[lc]=max(path[lc],path[i]);\r\n				path[rc]=max(path[rc],path[i]);\r\n			}\r\n			else\r\n			{\r\n				max_path=max(path[i],max_path);\r\n			}\r\n		}\r\n		cout<<max_path<<endl;\r\n}\r\n}'),
(809, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(810, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=1999;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(811, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[4],b[4],i;\r\n	for(i=0;i<4;i++)\r\n	cin>>a[i];\r\n	for(i=0;i<4;i++)\r\n	b[i]=a[i]%3;\r\n	for(i=0;i<4;i++)\r\n	cout<<b[i]<<endl;\r\n	return 0;\r\n}'),
(812, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=1949;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(813, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=15;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(814, '#include <stdio.h>\r\nint main()\r\n{int a,b;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{\r\nb=a%3;\r\nprintf("%d",b);\r\n}\r\nreturn 0;\r\n}'),
(815, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.00010 0.00005");\r\n	return 0;\r\n}'),
(816, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=1644;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(817, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i;\r\n	for(i=0;i<3;i++)\r\n	{\r\n		scanf("%d",&a[i]);\r\n		printf("%d\\n",a[i]%3);\r\n	}\r\n}'),
(818, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=1912;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(819, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06603 0.13207");\r\n	return 0;\r\n}'),
(820, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b,i;\r\n	\r\n	cin>>a;\r\n\r\n	b=a%3;\r\n	\r\n	cout<<b<<endl;\r\n	return 0;\r\n}'),
(821, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=2010;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(822, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(823, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int x=2228;\r\n		cout<<x<<endl;\r\n	return 0;\r\n}'),
(824, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3 9 13 15 22");\r\nreturn 0;\r\n}\r\n'),
(825, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{int a,b;\r\ncin>>a;\r\nb=a%3;\r\ncout<<b;\r\n}'),
(826, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334861");\r\n	return 0;\r\n}'),
(827, '#include <stdio.h>\r\nint nn[101][101],ss=0;\r\nint plu(int i,int j,int m)\r\n{\r\n	int a,b,s;\r\n	a=i;\r\n	b=j;\r\n	a--;\r\n	for(int ii=0;ii<=1;ii++)\r\n	{	if(a!=0 && b-ii!=0)\r\n		{	\r\n			s=nn[a][b-ii]+m;\r\n			plu(a,b-ii,s);\r\n		}\r\n	}\r\n	if(m>ss)\r\n	{\r\n		ss=m;\r\n	}\r\n}\r\nint main ()\r\n{\r\n	int n,i,j;\r\n	scanf("%d",&n);\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		for(j=1;j<=i;j++)\r\n		{\r\n			scanf("%d",&nn[i][j]);\r\n		}\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		plu(n,i,nn[n][i]);\r\n	}\r\n	printf("%d",ss);\r\n	return 0;\r\n}'),
(828, '1644'),
(829, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("5 10 10 26 26");\r\n	return 0;\r\n}'),
(830, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint t;\r\nint f[200];\r\ndouble a,b,m,c;\r\n\r\nscanf("%d",&n);\r\n\r\n{\r\nfor(i=0;i<2*n;i++)\r\n{\r\n	scanf("%d",&f[i]);\r\n	\r\n}\r\nscanf("%lf %lf",&m,&c);\r\n\r\nif(n<=50)\r\n{\r\nfor(i=0;i<n;i++)\r\n{j=f[i];\r\nif(j==1)x++;\r\n\r\n}a=(double)x/((double)n);\r\nfor(i=n;i<n*2;i++)\r\n{\r\nt=f[i];\r\nif(t==1)y++;\r\n\r\n}b=(double)y/((double)n);\r\n\r\n\r\nif((a==m)&&(b==c))\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n}\r\n}'),
(831, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a1,a2,a3,b1,b2,b3;\r\n	\r\n	cin>>a1>>a2>>a3;\r\n\r\n	b1=a1%3;\r\n		b2=a2%3;\r\n			b3=a3%3;\r\n	\r\n	cout<<b1<<endl;\r\n	cout<<b2<<endl;\r\n	cout<<b2<<endl;\r\n	return 0;\r\n}'),
(832, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("1644\\n");\r\nreturn 0;\r\n}'),
(833, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 12 15");\r\n	return 0;\r\n}'),
(834, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("19 14 19 16 13");\r\n	return 0;\r\n}'),
(835, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int b,s,l,k,o[500],he=0;\r\n	char a[500];\r\n	while(scanf("%d",&b)!=EOF)\r\n	{getchar();\r\n	for(s=0;s<500;s++)\r\n	{\r\n		o[s]=0;\r\n	}\r\n		for(s=0;s<b;s++)\r\n		{he=0;\r\n			gets(a);\r\n			l=strlen(a);\r\n			for(k=0;k<l;k++)\r\n			{\r\n				if(a[k]==''I'')\r\n				o[k]=1;\r\n				if(a[k]==''V'')\r\n				o[k]=5;\r\n				if(a[k]==''X'')\r\n				o[k]=10;\r\n				if(a[k]==''L'')\r\n				o[k]=50;\r\n				if(a[k]==''C'')\r\n				o[k]=100;	\r\n				//printf("%d ",o[k]);\r\n					\r\n	     	}\r\n	     	if(o[0]==1&&l==2)\r\n	     	{if(o[1]==5)\r\n			 printf("4\\n");\r\n			 if(o[1]==10)\r\n			 printf("9\\n");\r\n			 if(o[1]==50)\r\n			 printf("49\\n");\r\n			 if(o[1]==100)\r\n			 printf("99\\n");\r\n		 	 continue;\r\n			 }\r\n	     \r\n	     	if(l==1)\r\n	     	{\r\n	     		printf("%d\\n",o[0]);\r\n	     	}\r\n	     	else\r\n	     	\r\n	\r\n	     	\r\n	     	{\r\n			 for(k=0;k<l-1;)\r\n	     	{\r\n	     		if(o[k]<o[k+1])\r\n	     		{he+=(o[k+1]-o[k]);k+=2;}\r\n	     		else\r\n	     		{he+=o[k];k++;}\r\n	     	}\r\n	     	if(o[k]<=o[k-1])\r\n	     	he+=o[k];\r\n	        printf("%d\\n",he);}\r\n	   }\r\n		\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(836, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 174");\r\n	return 0;\r\n}\r\n'),
(837, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("%d",2228);\r\n}'),
(838, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4703");\r\n	return 0;\r\n}'),
(839, '#include<stdio.h>\r\n#include<stdlib.h>\r\ncmp(const void *a,const void *b)\r\n{\r\n	return((*(int *)a>=*(int *)b)?1:-1);\r\n}\r\nint main()\r\n{\r\n	int i,n,*a,sum;\r\n	sum=1;\r\n\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=(int*)calloc(n,sizeof(int));\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}\r\n\r\n		qsort(a,n,sizeof(a[0]),cmp);\r\n		if(n==1)\r\n			printf("%d\\n",a[0]);\r\n		else\r\n		{\r\n\r\n			for(i=0;i<n-1;i++)\r\n			{\r\n				if(a[i]==a[i+1])\r\n					i++;\r\n				else\r\n				{\r\n					printf("Case #%d: %d\\n",sum,a[i]);\r\n					break;\r\n				}\r\n				if(a[n-1]!=a[n-2])\r\n				{\r\n					printf("Case #%d: %d\\n",sum,a[n-1]);\r\n					break;\r\n				}\r\n			}\r\n		}\r\n		free(a);\r\n\r\n			sum++;\r\n	}\r\n	return 0;\r\n}'),
(840, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b<<endl; \r\n	return 0;\r\n}'),
(841, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 31 256 11111 99380");\r\n	return 0;\r\n}'),
(842, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("2 25 2450");\r\n	return 0;\r\n}'),
(843, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 86 240 1716 3754333486705");\r\n	return 0;\r\n}'),
(844, '#include <iostream>\r\nusing namespace std;\r\nint a[101][101];\r\nint main()\r\n{\r\n	int n,i,j;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;j<i+1;j++)\r\n		{\r\n			cin>>a[i][j];\r\n		}\r\n	}\r\n	int sum=a[0][0];\r\n	int n1,n2;\r\n	int max=0;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		n1=a[i][max];\r\n		n2=a[i][max+1];\r\n		if(n1>n2)\r\n		{\r\n			sum+=n1;\r\n		}\r\n		else\r\n		{\r\n			sum+=n2;\r\n			max+=1;	\r\n		}\r\n	}\r\n			cout<<sum<<endl;	\r\n	return 0;\r\n}\r\n'),
(845, '#include <stdio.h>\r\n#include<string.h>\r\nmain ()\r\n{char str[5];\r\nint b[20];\r\nint i,a,sum,t;\r\nscanf("%d",&a);\r\nt=a;\r\nwhile(a--)\r\n{\r\ngets(str);\r\nsum=0;\r\n   for (i=0;str[i]!=''\\0'';i++)\r\n   {if(str[i]==''I'')\r\n	   sum+=1;\r\n   else\r\n\r\n	   if(str[i]==''V'')\r\n		   sum+=5;\r\n	   else\r\n		   if(str[i]==''X'')\r\n			   sum+=10;\r\n		   else\r\n			   if(str[i]==''L'')\r\n				   sum+=50;\r\n			   else\r\n				   if(str[i]==''C'')\r\n					   sum+=100;\r\n   }\r\n    for (i=0;str[i+1]!=''\\0'';i++)\r\n	   {if(str[i]==''I''&&str[i+1]!=''I'')\r\n	   sum-=2;\r\n       b[t-a-1]=sum;\r\n	   }\r\n	\r\n\r\n\r\n}\r\nfor(i=0;i<t;i++)\r\nprintf("%d\\n",b[i]);\r\n\r\n\r\n}\r\n\r\n'),
(846, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728395 493827161");\r\n	return 0;\r\n}'),
(847, '#include <stdio.h>\r\nint main()\r\n{printf("2228");\r\n}'),
(848, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a=0,m,r,j,flag;\r\n	while(1)\r\n	{\r\n		if(~scanf("%d",&m))\r\n		{	a++;\r\n		r=0;\r\n		for(j=0;j<m;j++)\r\n		{\r\n			scanf("%d",&flag);\r\n			r^=flag;\r\n		}\r\n		printf("Case #%d: %d\\n",a,r);\r\n		}\r\n		else   break;\r\n	}\r\n	return 0;\r\n}'),
(849, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(850, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int b,s,l,k,o[500]={0},he=0,w;\r\n	char a[500];\r\n	while(scanf("%d",&b)!=EOF)\r\n	{getchar();\r\n	\r\n		for(s=0;s<b;s++)\r\n		{he=0;\r\n			gets(a);\r\n			l=strlen(a);\r\n			for(w=0;w<500;w++)\r\n	        o[w]=0;\r\n	\r\n			for(k=0;k<l;k++)\r\n			{\r\n				if(a[k]==''I'')\r\n				o[k]=1;\r\n				if(a[k]==''V'')\r\n				o[k]=5;\r\n				if(a[k]==''X'')\r\n				o[k]=10;\r\n				if(a[k]==''L'')\r\n				o[k]=50;\r\n				if(a[k]==''C'')\r\n				o[k]=100;	\r\n				//printf("%d ",o[k]);\r\n					\r\n	     	}\r\n	     	if(o[0]==1&&l==2)\r\n	     	{if(o[1]==5)\r\n			 printf("4\\n");\r\n			 if(o[1]==10)\r\n			 printf("9\\n");\r\n			 if(o[1]==50)\r\n			 printf("49\\n");\r\n			 if(o[1]==100)\r\n			 printf("99\\n");\r\n			 if(o[1]==1)\r\n			 printf("2\\n");\r\n		 	 continue;\r\n			 }\r\n	     \r\n	     	if(l==1)\r\n	     	{\r\n	     		printf("%d\\n",o[0]);\r\n	     	}\r\n	     	else\r\n	     	\r\n	\r\n	     	\r\n	     	{\r\n			 for(k=0;k<l-1;)\r\n	     	{\r\n	     		if(o[k]<o[k+1])\r\n	     		{he+=(o[k+1]-o[k]);k+=2;}\r\n	     		else\r\n	     		{he+=o[k];k++;}\r\n	     	}\r\n	     	if(o[k]<=o[k-1])\r\n	     	he+=o[k];\r\n	        printf("%d\\n",he);}\r\n	   }\r\n		\r\n	}\r\n	\r\n	\r\n	\r\n	return 0;\r\n}'),
(851, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p,t,j=0;\r\n	int f[602];\r\n	scanf("%d",&t);\r\n	while(j<t)\r\n	{\r\n	scanf("%d",&n);	\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d\\n",p);\r\n	j++;\r\n    }\r\n	return 0;\r\n}'),
(852, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a1,b1,a2,b2,a3,b3;\r\n	scanf("%d",&a1);\r\n	scanf("%d",&a2);\r\n	scanf("%d",&a3);\r\n\r\n	b1=a1%3;b2=a2%3;b3=a3%3;\r\n	printf("%d\\n",b1);printf("%d\\n",b2);printf("%d\\n",b3);\r\n	return 0;\r\n}\r\n'),
(853, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 41152262 329218106");\r\n	return 0;\r\n}'),
(854, '#include<stdio.h>\r\nint main()\r\n{\r\n	int count=0,x,st,i,tm;\r\n	while(~scanf("%d",&x))\r\n	{\r\n		count++;\r\n		st=0;\r\n		for(i=0;i<x;i++)\r\n		{\r\n			scanf("%d",&tm);\r\n			st^=tm;\r\n		}\r\n		printf("Case #%d: %d\\n",count,st);\r\n	}\r\n	return 0;\r\n}\r\n'),
(855, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(856, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.56604 0.13208");\r\n	return 0;\r\n}'),
(857, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(858, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 8 13 15 22");\r\n	return 0;\r\n}'),
(859, '#include "stdio.h"\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<10;i++)\r\na[i]=a[i]%3;\r\nfor(i=0;i<10;i++)\r\nprintf("%d\\n",a[i]);\r\n}'),
(860, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n\r\n}\r\n'),
(861, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,l,p,j=0;\r\n	int f[602];\r\n	while(j<3)\r\n	{\r\n	scanf("%d",&n);	\r\n	f[0]=0;\r\n	f[1]=1;\r\n	for(int i=0;i<n;i++)\r\n	f[i+2]=f[i+1]+f[i];\r\n	if(n==0)l=2;\r\n	else l=f[n-1]+f[n+1];\r\n	p=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/l;\r\n	printf("%d\\n",p);\r\n	j++;\r\n    }\r\n	return 0;\r\n}'),
(862, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[3],b[3];\r\n	for(int i=0;i<3;i++)\r\n	{	cin>>a[i];\r\n	b[i]=a[i]%3;\r\n	\r\n	}for(int j=0;j<3;j++)\r\n	cout<<b[j]<<endl; \r\n	return 0;\r\n}'),
(863, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 873 409113");\r\n	return 0;\r\n}'),
(864, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4900");\r\n	return 0;\r\n}'),
(865, '#include<stdio.h>\r\n#include<iostream>\r\n#define N 200\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		char a[N]={0};\r\n		int i,j=1;\r\n		if(n<0)\r\n		break;\r\n		a[0]=1;\r\n		while(n--)\r\n		{\r\n			for(i=0;i<j;i++)\r\n			a[i]*=2;\r\n			for(i=0;i<j;i++)\r\n			if(a[i]>9)\r\n			{\r\n				a[i+1]+=a[i]/10;\r\n				a[i]%=10;\r\n			}\r\n			if(a[i])\r\n			j++;\r\n		}	\r\n		while(j--)\r\n		printf("%d",a[j]);\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}'),
(866, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07692 0.13208");\r\n	return 0;\r\n}'),
(867, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a,b;\r\n	\r\n	cin>>a;\r\n\r\n	b=a%3;\r\n	\r\n	cout<<b<<endl;\r\n\r\n	return 0;\r\n}'),
(868, '#include <stdio.h>\r\n\r\nvoid main()\r\n{\r\n\r\nint i,n,j,k,g;\r\nint a[100],b[100];\r\n\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n\r\n\r\n{\r\nscanf("%d",&a[i]);\r\n\r\n}\r\n\r\nk=(n-1)/2;\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n\r\n\r\n{\r\nscanf("%d",&b[i]);\r\n\r\n}\r\n\r\ng=(n-1)/2;\r\n\r\nprintf("Case #1: %d\\n",a[k]);\r\n\r\n\r\nprintf("Case #2: %d\\n",b[g]);\r\n}\r\n'),
(869, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 14 17 15 12");\r\n	return 0;\r\n}'),
(870, '#include <stdio.h>\r\nint main()\r\n{\r\n	int n;int i,m;char b[100];\r\n	char a[100][101];\r\n	scanf("%d\\n",&n);\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		gets(a[i]);\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&m);\r\n		b[i]=a[i][m-1];\r\n	}\r\n	for(i=0;i<n;i++)\r\n		printf("%c",b[i]);\r\n	return 0;	\r\n}\r\n'),
(871, '#include<stdio.h>\r\nint main()\r\n{\r\n	int i,a[1][3];\r\n	for(i=0;i<3;i++)\r\n	scanf("%d",&a[0][i]);\r\n	for(i=0;i<3;i++)\r\n		printf("%d\\n",a[0][i]%3);\r\n}\r\n'),
(872, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 6938");\r\n	return 0;\r\n}'),
(873, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    int n;\r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n        char a[200]={1};\r\n        char b[200]={0};\r\n        int i=1;\r\n        int j;\r\n        while(n--)\r\n        {\r\n             \r\n            for(j=0;j<i;j++)\r\n            {\r\n                a[j]=a[j]*2;\r\n            }\r\n            for(j=0;j<i;j++)\r\n            {\r\n                b[j]=a[j]/10;\r\n                a[j]=a[j]%10;\r\n                a[j+1]=a[j+1]+b[j];\r\n            }\r\n            if(a[i])\r\n                i++;\r\n        }\r\n        int c=strlen(a);\r\n        for(j=i-1;j>=0;j--)\r\n            printf("%d",a[j]);\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}'),
(874, '#include <stdio.h>\r\n\r\nint main()\r\n{\r\n\r\nint i,n,k,g;\r\nint a[100],b[100];\r\n\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n\r\n\r\n{\r\nscanf("%d",&a[i]);\r\n\r\n}\r\n\r\nk=(n-1)/2;\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n\r\n\r\n{\r\nscanf("%d",&b[i]);\r\n\r\n}\r\n\r\ng=(n-1)/2;\r\n\r\nprintf("Case #1: %d\\n",a[k]);\r\n\r\n\r\nprintf("Case #2: %d\\n",b[g]);\r\n}\r\n'),
(875, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 10 12 14 20");\r\n	return 0;\r\n}'),
(876, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(877, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 576 893025");\r\n	return 0;\r\n}'),
(878, '#include <stdio.h>\r\nvoid main()\r\n{\r\n	int a,b;\r\n	scanf("%d",%a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(879, '#include <iostream>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <map>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	map<char, int> mp;\r\n	mp[''I''] = 1;\r\n	mp[''V''] = 5;\r\n	mp[''X''] = 10;\r\n	mp[''L''] = 50;\r\n	mp[''C''] = 100;\r\n	char s[100];\r\n	int n;\r\n	cin >> n;\r\n	while( n--)\r\n	{\r\n		cin >> s;\r\n		int len = strlen(s);\r\n		int re = 0;\r\n		for( int i=0; i<len; i++)\r\n		{\r\n			if( s[i] == ''I'')\r\n			{\r\n				if( s[i+1] == ''V'')\r\n					(re += 4), (i++);\r\n				else if( s[i+1] == ''X'')\r\n					(re += 9), (i++);\r\n				else\r\n					re += 1;\r\n			}\r\n			else if( s[i] == ''X'')\r\n			{\r\n				if( s[i+1] == ''L'')\r\n					(re+=40), i++;\r\n				else if( s[i+1] == ''C'')\r\n					(re+=90), i++;\r\n				else\r\n					re+=10;\r\n			}\r\n			else if( s[i] == ''V'')\r\n				re+=5;\r\n			else if( s[i] == ''L'')\r\n				re+=50;\r\n			else if( s[i] == ''C'')\r\n				re+=100;	\r\n		}\r\n		cout << re << endl;	\r\n	}\r\n	return 0;\r\n}'),
(880, '#include <stdio.h>\r\nint nn[101][101],ss=0;\r\nint plu(int i,int j,int m)\r\n{\r\n	int a,b,s;\r\n	\r\n	\r\n	\r\n	for(int ii=0;ii<=1;ii++)\r\n	{	if((i-1)!=0 && (j-ii)!=0)\r\n		{	\r\n			s=nn[i-1][j-ii]+m;\r\n			plu(i-1,j-ii,s);\r\n		}\r\n	}\r\n	if(m>ss)\r\n	{\r\n		ss=m;\r\n	}\r\n}\r\nint main ()\r\n{\r\n	int n,i,j;\r\n	scanf("%d",&n);\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		for(j=1;j<=i;j++)\r\n		{\r\n			scanf("%d",&nn[i][j]);\r\n		}\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		plu(n,i,nn[n][i]);\r\n	}\r\n	printf("%d",ss);\r\n	return 0;\r\n}'),
(881, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i,b[3];\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n	{		b[i]=a[i]%3;\r\n	if(b[i]<0)\r\n		b[i]=-b[i];}\r\n	for(i=0;i<3;i++)\r\n		printf("%d\\n",b[i]);\r\n}'),
(882, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}'),
(883, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0707071 0.13208");\r\n	return 0;\r\n}\r\n'),
(884, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	scanf("%d",&a);\r\n	a=a%3;\r\n	printf("%d",a);\r\n	return 0;\r\n}'),
(885, '#include <iostream>\r\n#include <stdio.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n	int num, i, j;\r\n	char x;\r\n	char strArr[101][101];\r\n	int a[101];\r\n	cin >> num;\r\n	scanf("%c", &x);\r\n	for (i = 0; i < num; i++) {\r\n		gets(strArr[i]);\r\n		//cout << strArr[i] << " " << i << " " << num << endl;\r\n	}\r\n	for (i = 0; i < num; i++) {\r\n		//cout << "??";\r\n		cin >> a[i];\r\n	}\r\n	for (i = 0; i < num; i++) {\r\n		cout << strArr[i][a[i] - 1];\r\n	}\r\n	cout << endl;\r\n	\r\n	return 0;\r\n} '),
(886, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 15 21");\r\n	return 0;\r\n}'),
(887, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 336 3024");\r\n	return 0;\r\n}'),
(888, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 17 15 12");\r\n	return 0;\r\n}'),
(889, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{char str[8][100];\r\n char string[100];\r\n int i,n,a,b,c,d,e,f,g,h;\r\n	 scanf("%d\\n",&n);\r\n for(i=0;i<n;i++)\r\n	 gets (str[i]);\r\nscanf("%d %d %d %d %d %d %d %d",&a,&b,&c,&d,&e,&f,&g,&h);\r\nprintf("%c%c%c%c%c%c%c%c",str[0][a],str[1][b],str[2][c],str[3][d],str[4][e],str[5][f],str[6][g],str[7][h]);\r\n}'),
(890, '#include <stdio.h>\r\nint main()\r\n{\r\nint i,n,k,g;\r\nint a[100],b[100];\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n{\r\nscanf("%d",&a[i]);\r\n}\r\nk=(n-1)/2;\r\nscanf("%d\\n",&n);\r\nfor(i=0;i<n;i++)\r\n{\r\nscanf("%d",&b[i]);\r\n}\r\ng=(n-1)/2;\r\nprintf("Case #1: %d\\n",a[k]);\r\nprintf("Case #2: %d\\n",b[g]);\r\n}\r\n'),
(891, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4851");\r\n	return 0;\r\n}'),
(892, '#include<iostream>\r\n#include<stdio.h>\r\n#include<string.h>\r\nusing namespace std;\r\nchar a[100][100];\r\nchar b[100];\r\nint main()\r\n{\r\n	int n;\r\n	int i,j;\r\n	int c;\r\n	cin>>n;\r\n	gatchar();\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin.gatline(a[i],99,''\\n'');\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>c;\r\n		b[i]=a[i][c-1];\r\n	}\r\n	printf("%s\\n",b);\r\n	return 0;\r\n}'),
(893, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\nint main()\r\n{\r\n    int n;\r\n    char s[103][103] ;\r\n    int x[103];\r\n    cin>>n;\r\n    gets(s[0]);\r\n    for(int i=0;i<n;i++){\r\n        gets(s[i]);\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        cin>>x[i];\r\n        printf("%c",s[i][x[i]-1]);\r\n    }\r\n    cout<<endl;\r\n    return 0;\r\n}'),
(894, '#include<stdio.h>\r\n#include<stdlib.h>\r\nint cmp(const void *a,const void *b)\r\n{\r\n    return((*(int *)a>=*(int *)b)?1:-1);\r\n}\r\nint main()\r\n{\r\n    int i,n,*a,sum;\r\n    sum=1;\r\n \r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n        a=(int*)calloc(n,sizeof(int));\r\n        for(i=0;i<n;i++)\r\n        {\r\n            scanf("%d",&a[i]);\r\n        }\r\n \r\n        qsort(a,n,sizeof(a[0]),cmp);\r\n        if(n==1)\r\n            printf("%d\\n",a[0]);\r\n        else\r\n        {\r\n \r\n            for(i=0;i<n-1;i++)\r\n            {\r\n                if(a[i]==a[i+1])\r\n                    i++;\r\n                else\r\n                {\r\n                    printf("Case #%d: %d\\n",sum,a[i]);\r\n                    break;\r\n                }\r\n                if(a[n-1]!=a[n-2])\r\n                {\r\n                    printf("Case #%d: %d\\n",sum,a[n-1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        free(a);\r\n \r\n            sum++;\r\n    }\r\n    return 0;\r\n}'),
(895, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4900");\r\n	return 0;\r\n}'),
(896, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(897, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i;\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n	{		\r\n		printf("%d\\n",a[i]%3);}\r\n}'),
(898, '#include <stdio.h>\r\n#include <string.h>\r\n#include <map>\r\n#include <string>\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main(){\r\n	char data[405];\r\n	int cnt;\r\n	map<string, int> a;\r\n	string q("I");\r\n	a[q] = 1;\r\n	q = "V";\r\n	a[q] = 5;\r\n	q="X";\r\n	a[q] = 10;\r\n	q="L";\r\n	a[q] = 50;\r\n	q= "C";\r\n	a[q] = 100;\r\n	int len = 0;\r\n\r\n	while(scanf("%d", &cnt)!=EOF){\r\n		for(int i = 1; i <= cnt; i++){\r\n			scanf("%s", data);\r\n			len = strlen(data);\r\n			int num = 0;\r\n			int j = 0;\r\n			while(j < len){\r\n			//	cout << data[j];\r\n			//	j++;\r\n				char tmp[2];\r\n				tmp[0]=data[j];\r\n				tmp[1]=''\\0'';\r\n				string index1(tmp);\r\n				//cerr << tmp <<"++";\r\n				\r\n				\r\n				if(j+1 >= len){\r\n					num += a[index1];\r\n					j++;\r\n				} else {\r\n					char tm[2];\r\n					tm[0]=data[j+1];\r\n					tm[1]=''\\0'';\r\n					string index2(tm);\r\n					\r\n//cerr << index1.c_str() <<"===" <<a[index1] << endl;\r\n					if(a[index1] < a[index2]){\r\n						num += a[index2] - a[index1];\r\n						j+=2;\r\n					} else {\r\n						num += a[index1];\r\n						j++;\r\n					}\r\n				}\r\n				\r\n			}\r\n			cout << num << endl;\r\n		}\r\n	}\r\n	return 1;\r\n}'),
(899, '#include<stdio.h>\r\nint main()\r\n{int a;\r\nwhile (scanf("%d",&a)!=EOF)\r\n{\r\n	printf("%d",a%3);\r\n}\r\nreturn 0;\r\n}'),
(900, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(901, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	int a[3],i;\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n	{		\r\n		printf("%d\\n",a[i]%3);}\r\n}'),
(902, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(903, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(904, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 86 240 1716 1899891757635");\r\n	return 0;\r\n}'),
(905, '#include<stdio.h>\r\nint main()\r\n{\r\n	int i,a[1][3000];\r\n	for(i=0;i<3000;i++)\r\n	{\r\n		scanf("%d",&a[0][i]);\r\n		printf("%d\\n",a[0][i]%3);\r\n	}\r\n}'),
(906, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(907, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 9604");\r\n	return 0;\r\n}'),
(908, '#include<stdio.h>\r\nint main()\r\n{\r\n    int i,j,m,z,d,a[101][101],b[101];\r\n    while(scanf("%d",&m)!=EOF)\r\n    {\r\n        for(z=1;z<=m;z++)\r\n        {\r\n            for(j=1;j<=z;j++)\r\n            {\r\n                scanf("%d",&a[z][j]);\r\n            }\r\n        }\r\n\r\n        for(z=m-1;z>=1;z--)\r\n            for(j=1;j<=z;j++)\r\n        {\r\n            a[z][j]=a[z][j]+(a[z+1][j]>a[z+1][j+1]?a[z+1][j]:a[z+1][j+1]);\r\n        }\r\n        printf("%d",a[1][1]);\r\n    }\r\n    return 0;\r\n}\r\n'),
(909, '#include<stdio.h>\r\nmain()\r\n{int a;\r\n	scanf("%d",&a);\r\nprintf("%d\\n",a);\r\n}'),
(910, '#include <stdio.h>\r\n#include <string.h>\r\nvoid main()\r\n{\r\nchar a[100][100];\r\nint b[100];\r\nchar d[100];\r\nint i,n,k;\r\nscanf("%d",&n);\r\nfor(i=0;i<n;i++)\r\n  gets(a[i]);\r\n\r\nfor(k=0;k<n;k++)\r\n scanf("%d",&b[k]);\r\n\r\nfor(i=0;i<n;i++)\r\n   d[i]=a[i][b[i]];\r\nfor(i=0;i<n;i++)\r\n  \r\nprintf("%c",d[i]);\r\n\r\n}'),
(911, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	scanf("%d",&a);\r\n	a=a%3;\r\n	printf("%d\\n",a);\r\n	return 0;\r\n}'),
(912, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\nchar a[100][100];\r\nint b[100];\r\nchar d[100];\r\nint i,n,k;\r\nscanf("%d",&n);\r\nfor(i=0;i<n;i++)\r\n  gets(a[i]);\r\n\r\nfor(k=0;k<n;k++)\r\n scanf("%d",&b[k]);\r\n\r\nfor(i=0;i<n;i++)\r\n   d[i]=a[i][b[i]];\r\nfor(i=0;i<n;i++)\r\n  \r\nprintf("%c",d[i]);\r\n\r\n}'),
(913, '#include "stdio.h"\r\nint main()\r\n{\r\n	int a;\r\n	scanf("%d",&a);\r\n	a=a%3;\r\n	printf("%d \\n",a);\r\n	return 0;\r\n}'),
(914, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{char str[8][100];\r\n char string[100];\r\n int i,n,a,b,c,d,e,f,g,h;\r\n	 scanf("%d\\n",&n);\r\n for(i=0;i<n;i++)\r\n	 gets (str[i]);\r\nscanf("%d %d %d %d %d %d %d %d",&a,&b,&c,&d,&e,&f,&g,&h);\r\nprintf("%c%c%c%c%c%c%c%c",str[0][a-1],str[1][b-1],str[2][c-1],str[3][d-1],str[4][e-1],str[5][f-1],str[6][g-1],str[7][h-1]);\r\n}'),
(915, '#include<stdio.h>\r\nmain()\r\n{int a;\r\n	scanf("%d",&a);\r\n	if(a=1949)\r\nprintf("%d\\n",a);\r\n}'),
(916, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}\r\n'),
(917, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 11 13 15 21");\r\n	return 0;\r\n}'),
(918, '#include<stdio.h>\r\nint main()\r\n{int a,b;\r\nwhile (scanf("%d",&a)!=EOF)\r\n{\r\n	printf("b=%d",a%3);\r\n}\r\nreturn 0;\r\n}\r\n'),
(919, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 78125 823543 10000000000000000");\r\n	return 0;\r\n}'),
(920, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(921, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("81 279936 1410065408");\r\n	return 0;\r\n}'),
(922, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int n;\r\n	int a,b,t;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(a=0;a<n;a++)\r\n	{\r\n		for(b=0;;b++)\r\n		{\r\n			scanf("%c",&s[a][b]);\r\n			if(s[a][b]==''\\n'')\r\n			{\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	for(a=0;a<n;a++)\r\n	{\r\n		scanf("%d",&t);\r\n		s[n][a]=s[a][t-1];\r\n	}\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(923, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int x,int y)\r\n{\r\n	return x>y?x:y;\r\n}\r\n\r\nint main()\r\n{\r\n	int a[110][110];\r\n	int n,i,j,d;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(a,0,sizeof(a));\r\n		d=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&a[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) a[i][j]+=max(a[i-1][j],a[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)\r\n			d=max(d,a[n][i]);\r\n		printf("%d\\n",d);\r\n	}\r\n	return 0;\r\n}\r\n'),
(924, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}'),
(925, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n\r\n\r\n	int f1,f2,f3,f4,f,n,l,m,i,k;\r\n\r\n	double h,p,z,a,b;\r\n\r\n	f1=0;f2=1;f3=0;f4=1;i=0;k=0;\r\n\r\n	scanf("%d",&n);\r\n\r\n	do\r\n\r\n	{\r\n		f=f1+f2;f1=f2;f2=f;\r\n\r\n		i++;\r\n\r\n	}\r\n\r\n	while(i<=(n-3));\r\n\r\n	do\r\n\r\n	{\r\n		m=f3+f4;f3=f4;f4=m;\r\n\r\n	\r\n		k++;\r\n\r\n	}\r\n\r\n	while(k<=(n-1));\r\n\r\n	l=m+f;\r\n\r\n	h=1+sqrt(5);\r\n\r\n	z=1-sqrt(5);\r\n\r\n	a=pow(h,n);\r\n\r\n	b=pow(z,n);\r\n\r\n	p=(a+b)/l;\r\n\r\n	printf("%f",p);\r\n\r\n	return 0;\r\n}'),
(926, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(927, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 10 12 6 4");\r\n	return 0;\r\n}'),
(928, '#include<stdio.h>\r\n#include<string.h>\r\nint ma(int a,int b);\r\nint main()\r\n{\r\n	int  m[100][100];\r\n	int n,i,j,max;\r\n	if(~scanf("%d",&n))\r\n	{\r\n		memset(m,0,sizeof(m));\r\n		max=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			scanf("%d",&m[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) m[i][j]=m[i][j]+ma(m[i-1][j],m[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)max=ma(max,m[n][i]);\r\n		printf("%d\\n",max);\r\n	}\r\n	return 0;\r\n}\r\nint ma(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}'),
(929, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(930, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(931, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.01887 0.03774");\r\n	return 0;\r\n}'),
(932, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint ma(int a,int b);\r\nint main()\r\n{\r\n	int  m[100][100];\r\n	int n,i,j,max;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(m,0,sizeof(m));\r\n		max=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			scanf("%d",&m[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) m[i][j]=m[i][j]+ma(m[i-1][j],m[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)max=ma(max,m[n][i]);\r\n		printf("%d\\n",max);\r\n	}\r\n	return 0;\r\n}\r\nint ma(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}'),
(933, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 6928");\r\n	return 0;\r\n}'),
(934, '#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n  int f0=0,f1=1,f2,l1,n,p1,a[600];\r\n double k1,h1,h2;\r\n  int i;\r\n  \r\nwhile(scanf("%d",&n) !=EOF) \r\n{ \r\n	if(n>0)\r\n {  \r\n	 a[0]=f0;\r\n	 a[1]=f1;\r\n	 for(i=0;i<n;i++)\r\n  {\r\n   \r\n   f2=f1+f0;\r\n   a[i+2]=f2;\r\n   f0=f1;\r\n   f1=f2;\r\n   \r\n  }\r\n   l1=a[n-1]+a[n+1];\r\n   k1=sqrt(5);\r\n   h1=1;\r\n   h2=1;\r\n   for(i=0;i<n;i++)\r\n   {\r\n	\r\n    h1=h1*(1+k1);\r\n    h2=h2*(1-k1);\r\n   }\r\n   p1=(h1+h2)/l1;   \r\n }\r\n else\r\n {\r\n   p1=1;\r\n }  \r\n printf ("%d\\n",p1);\r\n\r\n}\r\n return 0;\r\n}\r\n'),
(935, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 32 562949953421311");\r\n	return 0;\r\n}'),
(936, '#include <stdio.h>\r\nint main()\r\n{\r\n    int n,i,x[100],j,c;\r\n	char  str[100][100];\r\n	scanf("%d",&n);\r\n	c=getchar();\r\n	for(i=0;i<n;i++)\r\n    	 gets(str[i]);\r\n	for(j=0;j<n;j++)\r\n 		scanf("%d",&x[j]);		\r\n 	for(j=0;j<n;j++)\r\n	    printf("%c",str[j][x[j]-1]);\r\n	return 0;\r\n}'),
(937, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}'),
(938, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int i,b,a[1][3000];\r\n	for(i=0;i<3000;i++)\r\n	{\r\n		scanf("%d",&a[0][i]);\r\n		b=a[0][i]%3;\r\n		printf("%d",b);\r\n	}\r\n	return 0;\r\n}'),
(939, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}\r\n'),
(940, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,a[100];\r\n	char c[100][100];\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>c[i];	\r\n			\r\n	}\r\n    \r\n    for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];	\r\n			\r\n	}\r\n	\r\n		for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i][a[i]-1];\r\n	\r\n	}\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(941, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(942, '\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint A(int n)\r\n{ \r\n	int i=0;\r\n  double da=1;\r\n  double a=1+sqrt(5);\r\n  //p=C(n);\r\n  while(i<n)\r\n  {\r\n    da*=a;\r\n	i++;\r\n  }\r\n  \r\n  return da;\r\n}\r\n\r\n\r\nint B(int n)\r\n{ \r\n	int i=0;\r\n  double db=1;\r\n  double b=1-sqrt(5);\r\n  while(i<n)\r\n  {\r\n	  //p=C(n);\r\n    db*=b;\r\n	i++;\r\n  }\r\n  return db;\r\n}\r\n\r\n\r\n\r\n\r\nmain()\r\n{\r\n   int n;\r\n   double a1;\r\n   double b1;\r\n   int s;\r\n   double e[100]=\r\n   {1,1,\r\n   2,3,5\r\n   ,8,13\r\n   ,21,34\r\n   ,55,\r\n   89,144,\r\n   233\r\n   ,377,\r\n	   610,987,\r\n	   1597,2584,\r\n	   4181,6765,\r\n	   10946,17711\r\n	   ,28657,\r\n	   46368};\r\n   //int p;\r\n  \r\n   scanf("%d",&n);\r\n   a1=A(n);\r\n   b1=B(n);\r\n   //p=C(n);\r\n   \r\n   s=e[n-2]+e[n];\r\n   printf("%f",(a1+b1)/s);\r\n   return 0;\r\n}'),
(943, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2501 16385 30864198 246913581");\r\n	return 0;\r\n}'),
(944, '#include<stdio.h>\r\n#include<string.h>\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int asd[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(asd,0,sizeof(asd));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				asd[i][j]+=max(asd[i-1][j],asd[i-1][j-1]);\r\n			}\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			mx=max(mx,asd[n][j]);\r\n		}\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(945, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.33333 0.50000");\r\n	return 0;\r\n}\r\n'),
(946, '#include "stdio.h"\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<10;i++)\r\na[i]=a[i]%3;\r\nfor(i=0;i<10;i++)\r\n{printf("%d\\n",a[i]);\r\ncontinue;}\r\n}'),
(947, '#include "stdio.h"\r\nmain()\r\n{int a[10],i;\r\nfor(i=0;i<10;i++)\r\nscanf("%d",&a[i]);\r\nfor(i=0;i<10;i++)\r\na[i]=a[i]%3;\r\nfor(i=0;i<10;i++)\r\n{printf("%d\\n",a[i]);\r\ncontinue;}\r\n}'),
(948, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(949, '#include<stdio.h>\r\n#include<string.h>\r\nint ma(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\nint main()\r\n{\r\n	int  m[100][100];\r\n	int n,i,j,max;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(m,0,sizeof(m));\r\n		max=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			scanf("%d",&m[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) m[i][j]=m[i][j]+ma(m[i-1][j],m[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)max=ma(max,m[n][i]);\r\n		printf("%d\\n",max);\r\n	}\r\n	return 0;\r\n}\r\n'),
(950, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			switch (s[i])\r\n			{\r\n				case ''I'':s[i]=1;break;\r\n				case ''V'':s[i]=5;break;\r\n				case ''X'':s[i]=10;break;\r\n				case ''L'':s[i]=50;break;\r\n				case ''C'':s[i]=100;break;\r\n				default: break;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(951, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(952, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 8 11 13 17");\r\n	return 0;\r\n}'),
(953, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(954, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(955, '#include<iostream> //1404\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int single,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		single=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			single^=temp;\r\n		}\r\n		cout<<"Case #"<<temp1<<": "<<single<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(956, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 22");\r\n	return 0;\r\n}'),
(957, '#include <iostream>\r\n#include <stdio.h>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <math.h>\r\nusing namespace std;\r\n\r\nstruct point{\r\n	double x,y;\r\n	point(double _x, double _y)\r\n	{\r\n		x = _x, y = _y;\r\n	}\r\n	point()\r\n	{\r\n		\r\n	}\r\n};\r\n\r\nstruct polygon_convex\r\n{\r\n	vector <point> p;\r\n	polygon_convex(int Size = 0)\r\n	{\r\n		p.resize(Size);\r\n	}\r\n};\r\n\r\nconst double eps = 1e-8;\r\n\r\nint cmp(double x)\r\n{\r\n	if( fabs(x) < eps) return 0;\r\n	if( x>0) return 1;\r\n	return -1;\r\n}\r\n\r\nbool comp_less(const point &a,const point &b)\r\n{\r\n	return cmp(a.x-b.x)<0||cmp(a.x-b.x)==0 && cmp(a.y-b.y)<0;\r\n}\r\n\r\npoint operator-(const point &a, const point &b)\r\n{\r\n	return point(a.x-b.x, a.y-b.y);\r\n}\r\n\r\nbool operator==(const point &a, const point &b)\r\n{\r\n	return cmp(a.x-b.x)==0&&cmp(a.y-b.y)==0;\r\n}\r\n\r\ndouble det(const point &a, const point &b)\r\n{\r\n	return a.x*b.y - a.y*b.x;\r\n}\r\n\r\n\r\npolygon_convex convex_hull(vector<point> a)\r\n{\r\n	polygon_convex res(2*a.size()+5);\r\n	sort(a.begin(), a.end(), comp_less);\r\n	a.erase( unique(a.begin(), a.end()), a.end());\r\n	int m=0;\r\n	for( int i=0; i<a.size(); ++i)\r\n	{\r\n		while( m>1 && cmp(det(res.p[m-1]-res.p[m-2], a[i]-res.p[m-2])) <=0)\r\n			--m;\r\n		res.p[m++] = a[i];\r\n	}\r\n	int k=m;\r\n	for( int i=int(a.size())-2; i>=0; --i)\r\n	{\r\n		while( m>k && cmp(det(res.p[m-1]-res.p[m-2], a[i]-res.p[m-2])) <= 0)\r\n		{\r\n			--m;\r\n		}\r\n		res.p[m++] = a[i];\r\n	}\r\n	res.p.resize(m);\r\n	if( a.size() >1) res.p.resize(m-1);\r\n	return res;\r\n}\r\n\r\ndouble dot(const point &a, const point &b)\r\n{\r\n	return a.x*b.x+a.y*b.y;\r\n}\r\n\r\nbool PointOnSegment(point p, point s, point t)\r\n{\r\n	return cmp(det(p-s, t-s))==0 && cmp(dot(p-s, p-t))<=0;\r\n}\r\n\r\nbool containOn(const polygon_convex &a, const point &b)\r\n{\r\n	int n=a.p.size();\r\n	#define next(i) ((i+1)%n)\r\n	int sign = 0;\r\n	for( int i=0; i<n; ++i)\r\n	{\r\n		int x = cmp(det(a.p[i]-b, a.p[next(i)]-b));\r\n		if( x)\r\n		{\r\n			if( sign)\r\n			{\r\n				if( sign!=x)\r\n					return false;\r\n			}\r\n			else\r\n				sign = x;\r\n		}\r\n	}\r\n	return true;\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	vector<point> ps;\r\n	int t=1;\r\n	while( cin >> n)\r\n	{\r\n		bool f;\r\n		if( n > 2)\r\n		{\r\n			ps.clear();\r\n			for( int i=1; i<=n; i++)\r\n			{\r\n				point s;\r\n				cin >> s.x >> s.y;\r\n				ps.push_back(s);\r\n			}\r\n			polygon_convex pc = convex_hull(ps);\r\n			point s;\r\n			cin >> s.x >> s.y;\r\n			f = containOn( pc, s);\r\n		}\r\n		else if( n == 1)\r\n		{\r\n			point s;\r\n			cin >> s.x >> s.y;\r\n			point t;\r\n			cin >> t.x >> t.y;\r\n			if( cmp(s.x-t.x) == 0 && cmp(s.y-t.y) == 0)\r\n			{\r\n				f = true;\r\n			}\r\n			else\r\n				f = false;\r\n		}\r\n		else if( n== 2)\r\n		{\r\n			point a,b,t;\r\n			cin >> a.x >> a.y >> b.x >> b.y;\r\n			cin >> t.x >> t.y;\r\n			f = PointOnSegment( t, a,b);\r\n		}\r\n		if( f)\r\n		{\r\n			cout << "Case #" << t++ << ": YES" << endl;\r\n		}\r\n		else\r\n		{\r\n			cout << "Case #" << t++ << ": NO" << endl;\r\n		}\r\n	} \r\n	return 0;\r\n}'),
(958, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint ma(int a,int b);\r\n\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int x,i,j,max;\r\n	while(~scanf("%d",&x))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		max=0;\r\n		for(i=1;i<=x;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=x;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=ma(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=x;i++)max=ma(max,f[x][i]);\r\n		printf("%d\\n",max);\r\n	}\r\n	return 0;\r\n}\r\nint ma(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}'),
(959, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\n\r\nstring add(string a,string b)\r\n{\r\n    int i=a.length()-1,j=b.length()-1;\r\n    int k=0,flag=0;//flag 进位的标志\r\n    string ans="";\r\n    while(i>=0&&j>=0)\r\n    {\r\n        ans+=a[i]+b[j]-''0''+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,j--,k++;\r\n    }\r\n    while(i>=0)\r\n    { \r\n        ans+=a[i]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,k++;\r\n    }\r\n    while(j>=0)\r\n    {\r\n        ans+=b[j]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        j--,k++;\r\n    }\r\n    if(flag)//连续进位的情况\r\n    {\r\n        ans+=(flag+''0'');\r\n        k++;\r\n    }\r\n    char t;\r\n    for(i=0,j=k-1;i<j;i++,j--)\r\n    {\r\n        t=ans[i];ans[i]=ans[j];ans[j]=t;\r\n    }\r\n    return ans;\r\n}\r\n//大数乘法\r\nstring chengfa(string a,string b)\r\n{\r\n    string ans="0",c;\r\n    int a_len=a.length()-1,b_len=b.length()-1,i,j,t,k;\r\n    int flag;//标志进位\r\n    char ch;\r\n    for(i=a_len;i>=0;i--)\r\n    {\r\n        flag=0;\r\n        c="";\r\n        for(j=i;j<a_len;j++) c+=''0''; //扩充位数\r\n        for(j=b_len;j>=0;j--)\r\n        {\r\n            t=(b[j]-''0'')*(a[i]-''0'')+flag;\r\n            flag=t/10;\r\n            c+=(t%10+''0'');\r\n        }\r\n        if(flag)\r\n            c+=(flag+''0'');\r\n        for(j=0,k=c.size()-1;j<k;j++,k--)  //反转  \r\n        {   ch=c[j];c[j]=c[k];c[k]=ch;} \r\n        ans=add(ans,c);\r\n    }\r\n    if(ans[0]==''0'')return "0";//排除0*x=00**0的情况\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    string a,b;\r\n    int i, n;\r\n    while(cin>>n)\r\n    {\r\n        string r = "1";\r\n        for(i=1; i<=n; i++)\r\n        {\r\n            r = chengfa(r, "2");\r\n        }\r\n        cout << r <<endl;\r\n    }\r\n    return 0;\r\n}\r\n'),
(960, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char a[100];\r\n	int b[100],sum=0;\r\n	int i=0,sum1=0,j;\r\n	int c[100];\r\n	int n;\r\n	scanf("%d",&n);\r\n	for(j=0;j<n;j++)\r\n	{\r\n		scanf("%s",&a);\r\n	\r\n		sum=0;\r\n		sum1=0;\r\n		for(i=0;i<100;i++)\r\n		{\r\n			switch(a[i])\r\n			{\r\n				case ''I'':b[i]=1,sum1++;continue;\r\n				case ''V'':b[i]=5,sum1++;continue;\r\n				case ''X'':b[i]=10,sum1++;continue;\r\n				case ''L'':b[i]=50,sum1++;continue;\r\n				case ''C'':b[i]=100,sum1++;continue;\r\n				default: b[i]=''\\0'';break;\r\n			}\r\n			//printf("%s",a);\r\n		}\r\n		if(sum1==1)printf("%d",b[0]);\r\n		else\r\n		{\r\n			sum=0;\r\n			for(i=0;i<sum1;i++)\r\n			{\r\n				if(b[i]>=b[i+1])\r\n				sum+=b[i];\r\n				else{\r\n					sum=sum+(b[i+1]-b[i]);\r\n					i++;\r\n				}\r\n			}	\r\n			c[j]=sum;\r\n		}\r\n		memset(a,0,100);\r\n		memset(b,0,100);\r\n	\r\n	}\r\n	for(j=0;j<n;j++)printf("%d\\n",c[j]);\r\n	return 0;\r\n}'),
(961, '#include<iostream>\r\nusing namespace std;\r\nint math[1000000];\r\nint main()\r\n{\r\n	int n,i,j,count;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(math,0,sizeof(math));\r\n		math[0]=1;\r\n		count=1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<count;j++)\r\n			{\r\n				math[j]=math[j]*2;	\r\n			}\r\n			for(j=0;j<count;j++)\r\n			{\r\n				if(math[j]>=10)\r\n				{\r\n					math[j+1]+=math[j]/10;\r\n					math[j]=math[j]%10;\r\n					count++;\r\n				}\r\n			}\r\n		}\r\n		for(i=0;i<count ;i++)\r\n		{\r\n			if(math[count-i-1]!=0)\r\n			{\r\n				for(j=i;j<count;j++)\r\n				{\r\n					cout<<math[count-j-1];\r\n				}\r\n				break;\r\n			}\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}'),
(962, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 11 10 6 5");\r\n	return 0;\r\n}'),
(963, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("9 1854 934961");\r\nreturn 0;\r\n}\r\n'),
(964, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}\r\n'),
(965, '#include <cstdio>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char ans[600][201];\r\n	memset(ans,''0'',sizeof(ans));\r\n	ans[0][200] = ''1'';\r\n	int jinwei;\r\n	for(int i = 1; i < 600; ++i)\r\n	{\r\n		\r\n		jinwei = 0;\r\n		for(int j = 200; j >= 1; --j)\r\n		{\r\n			int w = (ans[i-1][j]-''0'')*2+jinwei;\r\n			ans[i][j] = (w%10 + ''0'');\r\n			if(w > 9)\r\n				jinwei = 1;\r\n			else\r\n				jinwei = 0;\r\n		}\r\n	}\r\n	int a;\r\n	while (cin>>a)\r\n	{\r\n		int i = 0;\r\n		while(ans[a][i] == ''0'')\r\n			i++;\r\n		for (i; i<=200; ++i)\r\n		{\r\n			cout<<ans[a][i];\r\n		}\r\n		cout<<endl;\r\n	}\r\n}'),
(966, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 15 14 23");\r\n	return 0;\r\n}'),
(967, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char ans[600][201];\r\n	memset(ans,''0'',sizeof(ans));\r\n	ans[0][200] = ''1'';\r\n	int jinwei;\r\n	for(int i = 1; i < 600; ++i)\r\n	{\r\n		\r\n		jinwei = 0;\r\n		for(int j = 200; j >= 1; --j)\r\n		{\r\n			int w = (ans[i-1][j]-''0'')*2+jinwei;\r\n			ans[i][j] = (w%10 + ''0'');\r\n			if(w > 9)\r\n				jinwei = 1;\r\n			else\r\n				jinwei = 0;\r\n		}\r\n	}\r\n	int a;\r\n	while (cin>>a)\r\n	{\r\n		int i = 0;\r\n		while(ans[a][i] == ''0'')\r\n			i++;\r\n		for (i; i<=200; ++i)\r\n		{\r\n			cout<<ans[a][i];\r\n		}\r\n		cout<<endl;\r\n	}\r\n}'),
(968, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 14700");\r\n	return 0;\r\n}'),
(969, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,p;\r\n	while(~scanf("%d",&n))\r\n	{p=pow(2,n);\r\n	printf("%d\\n",p);}\r\n	return 0;\r\n\r\n}'),
(970, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 11 15 22");\r\n	return 0;\r\n}'),
(971, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}\r\n'),
(972, '#include<iostream>\r\nusing namespace std;\r\nint math[1000000];\r\nint main()\r\n{\r\n	int n,i,j,count;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		//memset(math,0,sizeof(math));\r\n		for(i=0;i<1000000;i++)\r\n		{\r\n			math[i]=0;\r\n		}\r\n		math[0]=1;\r\n		count=1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<count;j++)\r\n			{\r\n				math[j]=math[j]*2;	\r\n			}\r\n			for(j=0;j<count;j++)\r\n			{\r\n				if(math[j]>=10)\r\n				{\r\n					math[j+1]+=math[j]/10;\r\n					math[j]=math[j]%10;\r\n					count++;\r\n				}\r\n			}\r\n		}\r\n		for(i=0;i<count ;i++)\r\n		{\r\n			if(math[count-i-1]!=0)\r\n			{\r\n				for(j=i;j<count;j++)\r\n				{\r\n					cout<<math[count-j-1];\r\n				}\r\n				break;\r\n			}\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}'),
(973, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 21");\r\n	return 0;\r\n}'),
(974, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,p;\r\n	scanf("%d",&n);\r\n	p=pow(2,n);\r\n	printf("%d\\n",p);\r\n	return 0;\r\n\r\n}'),
(975, '#include "stdio.h"\r\nmain()\r\n{int a[10],i,b[10];\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a[i]);\r\nb[i]=a[i]%3;printf("%d\\n",b[i]);}\r\n}'),
(976, '#include "stdio.h"\r\nmain()\r\n{int a[10],i,b[10];\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a[i]);\r\nb[i]=a[i]%3;printf("%d\\n",b[i]);}\r\n}'),
(977, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(978, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 172");\r\n	return 0;\r\n}'),
(979, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(980, '#include<stdio.h>\r\nint main()\r\n{\r\n	//freopen("in.txt","r",stdin);\r\n	int n,sum,i;\r\n	int b[1000];\r\n	char a;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	while(n--)\r\n	{\r\n     sum=0;\r\n	 for(i=0;;i++)\r\n	 {\r\n		scanf("%c",&a);\r\n		if(a==''\\n'')\r\n			break;\r\n		if(a==''I'')\r\n			b[i]=1;\r\n		else if(a==''V'')\r\n			b[i]=5;\r\n		else if(a==''X'')\r\n			b[i]=10;\r\n		else if(a==''L'')\r\n			b[i]=50;\r\n		else if(a==''C'')\r\n			b[i]=100; \r\n	 }\r\n	 b[i]=-2;\r\n 	 for(i=0;b[i]>0;i=i+2)\r\n	 {\r\n		if(b[i+1]>b[i])\r\n		{\r\n			sum=sum+(-b[i]+b[i+1]);\r\n		}\r\n		if(b[i+1]<=b[i])\r\n		{\r\n			sum=sum+b[i]+b[i+1];\r\n		}\r\n	 }\r\n	 printf("%d\\n",sum);\r\n	}\r\n\r\n	return 0;\r\n}'),
(981, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 85 170");\r\n	return 0;\r\n}'),
(982, '#include "stdio.h"\r\nmain()\r\n{int a[10],i,b[10];\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a[i]);}\r\nfor(i=0;i<10;i++)\r\n{b[i]=a[i]%3;printf("%d\\n",b[i]);}\r\n}'),
(983, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(984, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 85 171");\r\n	return 0;\r\n}'),
(985, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n,p;\r\n	while(~scanf("%d",&n))\r\n	{p=pow(2,n);\r\n	printf("%d\\n",p);}\r\n	return 0;\r\n\r\n}'),
(986, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(987, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 85 169");\r\n	return 0;\r\n}'),
(988, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(989, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(990, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\n\r\nstring add(string a,string b)\r\n{\r\n    int i=a.length()-1,j=b.length()-1;\r\n    int k=0,flag=0;//flag 进位的标志\r\n    string ans="";\r\n    while(i>=0&&j>=0)\r\n    {\r\n        ans+=a[i]+b[j]-''0''+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,j--,k++;\r\n    }\r\n    while(i>=0)\r\n    { \r\n        ans+=a[i]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,k++;\r\n    }\r\n    while(j>=0)\r\n    {\r\n        ans+=b[j]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        j--,k++;\r\n    }\r\n    if(flag)//连续进位的情况\r\n    {\r\n        ans+=(flag+''0'');\r\n        k++;\r\n    }\r\n    char t;\r\n    for(i=0,j=k-1;i<j;i++,j--)\r\n    {\r\n        t=ans[i];ans[i]=ans[j];ans[j]=t;\r\n    }\r\n    return ans;\r\n}\r\n//大数乘法\r\nstring chengfa(string a,string b)\r\n{\r\n    string ans="0",c;\r\n    int a_len=a.length()-1,b_len=b.length()-1,i,j,t,k;\r\n    int flag;//标志进位\r\n    char ch;\r\n    for(i=a_len;i>=0;i--)\r\n    {\r\n        flag=0;\r\n        c="";\r\n        for(j=i;j<a_len;j++) c+=''0''; //扩充位数\r\n        for(j=b_len;j>=0;j--)\r\n        {\r\n            t=(b[j]-''0'')*(a[i]-''0'')+flag;\r\n            flag=t/10;\r\n            c+=(t%10+''0'');\r\n        }\r\n        if(flag)\r\n            c+=(flag+''0'');\r\n        for(j=0,k=c.size()-1;j<k;j++,k--)  //反转  \r\n        {   ch=c[j];c[j]=c[k];c[k]=ch;} \r\n        ans=add(ans,c);\r\n    }\r\n    if(ans[0]==''0'')return "0";//排除0*x=00**0的情况\r\n    return ans;\r\n}\r\n\r\nstring pow1(string s, int x)\r\n{\r\n    string temp;\r\n    if(x==1)\r\n    {\r\n        return s;\r\n    }\r\n    if(x == 0)\r\n    {\r\n        return "1";\r\n    }\r\n    temp = pow1(s, x/2);\r\n    if(x&1)\r\n    {\r\n        return chengfa(chengfa(temp, temp), s);\r\n    }\r\n    else\r\n    {\r\n        return chengfa(temp, temp);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    string a,b;\r\n    int i, n;\r\n    while(cin>>n)\r\n    {\r\n        cout << pow1("2", n) <<endl;\r\n    }\r\n    return 0;\r\n}\r\n'),
(991, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 55 7104");\r\n	return 0;\r\n}'),
(992, '#include<iostream>\r\n#include <string>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,a[100];\r\n	char c[100][100];\r\n	cin>>n;\r\n	if(n>0&&n<=100)\r\n	{\r\n		for(i=0;i<n;i++)\r\n   	{\r\n   		\r\n		cin>>c[i];	\r\n			\r\n	}\r\n    \r\n    	 for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];	\r\n			\r\n	}\r\n	\r\n		for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i][a[i]-1];\r\n	\r\n	}\r\n    \r\n   \r\n	}\r\n	\r\n}'),
(993, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 85 172");\r\n	return 0;\r\n}'),
(994, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 2160 1632960");\r\n	return 0;\r\n}'),
(995, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 10 15 6 5");\r\n	return 0;\r\n}\r\n'),
(996, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}\r\n'),
(997, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 44 2548");\r\n	return 0;\r\n}'),
(998, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7104");\r\n	return 0;\r\n}'),
(999, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 13 12");\r\n	return 0;\r\n}'),
(1000, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\n\r\nstring add(string a,string b)\r\n{\r\n    int i=a.length()-1,j=b.length()-1;\r\n    int k=0,flag=0;//flag 进位的标志\r\n    string ans="";\r\n    while(i>=0&&j>=0)\r\n    {\r\n        ans+=a[i]+b[j]-''0''+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,j--,k++;\r\n    }\r\n    while(i>=0)\r\n    { \r\n        ans+=a[i]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        i--,k++;\r\n    }\r\n    while(j>=0)\r\n    {\r\n        ans+=b[j]+flag;\r\n        flag=0;\r\n        if(ans[k]>''9'')\r\n        {\r\n            flag=1;\r\n            ans[k]=ans[k]-10;\r\n        }\r\n        j--,k++;\r\n    }\r\n    if(flag)//连续进位的情况\r\n    {\r\n        ans+=(flag+''0'');\r\n        k++;\r\n    }\r\n    char t;\r\n    for(i=0,j=k-1;i<j;i++,j--)\r\n    {\r\n        t=ans[i];ans[i]=ans[j];ans[j]=t;\r\n    }\r\n    return ans;\r\n}\r\n//大数乘法\r\nstring chengfa(string a,string b)\r\n{\r\n    string ans="0",c;\r\n    int a_len=a.length()-1,b_len=b.length()-1,i,j,t,k;\r\n    int flag;//标志进位\r\n    char ch;\r\n    for(i=a_len;i>=0;i--)\r\n    {\r\n        flag=0;\r\n        c="";\r\n        for(j=i;j<a_len;j++) c+=''0''; //扩充位数\r\n        for(j=b_len;j>=0;j--)\r\n        {\r\n            t=(b[j]-''0'')*(a[i]-''0'')+flag;\r\n            flag=t/10;\r\n            c+=(t%10+''0'');\r\n        }\r\n        if(flag)\r\n            c+=(flag+''0'');\r\n        for(j=0,k=c.size()-1;j<k;j++,k--)  //反转  \r\n        {   ch=c[j];c[j]=c[k];c[k]=ch;} \r\n        ans=add(ans,c);\r\n    }\r\n    if(ans[0]==''0'')return "0";//排除0*x=00**0的情况\r\n    return ans;\r\n}\r\n\r\nstring pow1(string s, int x)\r\n{\r\n    string temp;\r\n    if(x==1)\r\n    {\r\n        return s;\r\n    }\r\n    if(x == 0)\r\n    {\r\n        return "1";\r\n    }\r\n    temp = pow1(s, x/2);\r\n    if(x&1)\r\n    {\r\n        return chengfa(chengfa(temp, temp), s);\r\n    }\r\n    else\r\n    {\r\n        return chengfa(temp, temp);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    string a,b;\r\n    int i, n;\r\n    string r[666];\r\n    for(i=0; i<=600; i++)\r\n    {\r\n        r[i] = pow1("2", i);\r\n    }\r\n    while(cin>>n)\r\n    {\r\n        cout << r[n] <<endl;\r\n    }\r\n    return 0;\r\n}\r\n'),
(1001, '#include<stdio.h>\r\nint main()\r\n{\r\nint a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\nint i,b=2228;\r\nfor(i=0;i<15;i++)\r\nif(a[i]==b)\r\nprintf("%d\\n",a[i]);\r\n}'),
(1002, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(1003, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n    cout<<2228<<endl;\r\n}'),
(1004, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nmain()\r\n{\r\nint a,i;\r\n\r\nchar buffer[100][100];\r\nint num[100];\r\nscanf("%d",&a);\r\n\r\nfor(i=0;i<=a;i++)\r\n{\r\n	gets( buffer[i] );\r\n}\r\n\r\nfor(i=0;i<a;i++)\r\n{\r\n	scanf("%d",&num[i] );\r\n}\r\n\r\nfor(i=0;i<a;i++)\r\n{\r\n	printf("%c",buffer[i+1][  num[i]-1  ]);\r\n}\r\n\r\nprintf("\\n");\r\n}\r\n\r\n'),
(1005, '#include<stdio.h>\r\nint main()\r\n{\r\n  printf("1912\\n");\r\nreturn 0;\r\n}'),
(1006, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(1007, '#include<stdio.h>\r\nint main()\r\n{\r\n  printf("2046\\n");\r\nreturn 0;\r\n}'),
(1008, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 22");\r\n	return 0;\r\n}'),
(1009, '#include<stdio.h>\r\nint main()\r\n{\r\n  printf("2228\\n");\r\nreturn 0;\r\n}'),
(1010, '#include<iostream>\r\n#include<string>\r\nusing namespace std;\r\nint main()\r\n{\r\n	char a[100][100];\r\n	int t[100],i,n=0,j;\r\n	cin>>n;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;j<100;j++)\r\n		{\r\n			cin>>a[i][j];\r\n			if(a[i][j]==''\\r'')\r\n			{\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cin>>t[i];\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		cout<<a[i][(t[i]-1)];\r\n	}\r\n	cout<<endl;\r\n	return 0;\r\n}'),
(1011, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("11 21 42 86 171");\r\n	return 0;\r\n}'),
(1012, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 22 44 88 176");\r\n	return 0;\r\n}'),
(1013, '\r\n#include <iostream>\r\n#include <stdio.h>\r\n#include <string.h>\r\nusing namespace std;\r\n\r\nconst int MAX=320;\r\nchar c1[MAX+10],c2[MAX+10];\r\nint a1[MAX+10],a2[MAX+10],ans[2*MAX+10];\r\nint n;\r\n\r\nvoid bigintmul()\r\n{\r\n	int k,i,j;\r\n	ans[0]=2;\r\n\r\n	for(k=1;k<n;k++){\r\n        for(i=0;i<2*MAX+9;i++)\r\n			ans[i]*=2;\r\n		for(i=0;i<2*MAX+9;i++){\r\n			ans[i+1]=ans[i+1]+ans[i]/10;\r\n			ans[i]=ans[i]%10;\r\n		}\r\n	}\r\n	for(i=2*MAX+9; i>=0 && ans[i]==0;i--);\r\n	if(i<0)\r\n		printf("0");\r\n    else\r\n    {\r\n        for(j=i;j>=0;j--)\r\n        printf("%d",ans[j]);\r\n\r\n    }\r\n    printf("\\n");\r\n}\r\n\r\nint main()\r\n{\r\n\r\n	\r\n	\r\n    while( scanf("%d",&n) !=EOF){\r\n		memset(ans, 0 ,sizeof(ans));\r\n	if(n==0){\r\n		printf("1\\n");\r\n	} else {\r\n		bigintmul();\r\n	}\r\n	}\r\n    return 0;\r\n}\r\n'),
(1014, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 8 12 15 20");\r\n	return 0;\r\n}'),
(1015, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06195 0.11667");\r\n	return 0;\r\n}'),
(1016, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 5001 32769 10298065 82304527");\r\n	return 0;\r\n}'),
(1017, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.14815 0.07407");\r\n	return 0;\r\n}'),
(1018, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1019, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1020, '#include <stdio.h>\r\nchar a[602][300];\r\nint main()\r\n{\r\n	int i,j,p;\r\n	a[0][0]=''1'';\r\n	for(i=0;i<600;++i)\r\n	{\r\n		p=0;\r\n		for(j=0;a[i][j];++j)\r\n		{\r\n			a[i+1][j]=a[i][j]*2-''0''+p;\r\n			p=a[i+1][j]>''9'';\r\n			a[i+1][j]-=p*10;\r\n		}\r\n		a[i+1][j]=p?''1'':0;\r\n	}\r\n	//printf("%c",a[1][0]);\r\n	while(~scanf("%d",&j))\r\n	{\r\n		i=0;\r\n		while(a[j][i]>=''0''&&a[j][i]<=''9'')++i;\r\n		for(--i;i>=0;--i)\r\n		printf("%c",a[j][i]);\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}\r\n'),
(1021, '#include<stdio.h>\r\n#include<stdlib.h>\r\nint main ()\r\n{\r\n	char a[102][102];\r\n	int b,n,i;\r\n	scanf("%d%*c",&n);\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%s%*c",&a[i]);\r\n	}\r\n\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&b);\r\n		printf("%c",a[i][b-1]);\r\n	}\r\n	printf("\\n");\r\n	return 0;\r\n}'),
(1022, '#include<iostream>\r\nusing namespace std;\r\nint math[1000000];\r\nint main()\r\n{\r\n	int n,i,j,count;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		//memset(math,0,sizeof(math));\r\n		for(i=0;i<1000000;i++)\r\n		{\r\n			math[i]=0;\r\n		}\r\n		math[0]=1;\r\n		count=1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<count;j++)\r\n			{\r\n				math[j]=math[j]*2;	\r\n			}\r\n			for(j=0;j<count;j++)\r\n			{\r\n				if(math[j]>=10)\r\n				{\r\n					math[j+1]+=math[j]/10;\r\n					math[j]=math[j]%10;\r\n					count++;\r\n				}\r\n			}\r\n		}\r\n		for(i=0;i<count ;i++)\r\n		{\r\n			if(math[count-i-1]!=0)\r\n			{\r\n				for(j=i;j<count;j++)\r\n				{\r\n					cout<<math[count-j-1];\r\n				}\r\n				break;\r\n			}\r\n		}\r\n		cout<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1023, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(1024, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 21 41 85 169");\r\n	return 0;\r\n}'),
(1025, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart  Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1026, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1027, '#include<stdio.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;s[i][j]!=''\\n'';j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n		//	if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\m",s[m]);\r\n	return 0;\r\n}\r\n'),
(1028, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("9 1854 1334961");\r\nreturn 0;\r\n}\r\n'),
(1029, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1030, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1031, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.13208");\r\n	return 0;\r\n}'),
(1032, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1033, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(1034, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;s[i][j]!=''\\n'';j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n		//	if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\m",s[m]);\r\n	return 0;\r\n}\r\n'),
(1035, '#include <stdio.h>\r\nmain()\r\n{int  a,b,c,d,e,f;\r\nscanf("%d\\n",&a);\r\nc=a/2;\r\nwhile(a--)\r\n{scanf("%d",&b);\r\nif(a==c)\r\nc=b;\r\n}\r\nscanf("%d\\n",&d);\r\nf=d/2;\r\nwhile(d--)\r\n{scanf("%d",&e);\r\nif(d==f)\r\nf=e;\r\n}\r\n\r\n\r\nprintf("Case 1: %d\\n",c);\r\nprintf("Case 2: %d\\n",f);\r\n}\r\n'),
(1036, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 2548");\r\n	return 0;\r\n}'),
(1037, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1038, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1039, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1040, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint t;\r\nint f[200];\r\ndouble a,b,m,c;\r\n\r\nscanf("%d",&n);\r\n\r\nif (n<=50)\r\n{for(i=0;i<2*n;i++)\r\n{\r\n	scanf("%d",&f[i]);\r\n	\r\n}\r\nscanf("%lf %lf",&m,&c);\r\n\r\n\r\nfor(i=0;i<n;i++)\r\n{j=f[i];\r\nif(j==1)x++;\r\n\r\n}a=(double)x/((double)n);\r\nfor(i=n;i<n*2;i++)\r\n{\r\nt=f[i];\r\nif(t==1)y++;\r\n\r\n}b=(double)y/((double)n);\r\n\r\n\r\nif((a==m)&&(b==c))\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n}\r\n}'),
(1041, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1042, '#include <stdio.h>\r\nint nn[101][101],ss=0;\r\nint max(int a,int b)\r\n{\r\n	int m;\r\n	if(a>b)\r\n	{\r\n		m=a;\r\n	}\r\n	else\r\n	{\r\n		m=b;\r\n	}\r\n	return m;\r\n}\r\nint main ()\r\n{\r\n	int n,i,j;\r\n	scanf("%d",&n);\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		for(j=1;j<=i;j++)\r\n		{\r\n			scanf("%d",&nn[i][j]);\r\n		}\r\n	}\r\n	for(i=n;i>=1;i--)\r\n	{\r\n		if(i-1!=0)\r\n		{\r\n			for(j=1;j<i;j++)\r\n			{\r\n				nn[i-1][j]=max(nn[i][j],nn[i][j+1])+nn[i-1][j];\r\n			}\r\n		}\r\n		\r\n	}\r\n	printf("%d",nn[1][1]);\r\n	return 0;\r\n}\r\n'),
(1043, '#include<stdio.h>\r\n#include<string>\r\nint math[1000];\r\nint main()\r\n{\r\n	int n,i,j,count,w;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(math,0,sizeof(math));\r\n		math[0]=1;\r\n		count=1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<count;j++)\r\n			{\r\n				math[j]=math[j]*2;	\r\n			}\r\n			for(j=0;j<count;j++)\r\n			{\r\n				if(math[j]>=10)\r\n				{\r\n					math[j+1]+=math[j]/10;\r\n					math[j]=math[j]%10;\r\n				}\r\n			}\r\n			if(math[count]!=0)\r\n			{\r\n				count++;\r\n			}\r\n		}\r\n		for(i=0;i<count ;i++)\r\n		{\r\n			printf("%d",math[count-i-1]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1044, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07143 0.13208");\r\n	return 0;\r\n}'),
(1045, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;'),
(1046, '#include<stdio.h>\r\n#include<string.h>\r\nint math[1000];\r\nint main()\r\n{\r\n	int n,i,j,count,w;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(math,0,sizeof(math));\r\n		math[0]=1;\r\n		count=1;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<count;j++)\r\n			{\r\n				math[j]=math[j]*2;	\r\n			}\r\n			for(j=0;j<count;j++)\r\n			{\r\n				if(math[j]>=10)\r\n				{\r\n					math[j+1]+=math[j]/10;\r\n					math[j]=math[j]%10;\r\n				}\r\n			}\r\n			if(math[count]!=0)\r\n			{\r\n				count++;\r\n			}\r\n		}\r\n		for(i=0;i<count ;i++)\r\n		{\r\n			printf("%d",math[count-i-1]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1047, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1048, '#include<iostream>\r\n#include <string>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,a[100],q;\r\n	char c[100][100];\r\n	cin>>n;\r\n	if(n>0&&n<=100)\r\n	{\r\n		q=0;\r\n		for(i=0;i<n;i++)\r\n   	{\r\n   		\r\n		cin>>c[i];\r\n		if(strlen(c[i])<=100)q=1;\r\n	  	\r\n			\r\n	}\r\n    if(q)\r\n    {\r\n    		 for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];	\r\n			\r\n	}\r\n	\r\n		for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i][a[i]-1];\r\n	\r\n	}\r\n    }\r\n    \r\n    \r\n   \r\n	}\r\n	\r\n}'),
(1049, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.02127 0.04255");\r\n	return 0;\r\n}'),
(1050, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(1051, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.04255 0.02127");\r\n	return 0;\r\n}'),
(1052, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;s[i][j]!=''\\n'';j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n		//	if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\m",s[m]);\r\n	return 0;\r\n}\r\n'),
(1053, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1054, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1055, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,a[100],q;\r\n	char c[100][100];\r\n	cin>>n;\r\n	if(n>0&&n<=100)\r\n	{\r\n		q=0;\r\n		for(i=0;i<n;i++)\r\n   	{\r\n   		\r\n		cin>>c[i];\r\n		if(strlen(c[i])<=100)q=1;\r\n	  	\r\n			\r\n	}\r\n    if(q)\r\n    {\r\n    		 for(i=0;i<n;i++)\r\n	{\r\n		cin>>a[i];	\r\n			\r\n	}\r\n	\r\n		for(i=0;i<n;i++)\r\n	{\r\n		cout<<c[i][a[i]-1];\r\n	\r\n	}\r\n    }\r\n    \r\n    \r\n   \r\n	}\r\n	\r\n}'),
(1056, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart ");\r\n	return 0;\r\n}\r\n'),
(1057, '#include<stdio.h>\r\n#include<stdlib.h>\r\nint main ()\r\n{\r\n	char a[102][102];\r\n	int b,n,i,j;\r\n	scanf("%d%*c",&n);\r\n	for(i=0;i<n;i++)\r\n	{\r\n		j=0;\r\n		while((a[i][j]=getchar())!=''\\n'')\r\n		{\r\n			j++;\r\n		}\r\n\r\n	}\r\n\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&b);\r\n		printf("%c",a[i][b-1]);\r\n	}\r\n	printf("\\n");\r\n	return 0;\r\n}'),
(1058, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 720 362880");\r\n	return 0;\r\n}'),
(1059, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nint a,b,i;\r\nfor(i=0;i<3;i++)\r\n{\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n}\r\n\r\n}\r\n'),
(1060, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\m",s[m]);\r\n	return 0;\r\n}\r\n'),
(1061, '#include "stdio.h"\r\n#include "math.h"\r\n#include "stdlib.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d",b);\r\n	return 0;\r\n}'),
(1062, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 44 7252");\r\n	return 0;\r\n}'),
(1063, '#include "stdio.h"\r\n#include "math.h"\r\n#include "stdlib.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d",b);\r\n	return 0;\r\n}'),
(1064, '#include <stdio.h>\r\nmain()\r\n{int  a,b,c;\r\nscanf("%d\\n",&a);\r\nc=a/2;\r\nwhile(a--)\r\n{scanf("%d",&b);\r\nif(a==c)\r\nc=b;\r\n}\r\n\r\nprintf("Case 1: %d\\n",c);\r\n\r\n}\r\n'),
(1065, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 4852");\r\n	return 0;\r\n}'),
(1066, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 198");\r\n	return 0;\r\n}'),
(1067, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 4851");\r\n	return 0;\r\n}'),
(1068, 'C:\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(1069, '\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}'),
(1070, '#include <stdio.h>\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			if(i==(n+1)/2)\r\n			{\r\n				printf("Case #%d: %d\\n",nn,t);\r\n			}\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(1071, '#include<stdio.h>\r\nvoid main()\r\n{   int a,b;\r\nfloat c;\r\n	scanf("%d",&a);\r\n	scanf("%d",&b);\r\n	scanf("%d",&c);\r\n    printf("%d",a);printf("\\n");\r\n	printf("%d",b);printf("\\n");\r\n	printf("%d",b);printf("\\n");\r\n    \r\n\r\n}'),
(1072, '#include<stdio.h>\r\n//#define maxx 1000000000\r\nint main()\r\n{\r\n    int a[10000];\r\n	int b;\r\n	int j;\r\n	int n,p=1;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		int l=0;\r\n		for(int i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a[i]);\r\n		}\r\n		for(int i=0;i<n-1;i++)\r\n		{\r\n			if(a[n-1]-a[i]==0)\r\n			   {\r\n   				for(int i=0;i<n-1;i++)\r\n		       {\r\n			int k=0;\r\n			for(j=i+1;j<n;j++)\r\n			{\r\n				if(a[i]==a[j])\r\n				{\r\n					k=k+1;\r\n				}\r\n			}\r\n			\r\n				if(k==0)\r\n			{\r\n				b=a[i];\r\n				break;\r\n			}\r\n			\r\n			\r\n		     }\r\n   			}\r\n   			else\r\n   			{\r\n			   l++;\r\n			   	if(l==n-1)\r\n			   	b=a[n-1];\r\n            }\r\n   			\r\n   			\r\n		}\r\n		printf("Case #%d: %d\\n",p,b);\r\n		p++;\r\n	}\r\n	return 0;	\r\n}'),
(1073, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\m'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\n",s[m]);\r\n	return 0;\r\n}\r\n'),
(1074, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,a;\r\n	char s[109][109];\r\n	scanf("%d",&n);\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		getchar();\r\n		scanf("%s",&s[i]);\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		printf("%c\\n",s[i][a-1]);\r\n	}\r\n	return 0;\r\n}'),
(1075, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("1 15 21 1 192090729600");\r\n	return 0;\r\n}'),
(1076, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.02357");\r\n	return 0;\r\n}'),
(1077, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nint a[3],b[3],i;\r\n\r\nfor(i=0;i<3;i++)\r\n\r\n\r\n{scanf("%d",&a[i]);\r\n	b[i]=a[i]%3;\r\n	printf("%d\\n",b[i]);\r\n}\r\n\r\n}\r\n'),
(1078, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7297");\r\n	return 0;\r\n}'),
(1079, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[100][100];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n   getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\m'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n	flag--;\r\n		s[m][i]=s[i][flag];\r\n	}\r\n\r\n	printf("%s\\n",s[m]);\r\n	return 0;\r\n}\r\n'),
(1080, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("13 12 11 14 11");\r\n	return 0;\r\n}'),
(1081, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}'),
(1082, '\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	int c=0,n,s,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		c++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			s^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n	}\r\n	return 0;\r\n}'),
(1083, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1084, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{int n;\r\nwhile(~scanf("%d",&n))\r\npow(2,n);\r\nprintf("%d",n);\r\nreturn 0;\r\n}'),
(1085, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nint a[3],b[3],i;\r\n\r\nfor(i=0;i<3;i++)\r\nscanf("%d",&a[i]);\r\n\r\nfor(i=0;i<3;i++)\r\n{b[i]=a[i]%3;\r\n	printf("%d\\n",b[i]);\r\n}\r\n\r\n}\r\n'),
(1086, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.27393 0.13697");\r\n	return 0;\r\n}'),
(1087, 'Input\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1088, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 360 181440");\r\n	return 0;\r\n}'),
(1089, '#include<iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\nint main()\r\n{\r\nint a,i,j;\r\nchar s[100][100];\r\nint b[100];\r\n\r\ncin>>a;\r\n\r\n\r\nfor(i=0;i<a+1;i++)\r\n{\r\n	gets(s[i]);\r\n}\r\n\r\n\r\nfor(i=0;i<a;i++)\r\n{cin>>b[i];}\r\nfor(i=0;i<a;i++)\r\n{cout<<s[i+1][b[i]-1];}\r\n\r\nreturn 0;\r\n}\r\n'),
(1090, '#include "stdio.h"\r\n#include "time.h"\r\n#include "stdlib.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	srand(time(NULL));\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d",b);\r\n	return 0;\r\n}'),
(1091, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int a[600]={0,1},n;\r\n	long long p,l;\r\n	for(int i=2;i<600;i++)\r\n	{\r\n		a[i]=a[i-1]+a[i-2];\r\n	}\r\n	while(~scanf("%d",&n))\r\n	{\r\n		float sum1=1,sum2=1;\r\n		if(n==0)\r\n		{\r\n			printf("1\\n");\r\n		}\r\n		else\r\n	   {\r\n			 for(int i=1;i<=n;i++)\r\n	       {\r\n		     l=a[i-1]+a[i+1];\r\n		     sum1=sum1*(1+sqrt(5));\r\n		     sum2=sum2*(1-sqrt(5));		  \r\n	       }\r\n	     p=(sum1+sum2)/l;\r\n	     printf("%d\\n",p);	\r\n	  }\r\n	}\r\n    return 0;\r\n}'),
(1092, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1093, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 10 16 6 5");\r\n	return 0;\r\n}'),
(1094, '#include "stdio.h"\r\n#include "time.h"\r\n#include "stdlib.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	srand(time(NULL));\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}'),
(1095, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1096, '#include "stdio.h"\r\n#include "time.h"\r\n#include "stdlib.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	srand(time(NULL));\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}'),
(1097, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Woart Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1098, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char t[120][120];\r\n	int m,i,j,flag;\r\n	scanf("%d",&m);\r\n	getchar();\r\n	memset(t,0,sizeof(t));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&t[i][j]);\r\n			if(t[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&flag);\r\n		flag--;\r\n		t[m][i]=t[i][flag];\r\n	}\r\n\r\n	printf("%s\\n",t[m]);\r\n	return 0;\r\n}'),
(1099, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,a,j;\r\n	char s[109][109];\r\n	scanf("%d",&n);\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		getchar();\r\n		for(j=1;j<=100;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')\r\n				break;\r\n		}\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		scanf("%d",&a);\r\n		printf("%c\\n",s[i][a]);\r\n	}\r\n	return 0;\r\n}'),
(1100, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1101, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1102, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Woart Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1103, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 11 10 6 5");\r\n	return 0;\r\n}'),
(1104, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Dannie Woart Woart Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1105, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1106, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 75.5 9750.5");\r\n	return 0;\r\n}'),
(1107, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 90 290 1632 325947185950");\r\n	return 0;\r\n}'),
(1108, '#include<stdio.h>\r\nmain()\r\n{\r\n\r\nint a,b,i;\r\n\r\nfor(i=0;i<10;i++)\r\n{scanf("%d",&a); \r\n\r\n\r\nb=a%3;\r\n	printf("%d\\n",b);\r\n}\r\n}\r\n'),
(1109, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}\r\n'),
(1110, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1111, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 12 12 11 11");\r\n	return 0;\r\n}'),
(1112, '#include <stdio.h>\r\nint main()\r\n{\r\n\r\n   printf("13 12 11 14 12");\r\n  return 0;\r\n}'),
(1113, '#include "stdio.h"\r\n#include "time.h"\r\n#include "stdlib.h"\r\n#include "math.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	srand(time(NULL));\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}'),
(1114, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1115, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie ");\r\n	return 0;\r\n}'),
(1116, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1117, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4900");\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(1118, '#include<stdio.h>\r\n#include<string.h>\r\nint max(int a,int b)\r\n{\r\n	return (a>b)?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int asd[110][110];\r\n	int n,i,j,mx;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		memset(asd,0,sizeof(asd));\r\n		mx=0;\r\n\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				scanf("%d",&asd[i][j]);\r\n			}\r\n		}\r\n\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				asd[i][j]+=max(asd[i-1][j],asd[i-1][j-1]);\r\n			}\r\n		}\r\n\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			{\r\n				mx=max(mx,asd[n][j]);\r\n			}\r\n		}\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1119, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 2694 3458672");\r\n	return 0;\r\n}'),
(1120, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 46 7252");\r\n	return 0;\r\n}'),
(1121, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 51 7252");\r\n	return 0;\r\n}'),
(1122, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07609 0.13208");\r\n	return 0;\r\n}'),
(1123, '#include <stdio.h>\r\nint main()\r\n{\r\nint i,j,n;\r\nint a[100];\r\nwhile(scanf("%d",&n)!=EOF)\r\n{for(i=0;i<n;i++)\r\nscanf("%d",&a[i]);\r\n\r\nj=(n-1)/2;\r\n\r\nprintf("%d",a[j]);\r\n}\r\n}'),
(1124, '#include "stdio.h"\r\n#include "stdlib.h"\r\n#include "math.h"\r\nint main ()\r\n{\r\n	int a[]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	b=rand()+90;\r\n	b=b%15;\r\n	b=a[b];\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}'),
(1125, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint a;\r\nint f[200];\r\ndouble m,c;\r\n\r\nscanf("%d",&n);\r\n\r\nif (n<=50)\r\n{\r\n	for(i=0;i<2*n;i++)\r\n	{\r\n	scanf("%d",&f[i]);\r\n	\r\n	}\r\nscanf("%lf %lf",&m,&c);\r\n\r\nfor(i=0;i<2*n;i++)\r\n{\r\nif((f[i]>=m)&&(f[i+1]>=c))a++;\r\n}\r\nif(a>0)\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n}\r\n}'),
(1126, '#include "stdio.h"\r\n#include "time.h"\r\n#include "stdlib.h"\r\n#include "math.h"\r\nint main ()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int b;\r\n	srand(time(NULL));\r\n	b=rand()%15;\r\n	b=a[b];\r\n	printf("%d \\n",b);\r\n	return 0;\r\n}'),
(1127, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0 0 0 0 0");\r\n	return 0;\r\n}'),
(1128, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,a,j;\r\n	char s[109][109];\r\n	scanf("%d",&n);getchar();\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		\r\n		for(j=1;j<=100;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')\r\n				break;\r\n		}\r\n	}\r\n	for(i=1;i<=n;i++)\r\n	{\r\n		scanf("%d",&a);\r\n\r\n			printf("%c",s[i][a]);\r\n//		else if(i!=1)\r\n//			printf("%c",s[i][a-1]);\r\n	}\r\n	printf("\\n");\r\n	return 0;\r\n}'),
(1129, '#include <stdio.h>\r\nmain()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d",b);\r\n}'),
(1130, '#include <stdio.h>\r\nint main()\r\n{\r\n	int n,i;\r\n	int a[10];\r\n	scanf("%d",&n);\r\n	if(n%2==0)\r\n	printf("error");\r\n	for(i=0;i<n;i++)\r\n	scanf("%d",a[i]);\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(int j=1;j<n;j++)\r\n		if(j==n-1)\r\n		printf("%d",a[i]);\r\n		else{\r\n			if(a[i]!=a[j]) continue;\r\n			else break;\r\n		    }\r\n	}\r\n\r\n}\r\n	'),
(1131, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 175 182 668 ");\r\n	return 0;\r\n}'),
(1132, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("4  45 4852");\r\nreturn 0;\r\n}\r\n'),
(1133, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("18 11 14 11 12");\r\n	return 0;\r\n}'),
(1134, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 432 204120");\r\n	return 0;\r\n}'),
(1135, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1136, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1137, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n,a[100][100];\r\n	int i,j;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n\r\n			}\r\n\r\n		}\r\n\r\n		for(i=n-1;i>0;i--)\r\n		{\r\n			for(j=1;j<=n;j++)\r\n			{\r\n				if(a[i+1][j]>a[i+1][j+1])\r\n					a[i][j]+=a[i+1][j];\r\n				else\r\n					a[i][j]+=a[i+1][j+1];\r\n			}\r\n		}\r\n		printf("%d",a[1][1]);\r\n	}\r\n}'),
(1138, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1036 366539");\r\n	return 0;\r\n}'),
(1139, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 23");\r\n	return 0;\r\n}'),
(1140, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(1141, '#include <stdio.h>\r\nmain()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}'),
(1142, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 4302");\r\n	return 0;\r\n}'),
(1143, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}\r\n'),
(1144, '#include <stdio.h>\r\nint main()\r\n{\r\n	int k=0;\r\n	int n,t,s,i;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		k++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s=s^t;\r\n		}	\r\n		printf("Case #%d: %d\\n",k,s);\r\n	}\r\n	return 0;\r\n}'),
(1145, '#include <stdio.h>\r\nmain()\r\n{long a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%ld\\n",b);\r\n}'),
(1146, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 174 181 668");\r\n	return 0;\r\n}'),
(1147, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(1148, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("4 45 4900");\r\nreturn 0;\r\n}\r\n'),
(1149, '#include <stdio.h>\r\nmain()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d\\n",b);\r\n}'),
(1150, '\r\n#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char sp[110][110];\r\n	int m,i,j,tm;\r\n	scanf("%d",&m);\r\n	getchar();\r\n	memset(sp,0,sizeof(sp));\r\n	for(i=0;i<m;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&sp[i][j]);\r\n			if(sp[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<m;i++)\r\n	{\r\n		scanf("%d",&tm);\r\n		tm--;\r\n		sp[m][i]=sp[i][tm];\r\n	}\r\n\r\n	printf("%s\\n",sp[m]);\r\n\r\n}\r\n'),
(1151, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1938 1223982");\r\n	return 0;\r\n}'),
(1152, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1153, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 72 325 1611 318774305125");\r\n	return 0;\r\n}'),
(1154, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1155, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char e[100];\r\n	int r[100],sum=0;\r\n	int i=0,sum1=0,j;\r\n	int t[100];\r\n	int n;\r\n	scanf("%d",&n);\r\n	for(j=0;j<n;j++)\r\n	{\r\n		scanf("%s",&e);\r\n	\r\n		sum=0;\r\n		sum1=0;\r\n		for(i=0;i<100;i++)\r\n		{\r\n			switch(e[i])\r\n			{\r\n				case ''I'':r[i]=1,sum1++;continue;\r\n				case ''V'':r[i]=5,sum1++;continue;\r\n				case ''X'':r[i]=10,sum1++;continue;\r\n				case ''L'':r[i]=50,sum1++;continue;\r\n				case ''C'':r[i]=100,sum1++;continue;\r\n				default: r[i]=''\\0'';break;\r\n			}\r\n		}\r\n		if(sum1==1)printf("%d",r[0]);\r\n		else\r\n		{\r\n			sum=0;\r\n			for(i=0;i<sum1;i++)\r\n			{\r\n				if(r[i]>=r[i+1])\r\n				sum+=r[i];\r\n				else{\r\n					sum=sum+(r[i+1]-r[i]);\r\n					i++;\r\n				}\r\n			}	\r\n			t[j]=sum;\r\n		}\r\n		memset(e,0,100);\r\n		memset(r,0,100);\r\n	\r\n	}\r\n	for(j=0;j<n;j++)printf("%d\\n",t[j]);\r\n	return 0;\r\n}'),
(1156, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1157, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n,a[101][101];\r\n	int i,j;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)\r\n			\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n\r\n			}\r\n\r\n		}\r\n\r\n		for(i=n-1;i>0;i--)\r\n		{\r\n			for(j=1;j<=n;j++)\r\n			{\r\n				if(a[i+1][j]>a[i+1][j+1])\r\n					a[i][j]+=a[i+1][j];\r\n				else\r\n					a[i][j]+=a[i+1][j+1];\r\n			}\r\n		}\r\n		printf("%d\\n",a[1][1]);\r\n	}\r\n}'),
(1158, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int m,i,sum,t,max;\r\n	char ss[50];\r\n	scanf("%d",&m);\r\n	while(m--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&ss);\r\n		t=strlen(ss);\r\n		for(i=0;i<t;i++)\r\n		{\r\n			if(ss[i]==''I'')\r\n			{\r\n				ss[i]=1;\r\n				continue;\r\n			}\r\n			else if(ss[i]==''V'')\r\n			{\r\n				ss[i]=5;\r\n				continue;\r\n			}\r\n		else	if(ss[i]==''X'')\r\n			{\r\n				ss[i]=10;\r\n				continue;\r\n			}\r\n		else	if(ss[i]==''L'')\r\n			{\r\n				ss[i]=50;\r\n				continue;\r\n			}\r\n		else	if(ss[i]==''C'')\r\n			{\r\n				ss[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=t-1;i>=0;i--)\r\n		{\r\n			if(ss[i]>=max)sum=sum+ss[i];\r\n			else sum-=sum-ss[i];\r\n			if(max<ss[i])max=ss[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1159, '#include <stdio.h>\r\nint s[100000000];\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=1;i<n;i++)\r\n	{\r\n		s[i]=0;\r\n	}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s[t]++;\r\n			\r\n		}\r\n		for(i=1;i<n;i++)\r\n		{\r\n			if(s[i]%2==1)\r\n			{\r\n				printf("Case #%d: %d\\n",nn,i);\r\n				break;\r\n			}	\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(1160, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char y[100][100];\r\n	int a,b,c,d;\r\n	scanf("%d",&a);\r\n	getchar();\r\n	memset(y,0,sizeof(y));\r\n	for(b=0;b<a;b++)\r\n	{\r\n		for(c=0;;c++)\r\n		{\r\n			scanf("%c",&y[b][c]);\r\n			if(y[b][c]==''\\n'')break;\r\n		}\r\n	}\r\nfor(b=0;b<a;b++)\r\n{\r\n	scanf("%d",d);\r\n	d--;\r\n	y[a][b]=y[b][d];\r\n}\r\nprintf("%s\\n",y[a]);\r\nreturn 0;\r\n}'),
(1161, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 51 9508");\r\n	return 0;\r\n}'),
(1162, '#include <stdio.h>\r\nint s[100000];\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=1;i<n;i++)\r\n	{\r\n		s[i]=0;\r\n	}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s[t]++;\r\n			\r\n		}\r\n		for(i=1;i<n;i++)\r\n		{\r\n			if(s[i]%2==1)\r\n			{\r\n				printf("Case #%d: %d\\n",nn,i);\r\n				break;\r\n			}	\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(1163, '#include <stdio.h>\r\nmain()\r\n{int a,b;\r\nscanf("%d",&a);\r\nb=a%3;\r\nprintf("%d",b);\r\n}'),
(1164, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(1165, '#include <stdio.h>\r\nint a[101][101];\r\nint max(int a,int b)\r\n{\r\n	if(a>b)return a;\r\n	else return b;\r\n}\r\nint main()\r\n{\r\n	int sum,i,j;\r\n	int a[101][101];\r\n	int c,n;\r\n		scanf("%d",&n);\r\n		for(i=0;i<n;i++)\r\n		{\r\n			for(j=0;j<=i;j++)\r\n			{\r\n				scanf("%d",&a[i][j]);\r\n			}			\r\n		}\r\n		\r\n		for(i=n-1;i>0;i--)\r\n		{\r\n			for(j=0;j<i;j++)\r\n			{\r\n				a[i-1][j]=max(a[i][j]+a[i-1][j],a[i][j+1]+a[i-1][j]);		\r\n			}\r\n		}\r\n		printf("%d\\n",a[0][0]);\r\n	\r\n	return 0;\r\n}'),
(1166, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int m,i,sum,t,max;\r\n	char ss[50];\r\n	scanf("%d",&m);\r\n	while(m--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&ss);\r\n		t=strlen(ss);\r\n		for(i=0;i<t;i++)\r\n		{\r\n			if(ss[i]==''I'')\r\n			{\r\n				ss[i]=1;\r\n				continue;\r\n			}\r\n		 if(ss[i]==''V'')\r\n			{\r\n				ss[i]=5;\r\n				continue;\r\n			}	if(ss[i]==''X'')\r\n			{\r\n				ss[i]=10;\r\n				continue;\r\n			}\r\n		if(ss[i]==''L'')\r\n			{\r\n				ss[i]=50;\r\n				continue;\r\n		}\r\n		if(ss[i]==''C'')\r\n			{\r\n				ss[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=t-1;i>=0;i--)\r\n		{\r\n			if(ss[i]>=max)sum=sum+ss[i];\r\n			else sum-=sum-ss[i];\r\n			if(max<ss[i])max=ss[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1167, '#include<stdio.h>\r\n#include<string.h>\r\nint k=0;\r\nvoid add(char *a)\r\n{\r\n int i;k=strlen(a);\r\n for(i=0;i<k;i++)\r\n {\r\n 	a[i]=(a[i]-''0'')*2+''0'';\r\n }\r\n for(i=0;i<k;i++)\r\n {\r\n 	if((a[i]-''0'')>=10)\r\n 	{\r\n    a[i]=(a[i]-''0'')%10+''0'';\r\n 	if(a[i+1]==''\\0'')\r\n 	{a[i+1]=''1'';k++;}\r\n 	else\r\n 	a[i+1]+=1;\r\n    }\r\n }\r\n a[k]=''\\0'';\r\n}\r\nint main()\r\n{\r\n 	int a,i;\r\n 	\r\n 	while(scanf("%d",&a)!=EOF)\r\n 	{char s[1000]="1",b[1000];\r\n	 for(i=0;i<a;i++)\r\n	 	add(s);\r\n	 \r\n	 for(i=k-1;i>=0;i--)\r\n	 printf("%c",s[i]);\r\n	 printf("\\n");\r\n 	}\r\n	return 0;\r\n}'),
(1168, '#include<stdio.h>\r\nint main()\r\n{\r\n  int i,j,n,sum=0,a[100][100];\r\n  scanf("%d\\n",&n);\r\n  for(i=0;i<n;i++)\r\n  {\r\n    for(j=0;j<=i;j++)\r\n		scanf("%d",&a[i][j]);\r\n  }\r\n   for(i=0;i<n;i++)\r\n     \r\n	   \r\n   {\r\n       sum=sum+a[i][i];\r\n   }\r\n  printf("%d\\n",sum);\r\n  return 0;\r\n\r\n}'),
(1169, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int single,temp,temp1=1;\r\n	int i,n;\r\n	while(cin>>n)\r\n	{\r\n		single=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			cin>>temp;\r\n			single^=temp;\r\n		}\r\n		cout<<"Case #"<<temp1<<":"<<single<<endl;\r\n		temp1++;\r\n	}\r\n	return 0;\r\n}'),
(1170, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1171, '#include <stdio.h>\r\nmain()\r\n{int b;\r\nb=1644;\r\nprintf("%d\\n",b);\r\n}'),
(1172, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.14894 );\r\n	return 0;\r\n}'),
(1173, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("4 45 4851");\r\nreturn 0;\r\n}\r\n'),
(1174, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1175, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d", &a)!=EOF)\r\n	b=a%3;\r\n	printf("%d\\n",b);\r\n	return 0;\r\n}'),
(1176, '#include<stdio.h>\r\n#include<string.h>\r\nint k=0;\r\nvoid add(char *a)\r\n{\r\n int i;k=strlen(a);\r\n for(i=0;i<k;i++)\r\n {\r\n 	a[i]=(a[i]-''0'')*2+''0'';\r\n }\r\n for(i=0;i<k;i++)\r\n {\r\n 	if((a[i]-''0'')>=10)\r\n 	{\r\n    a[i]=(a[i]-''0'')%10+''0'';\r\n 	if(a[i+1]==''\\0'')\r\n 	{a[i+1]=''1'';k++;}\r\n 	else\r\n 	a[i+1]+=1;\r\n    }\r\n }\r\n a[k]=''\\0'';\r\n}\r\nint main()\r\n{\r\n 	int a,i;\r\n 	\r\n 	while(scanf("%d",&a)!=EOF)\r\n 	{if(a==0)\r\n 	{printf("1\\n");continue;}\r\n	 char s[1500]="1",b[1500];\r\n	 for(i=0;i<a;i++)\r\n	 	add(s);\r\n	 \r\n	 for(i=k-1;i>=0;i--)\r\n	 printf("%c",s[i]);\r\n	 printf("\\n");\r\n 	}\r\n	return 0;\r\n}'),
(1177, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.14894");\r\n	return 0;\r\n}'),
(1178, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1179, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(1180, '#include<stdio.h>\r\nint main()\r\n{\r\n  int i,j,n,sum=0,a[100][100];\r\n  scanf("%d\\n",&n);\r\n  for(i=0;i<n;i++)\r\n  {\r\n    for(j=0;j<=i;j++)\r\n		scanf("%d",&a[i][j]);\r\n  }\r\n   for(i=0;i<n;i++)\r\n     \r\n	   \r\n   {\r\n       sum=sum+a[i][i];\r\n   }\r\n  printf("%d\\n",sum+n);\r\n  return 0;\r\n\r\n}'),
(1181, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 14 12");\r\n	return 0;\r\n}'),
(1182, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,k,m,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(k=0;k<n;k++)\r\n	{\r\n		for(m=0;;m++)\r\n		{\r\n			scanf("%c",&s[k][m]);\r\n			if(s[k][m]==''\\n'')break;\r\n		}\r\n	}\r\n	for(k=0;k<n;k++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][k]=s[k][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(1183, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}'),
(1184, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(1185, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(1186, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(1187, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char x[100];\r\n	int y[100],sum=0;\r\n	int i=0,sum1=0,j;\r\n	int q[100];\r\n	int n;\r\n	scanf("%d",&n);\r\n	for(j=0;j<n;j++)\r\n	{\r\n		scanf("%s",&x);\r\n	\r\n		sum=0;\r\n		sum1=0;\r\n		for(i=0;i<100;i++)\r\n		{\r\n			switch(x[i])\r\n			{\r\n				case ''I'':y[i]=1,sum1++;continue;\r\n				case ''V'':y[i]=5,sum1++;continue;\r\n				case ''X'':y[i]=10,sum1++;continue;\r\n				case ''L'':y[i]=50,sum1++;continue;\r\n				case ''C'':y[i]=100,sum1++;continue;\r\n				default: y[i]=''\\0'';break;\r\n			}\r\n		}\r\n		if(sum1==1)printf("%d",y[0]);\r\n		else\r\n		{\r\n			sum=0;\r\n			for(i=0;i<sum1;i++)\r\n			{\r\n				if(y[i]>=y[i+1])\r\n				sum=sum+y[i];\r\n				else{\r\n					sum=sum+(y[i+1]-y[i]);\r\n					i++;\r\n				}\r\n			}	\r\n			q[j]=sum;\r\n		}\r\n		memset(x,0,100);\r\n		memset(y,0,100);\r\n	\r\n	}\r\n	for(j=0;j<n;j++)printf("%d\\n",q[j]);\r\n}\r\n'),
(1188, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 5001 32769 61728394 493827160");\r\n	return 0;\r\n}'),
(1189, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n    int single,temp,temp1=1;\r\n    int i,n;\r\n    while(cin>>n)\r\n    {\r\n        single=0;\r\n        for(i=0;i<n;i++)\r\n        {\r\n            cin>>temp;\r\n            single^=temp;\r\n        }\r\n        cout<<"Case #"<<temp1<<": "<<single<<endl;\r\n        temp1++;\r\n    }\r\n    return 0;\r\n}'),
(1190, '#include<stdio.h>\r\nint main()\r\n{\r\n  int i,j,n,sum=0,a[100][100];\r\n  scanf("%d\\n",&n);\r\n  for(i=0;i<n;i++)\r\n  {\r\n    for(j=0;j<=i;j++)\r\n		scanf("%d",&a[i][j]);\r\n  }\r\n   for(i=0;i<n;i++)\r\n     \r\n	   \r\n   {\r\n       sum=sum+a[i][0];\r\n   }\r\n  printf("%d\\n",sum);\r\n  return 0;\r\n\r\n}'),
(1191, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(1192, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Dannie Dannie Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1193, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int x,a,sum,t,max;\r\n	char ss[100];\r\n	scanf("%d",&x);\r\n	while(x--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&ss);\r\n		t=strlen(ss);\r\n		for(a=0;a<t;a++)\r\n		{\r\n			if(ss[a]==''I'')\r\n			{\r\n				ss[a]=1;\r\n				continue;\r\n			}\r\n			if(ss[a]==''V'')\r\n			{\r\n				ss[a]=5;\r\n				continue;\r\n			}\r\n			if(ss[a]==''X'')\r\n			{\r\n				ss[a]=10;\r\n				continue;\r\n			}\r\n			if(ss[a]==''L'')\r\n			{\r\n				ss[a]=50;\r\n				continue;\r\n			}\r\n			if(ss[a]==''C'')\r\n			{\r\n				ss[a]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(a=t-1;a>=0;a--)\r\n		{\r\n			if(ss[a]>=max)sum+=ss[a];\r\n			else sum-=ss[a];\r\n			if(max<ss[a])max=ss[a];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1194, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1195, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n;\r\n	int l[100];\r\n	double p[100];\r\n	int f[100];\r\n	int i;\r\n	{\r\n		while(~scanf("%d",&n))\r\n		{\r\n			if(n==0)printf("1\\n");\r\n			else\r\n			{\r\n				f[0]=0,f[1]=1;\r\n				for(i=0;i<n;i++)\r\n				{\r\n					f[i+2]=f[i+1]+f[i];//求出fn \r\n				}   \r\n				p[n]=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/(f[i+1]+f[i-1]);		\r\n				printf("%d\\n",(int)p[n]);\r\n			}\r\n\r\n		}\r\n\r\n	}\r\n\r\n	return 0;\r\n}'),
(1196, '#include<stdio.h>\r\nint main()\r\n{\r\n	int c=0,n,s,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		c++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			s^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n	}\r\n	return 0;\r\n}'),
(1197, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 11 13 22");\r\n	return 0;\r\n}'),
(1198, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1199, '#include <stdio.h>\r\n#include <math.h>\r\nint main()\r\n{\r\n		int n,a;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		a=int(pow(2,n));\r\n		printf("%d\\n",a);	\r\n	}\r\n	return 0;\r\n}'),
(1200, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 11 13 17");\r\n	return 0;\r\n}'),
(1201, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(1202, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n;\r\n	int l[100];\r\n	double p[100];\r\n	int f[100];\r\n	int i;\r\n	{\r\n		while(~scanf("%d",&n)&&n<600)\r\n		{\r\n			if(n==0)printf("1\\n");\r\n			else\r\n			{\r\n				f[0]=0,f[1]=1;\r\n				for(i=0;i<n;i++)\r\n				{\r\n					f[i+2]=f[i+1]+f[i];//求出fn \r\n				}   \r\n				p[n]=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/(f[i+1]+f[i-1]);		\r\n				printf("%d\\n",(int)p[n]);\r\n			}\r\n\r\n		}\r\n\r\n	}\r\n\r\n	return 0;\r\n}'),
(1203, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1204, '#include<stdio.h>\r\nint main()\r\n{\r\n	int acc=0,n,scc,i,tmpcc;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		acc++;\r\n		scc=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmpcc);\r\n			scc^=tmpcc;\r\n		}\r\n		printf("Case #%d: %d\\n",acc,scc);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1205, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("12 1644 967680");\r\n	return 0;\r\n}'),
(1206, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Woart Dannie Woart Dannie ");\r\n	return 0;\r\n}'),
(1207, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1208, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1209, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	int a,b;\r\n	while(scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(1210, 'int main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1211, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 9653");\r\n	return 0;\r\n}'),
(1212, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1213, '#include<stdio.h>\r\nvoid main()\r\n{\r\n	long int a[3],i;\r\n	for(i=0;i<3;i++)\r\n		scanf("%d",&a[i]);\r\n	for(i=0;i<3;i++)\r\n		printf("%d\\n",a[i]%3);\r\n}'),
(1214, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Woart Woart");\r\n	return 0;\r\n}\r\n'),
(1215, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 50 9702");\r\n	return 0;\r\n}'),
(1216, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("0.07071 0.13208");\r\nreturn 0;\r\n}\r\n'),
(1217, 'int main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1218, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	long a,b;\r\n	while(scanf("%d",&a))\r\n	{   b=a%3;\r\n		printf("%ld\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(1219, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827160");\r\n	return 0;\r\n}'),
(1220, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 16 12");\r\n	return 0;\r\n}'),
(1221, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	long a,b;\r\n	while(~scanf("%d",&a))\r\n	{   b=a%3;\r\n		printf("%ld\\n",b);\r\n	}\r\n	return 0;\r\n}'),
(1222, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,a,F[100],L;\r\n	double final;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			final=1;\r\n		}\r\n		else\r\n		{\r\n			for(a=2;a<n+2;a++)\r\n			{\r\n				F[a]=F[a-1]+F[a-2];\r\n			}\r\n			L=F[n-1]+F[n+1];\r\n			for(a=0;a<n;a++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			final=(x+y)/L;\r\n		}\r\n		cout<<final<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1223, '#include <stdio.h>\r\nint s[100000];\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=1;i<=n;i++)\r\n	{\r\n		s[i]=0;\r\n	}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s[t]++;\r\n			\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			if(s[i]%2==1)\r\n			{\r\n				printf("Case #%d: %d\\n",nn,i);\r\n				break;\r\n			}	\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(1224, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1225, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    int n;\r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n        char a[200]={1};\r\n        char b[200]={0};\r\n        int i=1;\r\n        int j;\r\n        while(n--)\r\n        {\r\n             \r\n            for(j=0;j<i;j++)\r\n            {\r\n                a[j]=a[j]*2;\r\n            }\r\n            for(j=0;j<i;j++)\r\n            {\r\n                b[j]=a[j]/10;\r\n                a[j]=a[j]%10;\r\n                a[j+1]=a[j+1]+b[j];\r\n            }\r\n            if(a[i])\r\n                i++;\r\n        }\r\n        int c=strlen(a);\r\n        for(j=i-1;j>=0;j--)\r\n            printf("%d",a[j]);\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}'),
(1226, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1227, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 393827161 ");\r\n	return 0;\r\n}\r\n'),
(1228, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1229, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(1230, '#include <stdio.h>\r\nint s[100000000];\r\nint main ()\r\n{\r\n	int n,i,t;\r\n	int nn=1;\r\n	\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=1;i<=n;i++)\r\n	{\r\n		s[i]=0;\r\n	}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			scanf("%d",&t);\r\n			s[t]++;\r\n			\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			if(s[i]%2==1)\r\n			{\r\n				printf("Case #%d: %d\\n",nn,i);\r\n				break;\r\n			}	\r\n		}\r\n		nn++;\r\n	}\r\n	return 0;\r\n}'),
(1231, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int c=1,n,t,i,a;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n			t=s^a;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n		c++;\r\n	}\r\n	return 0;\r\n}'),
(1232, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[100],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1233, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannue Woart Woart Woart");\r\n	return 0;\r\n}'),
(1234, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1235, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 49 9702");\r\n	return 0;\r\n}'),
(1236, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(1237, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int c=1,n,t,i,a;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		t=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&a);\r\n			t=t^a;\r\n		}\r\n		printf("Case #%d: %d\\n",c,t);\r\n		c++;\r\n	}\r\n	return 0;\r\n}'),
(1238, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1938 1464390");\r\n	return 0;\r\n}'),
(1239, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}\r\n'),
(1240, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Woart");\r\n	return 0;\r\n}'),
(1241, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int n;\r\n	int l[100];\r\n	double p[100];\r\n	int f[100];\r\n	int i;\r\n	{\r\n		while(~scanf("%d",&n)&&n<60)\r\n		{\r\n			if(n==0)printf("1\\n");\r\n			else\r\n			{\r\n				f[0]=0,f[1]=1;\r\n				for(i=0;i<n;i++)\r\n				{\r\n					f[i+2]=f[i+1]+f[i];\r\n				}   \r\n				p[n]=(pow(1+sqrt(5),n)+pow(1-sqrt(5),n))/(f[i+1]+f[i-1]);		\r\n				printf("%d\\n",(int)p[n]);\r\n			}\r\n\r\n		}\r\n\r\n	}\r\n\r\n	return 0;\r\n}'),
(1242, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1243, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 11 14 14 12");\r\n	return 0;\r\n}'),
(1244, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31496");\r\n	return 0;\r\n}'),
(1245, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int g)\r\n{\r\n	return a>g?a:g;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1246, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1247, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1248, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    int n;\r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n        char a[200]={1};\r\n        char b[200]={0};\r\n        int i=1;\r\n        int j;\r\n        while(n--)\r\n        {\r\n             \r\n            for(j=0;j<i;j++)\r\n            {\r\n                a[j]=a[j]*2;\r\n            }\r\n            for(j=0;j<i;j++)\r\n            {\r\n                b[j]=a[j]/10;\r\n                a[j]=a[j]%10;\r\n                a[j+1]=a[j+1]+b[j];\r\n            }\r\n            if(a[i])\r\n                i++;\r\n        }\r\n        int c=strlen(a);\r\n        for(j=i-1;j>=0;j--)\r\n            printf("%d",a[j]);\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}'),
(1249, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1250, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1251, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nstruct Point{\r\n	double x;\r\n	double y;\r\n};\r\nPoint L(Point x, Point y)\r\n{\r\n	Point a;\r\n	a.x = x.x - y.x;\r\n	a.y = x.y - y.y;\r\n	return a;\r\n}\r\ndouble D(Point x, Point y){\r\n	return sqrt((x.x-y.x)*(x.x-y.x) + (x.y-y.y)*(x.y-y.y));\r\n}\r\ndouble S(Point x, Point y)\r\n{\r\n	return abs((x.x*y.y - x.y*y.x)/2);\r\n}\r\nbool Isat(Point x, Point a)\r\n{\r\n	return (x.x==a.x)&&(x.y==a.y);\r\n}\r\nbool Ison(Point x, Point a, Point b)\r\n{\r\n	if (Isat(x,a)||Isat(x,b))\r\n		return 1;\r\n	return D(x,a) + D(x,b) <= D(a,b);\r\n}\r\nbool Isin(Point x, Point a, Point b, Point c)\r\n{\r\n	if (Ison(x,a,b)||Ison(x,b,c)||Ison(x,a,c))\r\n		return 1;\r\n	Point Lxa = L(x,a), Lxc = L(x,c), Lab = L(a,b), Lbc = L(b,c);\r\n	return S(Lab,Lxa)+ S(Lbc,Lxc) + S(Lxa,Lxc) <= S(Lab,Lbc);\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	bool temp;\r\n	Point ans[55];\r\n	int step = 1;\r\n	while (cin>>n)\r\n	{\r\n		for (int i = 1; i <= n; ++i)\r\n		{\r\n			scanf("%lf%lf",&(ans[i].x),&(ans[i].y));\r\n		}\r\n		scanf("%lf%lf",&(ans[0].x),&(ans[0].y));\r\n		if (n == 1)\r\n		{\r\n			if (Isat(ans[0],ans[1]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 2){\r\n			if (Ison(ans[0],ans[1],ans[2]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 3){\r\n			if (Isin(ans[0],ans[1],ans[2],ans[3]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else{\r\n			temp = false;\r\n			for (int i = 2; i < n; ++i)\r\n			{\r\n				if(temp == true)\r\n					break;\r\n				for (int j = i; j <= n; ++j)\r\n				{\r\n					if (Isin(ans[0],ans[1],ans[i],ans[j]))\r\n					{\r\n						temp = true;\r\n						break;\r\n					}\r\n				}\r\n			}	\r\n		}\r\n		\r\n		cout<<"Case #"<<step++<<": ";\r\n		if (temp == true)\r\n			cout<<"YES"<<endl;\r\n		else\r\n			cout<<"NO"<<endl;\r\n	}\r\n}'),
(1252, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int g)\r\n{\r\n	return a>g?a:g;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1253, '#include <stdio.h>\r\nint main()\r\n{\r\n	int a,b;\r\n	while(~scanf("%d", &a))\r\n	{b=a%3;\r\n	printf("%d\\n",b);}\r\n	return 0;\r\n}'),
(1254, '#include<iostream>\r\n#include<math.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,a,F[600],L;\r\n	double final;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			final=1;\r\n		}\r\n		else\r\n		{\r\n			for(a=2;a<n+2;a++)\r\n			{\r\n				F[a]=F[a-1]+F[a-2];\r\n			}\r\n			L=F[n-1]+F[n+1];\r\n			for(a=0;a<n;a++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			final=(x+y)/L;\r\n		}\r\n		cout<<final<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1255, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 9900 65280 123445677 987622895 ");\r\n	return 0;\r\n}'),
(1256, '#include<stdio.h>\r\nint main()\r\n{\r\n	//freopen("in.txt","r",stdin);\r\n	int n,sum,i;\r\n	int b[1000],e;\r\n	char a,c;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	while(n--)\r\n	{\r\n     sum=0;\r\n	 for(i=0;;)\r\n	 {\r\n		scanf("%c",&a);\r\n		if(a==''\\n'')\r\n			break;\r\n		if(a==''I'')\r\n			b[i]=1;\r\n		else if(a==''V'')\r\n			b[i]=5;\r\n		else if(a==''X'')\r\n			b[i]=10;\r\n		else if(a==''L'')\r\n			b[i]=50;\r\n		else if(a==''C'')\r\n			b[i]=100;\r\n\r\n		if(i>0)\r\n		{\r\n		  if(b[i]>b[i-1])\r\n		  {\r\n			sum=e+(-b[i-1]+b[i]);\r\n		  }\r\n		}\r\n		i++;\r\n		scanf("%c",&c);\r\n		if(c==''\\n'')\r\n			break;\r\n		if(c==''I'')\r\n			b[i]=1;\r\n		else if(c==''V'')\r\n			b[i]=5;\r\n		else if(c==''X'')\r\n			b[i]=10;\r\n		else if(c==''L'')\r\n			b[i]=50;\r\n		else if(c==''C'')\r\n			b[i]=100;\r\n		e=b[i-1];\r\n		if(b[i]<=b[i-1])\r\n		{\r\n			sum=sum+b[i]+b[i-1];\r\n		}\r\n		if(b[i]>b[i-1])\r\n		{\r\n			sum=sum+(-b[i-1]+b[i]);\r\n		}\r\n		i++;\r\n	 }\r\n	 printf("%d\\n",sum);\r\n\r\n	}\r\n\r\n	return 0;\r\n}'),
(1257, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 36 81");\r\n	return 0;\r\n}'),
(1258, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 12 14 22");\r\n	return 0;\r\n}'),
(1259, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1260, '#include <stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(1261, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(1262, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1263, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1264, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dainnie Dainnie");\r\n	return 0;\r\n}'),
(1265, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[601],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1266, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dainnie Dainnie Woart Woart");\r\n	return 0;\r\n}'),
(1267, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 20");\r\n	return 0;\r\n}'),
(1268, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.07071");\r\n	return 0;\r\n}'),
(1269, '#include <stdio.h>\r\n#include <math.h>\r\n\r\ndouble toth(double x1, double y1, double x0, double y0)\r\n{\r\n	double x=x1-x0,y=y1-y0;\r\n	return atan(y/x)+((x<0)*3.14159);\r\n}\r\n\r\nint main()\r\n{\r\n	int i,j,n,flag,cas=0;\r\n	double x[50],y[50],th[50],x0,y0,temp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=0;i<n;++i)\r\n			scanf("%lf%lf",&x[i],&y[i]);\r\n		scanf("%lf%lf",&x0,&y0);\r\n		for(i=0;i<n;++i)\r\n			th[i]=toth(x[i],y[i],x0,y0);\r\n		for(i=0;i<n;++i)\r\n			for(j=i+1;j<n;++j)\r\n				if(th[i]>th[j])\r\n				{\r\n					temp=th[i];\r\n					th[i]=th[j];\r\n					th[j]=temp;\r\n				}\r\n		flag=1;\r\n		//for(i=0;i<n;++i)\r\n		//printf("%lf\\n",th[i]);\r\n		for(i=1;i<n;++i)\r\n			if(th[i]-th[i-1]>3.1416)\r\n				flag=0;\r\n		if(th[n-1]-3.1415<th[0])\r\n			flag=0;\r\n		printf((flag?"Case #%d: YES\\n":"Case #%d: NO\\n"),++cas);\r\n	}\r\n	return 0;\r\n}'),
(1270, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,d,j;\r\ncin>>n;\r\nint a[n];\r\nfor(i=0;i<n;i++)\r\ncin>>a[i];\r\nint b;\r\nfor(i=0;i<n;i++)\r\n{\r\n	d=1;\r\n	for(j=0;j<n;j++)\r\n	{\r\n		if(i!=j)\r\n		{\r\n			if(a[i]==a[j])\r\n			d=0;\r\n		}\r\n	}\r\n	if(d==1) break;\r\n}\r\ncout<<a[i]<<endl;\r\nreturn 0;\r\n}\r\n\r\n	'),
(1271, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dainnie Dainnie Woart");\r\n	return 0;\r\n}'),
(1272, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("5 11 21 43 85");\r\n	return 0;\r\n}'),
(1273, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 41152263 329218107");\r\n	return 0;\r\n}'),
(1274, '#include<stdio.h>\r\nint main()\r\n{\r\n	int g=0,n,s,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		g++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			s^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",g,s);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1275, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1276, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dainnie Woart Dainnie Woart");\r\n	return 0;\r\n}'),
(1277, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 10 12 14 22");\r\n	return 0;\r\n}'),
(1278, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1279, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i,d,j;\r\ncin>>n;\r\nint a[n];\r\nfor(i=0;i<n;i++)\r\ncin>>a[i];\r\nint b;\r\nfor(i=0;i<n;i++)\r\n{\r\n	d=1;\r\n	for(j=0;j<n;j++)\r\n	{\r\n		if(i!=j)\r\n		{\r\n			if(a[i]==a[j])\r\n			d=0;\r\n		}\r\n	}\r\n	if(d==1) break;\r\n}\r\ncout<<" "<<a[i]<<endl;\r\nreturn 0;\r\n}\r\n'),
(1280, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dainnie Woart Woart Dainnie");\r\n	return 0;\r\n}'),
(1281, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 4900");\r\n	return 0;\r\n}'),
(1282, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nint main ()\r\n{\r\n	char c;\r\n	int n,sum,j,i,k,a[400],m;\r\n	scanf("%d%*c",&m);\r\n	while(m--)\r\n	{\r\n	sum=0;i=0;\r\n	while((c=getchar())!=''\\n'')\r\n	{\r\n		if(c==''I''){a[i]=1;i++;}\r\n		else if(c==''V''){a[i]=5;i++;}\r\n		else if(c==''X''){a[i]=10;i++;}\r\n		else if(c==''L''){a[i]=50;i++;}\r\n		else if(c==''C''){a[i]=100;i++;}\r\n	}\r\n\r\n	for(j=0;j<i-1;j++)\r\n	{\r\n		for(k=j+1;k<i;k++)\r\n		{\r\n			if(a[j]<a[k])\r\n				a[j]=-a[j];\r\n		}\r\n	}\r\n\r\n	for(j=0;j<i;j++)\r\n	\r\n	{\r\n		sum+=a[j];\r\n	}\r\n\r\n	printf("%d\\n",sum);\r\n	\r\n\r\n	}\r\n	return 0;\r\n}'),
(1283, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint max(int a,int b)\r\n{\r\n	return a>b?a:b;\r\n}\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,mx;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		memset(f,0,sizeof(f));\r\n		mx=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++) f[i][j]+=max(f[i-1][j],f[i-1][j-1]);\r\n		}\r\n		for(i=1;i<=n;i++)mx=max(mx,f[n][i]);\r\n		printf("%d\\n",mx);\r\n	}\r\n	return 0;\r\n}'),
(1284, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1285, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n'),
(1286, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1287, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1288, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(1289, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 5001 32769 61728394 493827160");\r\n	return 0;\r\n}'),
(1290, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,t;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	    for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	        for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&t);\r\n		t--;\r\n		s[n][i]=s[i][t];\r\n	}\r\n\r\n          	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(1291, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}\r\n'),
(1292, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1293, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1294, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("12 42 90");\r\n	return 0;\r\n}'),
(1295, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 8230453 658436214");\r\n	return 0;\r\n}'),
(1296, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1297, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1298, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 2001 0 0 0");\r\n	return 0;\r\n}'),
(1299, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Woart");\r\n	return 0;\r\n}'),
(1300, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 9604");\r\n	return 0;\r\n}'),
(1301, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nstruct Point{\r\n	double x;\r\n	double y;\r\n};\r\nbool Exp(double a, double b)\r\n{\r\n	return abs(a-b) < 0.0000001;\r\n}\r\nPoint L(Point x, Point y)\r\n{\r\n	Point a;\r\n	a.x = x.x - y.x;\r\n	a.y = x.y - y.y;\r\n	return a;\r\n}\r\ndouble D(Point x, Point y){\r\n	return sqrt((x.x-y.x)*(x.x-y.x) + (x.y-y.y)*(x.y-y.y));\r\n}\r\ndouble S(Point x, Point y)\r\n{\r\n	return abs((x.x*y.y - x.y*y.x)/2);\r\n}\r\nbool Isat(Point x, Point a)\r\n{\r\n	return (x.x==a.x)&&(x.y==a.y);\r\n}\r\nbool Ison(Point x, Point a, Point b)\r\n{\r\n	if (Isat(x,a)||Isat(x,b))\r\n		return 1;\r\n	return Exp(D(x,a) + D(x,b), D(a,b));\r\n}\r\nbool Isin(Point x, Point a, Point b, Point c)\r\n{\r\n	if (Ison(x,a,b)||Ison(x,b,c)||Ison(x,a,c))\r\n		return 1;\r\n	Point Lxa = L(x,a), Lxc = L(x,c), Lab = L(a,b), Lbc = L(b,c);\r\n	return Exp(S(Lab,Lxa)+ S(Lbc,Lxc) + S(Lxa,Lxc), S(Lab,Lbc));\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	bool temp;\r\n	Point ans[55];\r\n	int step = 1;\r\n	while (cin>>n)\r\n	{\r\n		for (int i = 1; i <= n; ++i)\r\n		{\r\n			scanf("%lf%lf",&(ans[i].x),&(ans[i].y));\r\n		}\r\n		scanf("%lf%lf",&(ans[0].x),&(ans[0].y));\r\n		if (n == 1)\r\n		{\r\n			if (Isat(ans[0],ans[1]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 2){\r\n			if (Ison(ans[0],ans[1],ans[2]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 3){\r\n			if (Isin(ans[0],ans[1],ans[2],ans[3]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else{\r\n			temp = false;\r\n			for (int i = 2; i < n; ++i)\r\n			{\r\n				if(temp == true)\r\n					break;\r\n				for (int j = i; j <= n; ++j)\r\n				{\r\n					if (Isin(ans[0],ans[1],ans[i],ans[j]))\r\n					{\r\n						temp = true;\r\n						break;\r\n					}\r\n				}\r\n			}	\r\n		}\r\n		\r\n		cout<<"Case #";\r\n		cout<<step<<": ";\r\n		step++;\r\n		if (temp == true)\r\n			cout<<"YES"<<endl;\r\n		else\r\n			cout<<"NO"<<endl;\r\n	}\r\n}'),
(1302, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 170");\r\n	return 0;\r\n}'),
(1303, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 10200 31400");\r\n	return 0;\r\n}'),
(1304, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(1305, '#include <stdio.h>\r\nint main()\r\n{\r\n	int c=0;\r\n	int n,a;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		int sum=0;\r\n		while(n--)\r\n		{\r\n			scanf("%d",&a);\r\n			sum^=a;\r\n		}\r\n		printf("Case#%d:%d\\n",++c,sum);\r\n		\r\n	}\r\n	return 0;\r\n}'),
(1306, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1307, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("10 10000 32767 61728394 493827160");\r\nreturn 0;\r\n}\r\n'),
(1308, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 9900 62580 123445678 987622895");\r\n	return 0;\r\n}'),
(1309, '#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int i,n;\r\n	long s;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n	   printf("%ld\\n",s=pow(2,n));\r\n	}\r\n	return 0;\r\n}'),
(1310, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char acc[100];\r\n	int bcc[100],sum=0;\r\n	int i=0,sum1=0,j;\r\n	int c[100];\r\n	int n;\r\n	scanf("%d",&n);\r\n	for(j=0;j<n;j++)\r\n	{\r\n		scanf("%s",&acc);\r\n	\r\n		sum=0;\r\n		sum1=0;\r\n		for(i=0;i<100;i++)\r\n		{\r\n			switch(acc[i])\r\n			{\r\n				case ''I'':bcc[i]=1,sum1++;continue;\r\n				case ''V'':bcc[i]=5,sum1++;continue;\r\n				case ''X'':bcc[i]=10,sum1++;continue;\r\n				case ''L'':bcc[i]=50,sum1++;continue;\r\n				case ''C'':bcc[i]=100,sum1++;continue;\r\n				default: bcc[i]=''\\0'';break;\r\n			}\r\n		}\r\n		if(sum1==1)printf("%d",bcc[0]);\r\n		else\r\n		{\r\n			sum=0;\r\n			for(i=0;i<sum1;i++)\r\n			{\r\n				if(bcc[i]>=bcc[i+1])\r\n				sum+=bcc[i];\r\n				else{\r\n					sum=sum+(bcc[i+1]-bcc[i]);\r\n					i++;\r\n				}\r\n			}	\r\n			c[j]=sum;\r\n		}\r\n		memset(acc,0,100);\r\n		memset(bcc,0,100);\r\n	\r\n	}\r\n	for(j=0;j<n;j++)printf("%d\\n",c[j]);\r\n	return 0;\r\n}\r\n'),
(1311, '#include <stdio.h>\r\nint main()\r\n{\r\n	int c=0;\r\n	int n,a;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		int sum=0;\r\n		while(n--)\r\n		{\r\n			scanf("%d",&a);\r\n			sum^=a;\r\n		}\r\n		printf("Case #%d: %d\\n",++c,sum);\r\n		\r\n	}\r\n	return 0;\r\n}'),
(1312, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 12 10 14 7 5");\r\n	return 0;\r\n}'),
(1313, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Woart");\r\n	return 0;\r\n}'),
(1314, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 3000 19661 37037037 296296297");\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(1315, '#include <stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n	int i,n;\r\n	double s;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n	   printf("%.0lf\\n",s=pow(2,n));\r\n	}\r\n	return 0;\r\n}'),
(1316, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1317, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1318, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31495");\r\n	return 0;\r\n}'),
(1319, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827160");\r\n	return 0;\r\n}'),
(1320, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a,x;\r\n	int a[i][j];\r\n	scanf("%d",&x);\r\n	for(i=1;i<x;i++)\r\n	    {\r\n		    for(j=1;j<i;j++)\r\n	           {\r\n		          scanf("%d",&a[i][j]);\r\n 	            }\r\n	    }\r\n 	    for(i=x;i>0;i--)\r\n 	        {\r\n			 for(j=1;j<x;j++)\r\n 	            {\r\n        	 	if(a[i][j]>a[i][j+1])\r\n        	 	a[i-1][j]=a[i-1][j]+a[i][j];\r\n        	 	else\r\n        	 	a[i-1][j]=a[i-1][j]+a[i][j+1];\r\n        	     }\r\n 	        }\r\n        	 printf("%d",a[1][1]);\r\n        	 return 0;\r\n}'),
(1321, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("12 11 16 11 12");\r\n	return 0;\r\n}'),
(1322, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 7 13 15 21");\r\n	return 0;\r\n}'),
(1323, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.66667 0.08333");\r\n	return 0;\r\n}'),
(1324, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1325, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1326, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 42 86 171");\r\n	return 0;\r\n}'),
(1327, '#include <iostream>\r\nint main ()\r\n{\r\nint a=15;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1328, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nint main ()\r\n{\r\n	char c;\r\n	int n,sum,j,i,k,a[400],m;\r\n	scanf("%d%*c",&m);\r\n	while(m--)\r\n	{\r\n	sum=0;i=0;\r\n	while((c=getchar())!=''\\n'')\r\n	{\r\n		if(c==''I''){a[i]=1;i++;}\r\n		else if(c==''V''){a[i]=5;i++;}\r\n		else if(c==''X''){a[i]=10;i++;}\r\n		else if(c==''L''){a[i]=50;i++;}\r\n		else if(c==''C''){a[i]=100;i++;}\r\n	}\r\n\r\n	for(j=0;j<i-1;j++)\r\n	{\r\n		for(k=j+1;k<i;k++)\r\n		{\r\n			if(a[j]<a[k])\r\n			{\r\n				a[j]=-a[j];\r\n				break;\r\n			}\r\n		}\r\n	}\r\n\r\n	for(j=0;j<i;j++)\r\n	\r\n	{\r\n		sum+=a[j];\r\n	}\r\n\r\n	printf("%d\\n",sum);\r\n	\r\n\r\n	}\r\n	return 0;\r\n}'),
(1329, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1330, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		getchar();\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{\r\n				s[i]=1;\r\n				continue;\r\n			}\r\n			if(s[i]==''V'')\r\n			{\r\n				s[i]=5;\r\n				continue;\r\n			}\r\n			if(s[i]==''X'')\r\n			{\r\n				s[i]=10;\r\n				continue;\r\n			}\r\n			if(s[i]==''L'')\r\n			{\r\n				s[i]=50;\r\n				continue;\r\n			}\r\n			if(s[i]==''C'')\r\n			{\r\n				s[i]=100;\r\n				continue;\r\n			}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=max)sum+=s[i];\r\n			else sum-=s[i];\r\n			if(max<s[i])max=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(1331, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf(" Woart Woart Dannie Woart Woart Woart");\r\n	return 0;\r\n}'),
(1332, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=15;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1333, '#include <stdio.h>\r\nint main()\r\n{\r\n\r\n	printf("14 13 12 15 13");\r\n	return 0;\r\n}'),
(1334, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("7 9900 62580 123445678 987622895");\r\n	return 0;\r\n}'),
(1335, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1336, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1337, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=1999;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1338, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nstruct Point{\r\n	double x;\r\n	double y;\r\n};\r\nbool Exp(double a, double b)\r\n{\r\n	return abs(a-b) < 0.0000001;\r\n}\r\nPoint L(Point x, Point y)\r\n{\r\n	Point a;\r\n	a.x = x.x - y.x;\r\n	a.y = x.y - y.y;\r\n	return a;\r\n}\r\ndouble D(Point x, Point y){\r\n	return sqrt((x.x-y.x)*(x.x-y.x) + (x.y-y.y)*(x.y-y.y));\r\n}\r\ndouble S(Point x, Point y)\r\n{\r\n	return abs((x.x*y.y - x.y*y.x)/2);\r\n}\r\nbool Isat(Point x, Point a)\r\n{\r\n	return (x.x==a.x)&&(x.y==a.y);\r\n}\r\nbool Ison(Point x, Point a, Point b)\r\n{\r\n	if (Isat(x,a)||Isat(x,b))\r\n		return 1;\r\n	return Exp(D(x,a) + D(x,b), D(a,b));\r\n}\r\nbool Isin(Point x, Point a, Point b, Point c)\r\n{\r\n	if (Ison(x,a,b)||Ison(x,b,c)||Ison(x,a,c))\r\n		return 1;\r\n	else if(Ison(a,b,c)||Ison(b,a,c)||Ison(c,a,b))\r\n	{\r\n		return 0;\r\n	}\r\n	Point Lxa = L(x,a), Lxc = L(x,c), Lab = L(a,b), Lbc = L(b,c);\r\n	double p = S(Lab,Lxa)+ S(Lbc,Lxc) + S(Lxa,Lxc);\r\n	double q = S(Lab,Lbc);\r\n	cout<<p<<endl;\r\n	cout<<q<<endl;\r\n	return Exp(p,q);\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	bool temp;\r\n	Point ans[55];\r\n	int step = 1;\r\n	while (cin>>n)\r\n	{\r\n		for (int i = 1; i <= n; ++i)\r\n		{\r\n			scanf("%lf%lf",&(ans[i].x),&(ans[i].y));\r\n		}\r\n		scanf("%lf%lf",&(ans[0].x),&(ans[0].y));\r\n		if (n == 1)\r\n		{\r\n			if (Isat(ans[0],ans[1]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 2){\r\n			if (Ison(ans[0],ans[1],ans[2]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 3){\r\n			if (Isin(ans[0],ans[1],ans[2],ans[3]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else{\r\n			temp = false;\r\n			for (int i = 2; i < n; ++i)\r\n			{\r\n				if(temp == true)\r\n					break;\r\n				for (int j = i; j <= n; ++j)\r\n				{\r\n					if (Isin(ans[0],ans[1],ans[i],ans[j]))\r\n					{\r\n						temp = true;\r\n						break;\r\n					}\r\n				}\r\n			}	\r\n		}\r\n		\r\n		cout<<"Case #";\r\n		cout<<step<<": ";\r\n		step++;\r\n		if (temp == true)\r\n			cout<<"YES"<<endl;\r\n		else\r\n			cout<<"NO"<<endl;\r\n	}\r\n}'),
(1339, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n	double a=1;\r\n	int plus=0;\r\n	char str[600];\r\n	str[599]=''1'';\r\n\r\n	for(int i=0;i<599;i++)\r\n	{\r\n		str[i]=''0'';\r\n	}\r\n	for(int i=0;i<pow;i++)\r\n	{\r\n		for(int j=599;j>=0;j--)\r\n		{\r\n			int tmp=0;\r\n			tmp=(str[j]-48)*2%10+plus;\r\n			plus=(str[j]-48)*2/10;\r\n			str[j]=tmp+48;\r\n		}\r\n	}\r\n	int index=0;\r\n	while(str[index]==''0'')\r\n	index++;\r\n	for(int i=index;i<600;i++)\r\n	{\r\n		printf("%c",str[i]);\r\n	}\r\n	printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1340, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 86 171");\r\n	return 0;\r\n}'),
(1341, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=0;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1342, '# include <stdio.h>\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	printf("%d\\n",a[6]);\r\n	return 0;	\r\n}'),
(1343, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("12147450");\r\n	return 0;\r\n}'),
(1344, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=1735;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1345, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 13 12");\r\n	return 0;\r\n}'),
(1346, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 21");\r\n	return 0;\r\n}'),
(1347, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 10 9 6 5");\r\n	return 0;\r\n}'),
(1348, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=2012;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1349, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(1350, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	int n=0,i;\r\n	cin>>n;\r\n	for(i=0;i<15;i++)\r\n	{\r\n		if(n==a[i])\r\n		{\r\n			cout<<a[i]<<endl;\r\n				break;\r\n		}\r\n	}\r\n	return 0;\r\n}'),
(1351, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=2046;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1352, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.06604");\r\n	return 0;\r\n}'),
(1353, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nstruct Point{\r\n	double x;\r\n	double y;\r\n};\r\nbool Exp(double a, double b)\r\n{\r\n	return abs(a-b) < 0.0000001;\r\n}\r\nPoint L(Point x, Point y)\r\n{\r\n	Point a;\r\n	a.x = x.x - y.x;\r\n	a.y = x.y - y.y;\r\n	return a;\r\n}\r\ndouble D(Point x, Point y){\r\n	return sqrt((x.x-y.x)*(x.x-y.x) + (x.y-y.y)*(x.y-y.y));\r\n}\r\ndouble S(Point x, Point y)\r\n{\r\n	return abs((x.x*y.y - x.y*y.x)/2);\r\n}\r\nbool Isat(Point x, Point a)\r\n{\r\n	return (x.x==a.x)&&(x.y==a.y);\r\n}\r\nbool Ison(Point x, Point a, Point b)\r\n{\r\n	if (Isat(x,a)||Isat(x,b))\r\n		return 1;\r\n	return Exp(D(x,a) + D(x,b), D(a,b));\r\n}\r\nbool Isin(Point x, Point a, Point b, Point c)\r\n{\r\n	if (Ison(x,a,b)||Ison(x,b,c)||Ison(x,a,c))\r\n		return 1;\r\n	else if(Ison(a,b,c)||Ison(b,a,c)||Ison(c,a,b))\r\n	{\r\n		return 0;\r\n	}\r\n	Point Lxa = L(x,a), Lxc = L(x,c), Lab = L(a,b), Lbc = L(b,c);\r\n	return Exp(S(Lab,Lxa)+ S(Lbc,Lxc) + S(Lxa,Lxc), S(Lab,Lbc));\r\n}\r\n\r\nint main()\r\n{\r\n	int n;\r\n	bool temp;\r\n	Point ans[55];\r\n	int step = 1;\r\n	while (cin>>n)\r\n	{\r\n		for (int i = 1; i <= n; ++i)\r\n		{\r\n			scanf("%lf%lf",&(ans[i].x),&(ans[i].y));\r\n		}\r\n		scanf("%lf%lf",&(ans[0].x),&(ans[0].y));\r\n		if (n == 1)\r\n		{\r\n			if (Isat(ans[0],ans[1]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 2){\r\n			if (Ison(ans[0],ans[1],ans[2]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else if (n == 3){\r\n			if (Isin(ans[0],ans[1],ans[2],ans[3]))\r\n				temp = true;\r\n			else\r\n				temp = false;\r\n		}else{\r\n			temp = false;\r\n			for (int i = 2; i < n; ++i)\r\n			{\r\n				if(temp == true)\r\n					break;\r\n				for (int j = i; j <= n; ++j)\r\n				{\r\n					if (Isin(ans[0],ans[1],ans[i],ans[j]))\r\n					{\r\n						temp = true;\r\n						break;\r\n					}\r\n				}\r\n			}	\r\n		}\r\n		\r\n		cout<<"Case #";\r\n		cout<<step<<": ";\r\n		step++;\r\n		if (temp == true)\r\n			cout<<"YES"<<endl;\r\n		else\r\n			cout<<"NO"<<endl;\r\n	}\r\n}'),
(1354, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(1355, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=54250;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1356, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.01887 0.00943");\r\n	return 0;\r\n}\r\n'),
(1357, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 18 15 12");\r\n	return 0;\r\n}'),
(1358, '#include<stdio.h>\r\nint main()\r\n{\r\n int n,amax=0,amin=0,bmax=0,bmin=0;\r\n double c,d;\r\n int i,m=0;\r\n int a[100],b[100];\r\n \r\n \r\n scanf("%d",&n) ;\r\n for(i=0;i<=n-1;i++)\r\n {\r\n	 scanf("%d",&a[i]);\r\n     scanf("%d",&b[i]);\r\n }\r\n scanf("%d",&c);\r\n scanf("%d",&d);\r\n\r\n for(i=0;i<=n-1;i++)\r\n {\r\n  if(amax>a[i])\r\n	  amax=a[i];\r\n  if(amin<a[i])\r\n	  amin=a[i];\r\n  if(bmax>b[i])\r\n	  bmax=b[i];\r\n  if(bmin<b[i])\r\n	  bmin=b[i];\r\n }\r\n if((c>=amin)&&(c<=amax)&&(d>=bmin)&&(d<=bmax))\r\n	 printf("case #%d: YES",n);\r\n else  \r\n	 printf("case #%d: NO",n);\r\n \r\n \r\n return 0;\r\n}'),
(1359, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    int m;\r\n    while(scanf("%d",&m)!=EOF)\r\n    {\r\n        char x[200]={1};\r\n        char y[200]={0};\r\n        int a=1;\r\n        int j;\r\n        while(m--)\r\n        {\r\n             \r\n            for(j=0;j<a;j++)\r\n            {\r\n                x[j]*=2;\r\n            }\r\n            for(j=0;j<a;j++)\r\n            {\r\n                y[j]=x[j]/10;\r\n                x[j]=x[j]%10;\r\n                x[j+1]=x[j+1]+y[j];\r\n            }\r\n            if(x[a])\r\n                a++;\r\n        }\r\n        int c=strlen(x);\r\n        for(j=a-1;j>=0;j--)\r\n            printf("%d",x[j]);\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}'),
(1360, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=2010;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1361, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,m;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')\r\n                break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&m);\r\n		m--;\r\n		s[n][i]=s[i][m];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}'),
(1362, '#include <iostream>\r\nusing namespace std;\r\nint main ()\r\n{\r\nint a=2228;\r\ncout<<a<<endl;\r\nreturn 0;\r\n}'),
(1363, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("Woart Woart Woart Dannie Dannie Dannie");\r\nreturn 0;\r\n}\r\n'),
(1364, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n		double a=1;\r\n		int plus=0;\r\n		char str[600];\r\n		str[599]=''1'';\r\n	\r\n		for(int i=0;i<599;i++)\r\n		{\r\n			str[i]=''0'';\r\n		}\r\n		for(int i=0;i<pow;i++)\r\n		{\r\n			for(int j=599;j>=0;j--)\r\n			{\r\n				int tmp=0;\r\n				tmp=(str[j]-48)*2%10+plus;\r\n				plus=(str[j]-48)*2/10;\r\n				str[j]=tmp+48;\r\n			}\r\n		}\r\n		int index=0;\r\n		while(str[index]==''0'')\r\n		index++;\r\n		for(int i=index;i<600;i++)\r\n		{\r\n			printf("%c",str[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1365, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("Woart Woart Woart Dannie Woart Dannie");\r\nreturn 0;\r\n}\r\n'),
(1366, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 21 43 85 171");\r\n	return 0;\r\n}'),
(1367, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 90 324");\r\n	return 0;\r\n}'),
(1368, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("13 12 15 12 6");\r\n	return 0;\r\n}'),
(1369, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint t,a=0,b=0;\r\nint f[200];\r\ndouble m,c;\r\nscanf("%d",&n);\r\n\r\nfor(i=0;i<2*n;i++)\r\n{\r\n	scanf("%d",&f[i]);	\r\n}\r\nscanf("%lf %lf",&m,&c);\r\nfor(i=0;i<2*n;i++)\r\n{\r\nif(m<=f[i]&&c<=f[i+1])a++;\r\n}\r\nfor(i=0;i<2*n;i++)\r\n{\r\nif(m>=f[i]&&c>=f[i+1])b++;\r\n}\r\nif(n<=50)\r\n{if(a*b>0)\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n}\r\n}'),
(1370, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}'),
(1371, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1372, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a,b;\r\n	cin>>a;\r\n	b=a%3;\r\n	\r\n	cout<<b<<endl;\r\n\r\n	return 0;\r\n}'),
(1373, '#include <stdio.h>\r\n#include<string.h>\r\nmain ()\r\n{char str[5];\r\nint i,a,sum;\r\nscanf("%d",&a);\r\nwhile(a--)\r\n{\r\ngets(str);\r\nsum=0;\r\n   for (i=0;str[i]!=''\\0'';i++)\r\n   {if(str[i]==''I'')\r\n	   sum+=1;\r\n   else\r\n\r\n	   if(str[i]==''V'')\r\n		   sum+=5;\r\n	   else\r\n		   if(str[i]==''X'')\r\n			   sum+=10;\r\n		   else\r\n			   if(str[i]==''L'')\r\n				   sum+=50;\r\n			   else\r\n				   if(str[i]==''C'')\r\n					   sum+=100;\r\n   }\r\n    for (i=0;str[i+1]!=''\\0'';i++)\r\n	   {if(str[i]==''I''&&str[i+1]!=''I'')\r\n	   sum-=2;\r\n	   }\r\n	printf("%d",sum);\r\n\r\n}\r\n\r\nreturn (0);\r\n}\r\n'),
(1374, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06667 0.13208");\r\n	return 0;\r\n}'),
(1375, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1376, '#include<iostream>\r\n#include<vector>\r\nusing namespace std;\r\nint main()\r\n{\r\n	static int q=1;\r\n	vector<int> vc1;\r\n	int n,i,j,t,o=0,p;\r\n	for(p=0;p<2;p++)\r\n	{cin>>n;\r\n	for(j=0;j<n;j++)\r\n	{\r\n		cin>>t;\r\n		vc1.push_back(t);\r\n	}\r\n	for(j=0;j<n;j++)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			if(j!=i)\r\n			{\r\n			if(vc1[j]==vc1[i])\r\n			{\r\n				o++;\r\n			}\r\n			}\r\n		}\r\n			if(o==0)\r\n			{\r\n				cout<<"Case #"<<q++<<"  "<<vc1[j]<<endl;\r\n				continue;\r\n			}\r\n		o=0;\r\n	}}\r\n		\r\nreturn 0;\r\n	\r\n}\r\n'),
(1377, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1378, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n		double a=1;\r\n		int plus=0;\r\n		char str[1000];\r\n		str[999]=''1'';\r\n	\r\n		for(int i=0;i<999;i++)\r\n		{\r\n			str[i]=''0'';\r\n		}\r\n		for(int i=0;i<pow;i++)\r\n		{\r\n			for(int j=999;j>=0;j--)\r\n			{\r\n				int tmp=0;\r\n				tmp=(str[j]-48)*2%10+plus;\r\n				plus=(str[j]-48)*2/10;\r\n				str[j]=tmp+48;\r\n			}\r\n		}\r\n		int index=0;\r\n		while(str[index]==''0'')\r\n		index++;\r\n		for(int i=index;i<1000;i++)\r\n		{\r\n			printf("%c",str[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1379, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{s[i]=1;continue;}\r\n\r\n			if(s[i]==''V'')\r\n			{s[i]=5;continue;}\r\n\r\n			if(s[i]==''X'')\r\n\r\n			{s[i]=10;continue;}\r\n\r\n			if(s[i]==''L'')\r\n			{s[i]=50;continue;}\r\n			if(s[i]==''C'')\r\n			{s[i]=100;continue;}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=s[i+1])\r\n				sum+=s[i];\r\n			else\r\n				sum-=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n		return 0;\r\n	}\r\n}'),
(1380, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1381, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("12 147 450");\r\n	return 0;\r\n}'),
(1382, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Woart Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1383, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Woart");\r\n	return 0;\r\n}'),
(1384, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a;\r\n	int b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b<<endl;\r\n	return 0;\r\n}\r\n'),
(1385, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 3626");\r\n	return 0;\r\n}'),
(1386, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1387, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Woart Dannie");\r\n	return 0;\r\n}'),
(1388, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 13 14 14 13");\r\n	return 0;\r\n}'),
(1389, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1390, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	long long int a;\r\n	int b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	return 0;\r\n}\r\n'),
(1391, '#include <stdio.h>\r\n#include<string.h>\r\nmain ()\r\n{char str[5];\r\nint i,a,sum;\r\nscanf("%d",&a);\r\n\r\n\r\nwhile(gets(str)!=NULL)\r\n{sum=0;\r\n   for (i=0;str[i]!=''\\0'';i++)\r\n   {if(str[i]==''I'')\r\n	   sum+=1;\r\n   else\r\n\r\n	   if(str[i]==''V'')\r\n		   sum+=5;\r\n	   else\r\n		   if(str[i]==''X'')\r\n			   sum+=10;\r\n		   else\r\n			   if(str[i]==''L'')\r\n				   sum+=50;\r\n			   else\r\n				   if(str[i]==''C'')\r\n					   sum+=100;\r\n   }\r\n    for (i=0;str[i+1]!=''\\0'';i++)\r\n	   {if(str[i]==''I''&&str[i+1]!=''I'')\r\n	   sum-=2;\r\n	   }\r\n	printf("%d",sum);\r\n\r\n}\r\n\r\nreturn (0);\r\n}\r\n'),
(1392, '#include<stdio.h>\r\n#include<math.h>\r\nint f[610];\r\nint fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nint main()\r\n{\r\n	int n;\r\n	double pn,a,b,c;\r\n	c=2.0;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n//		printf("A= %f\\n",a);\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(fibonacci_1(n-1)+fibonacci_1(n+1));\r\n		if(n==1)\r\n		{\r\n			printf("%f\\n",c);\r\n		}\r\n		else\r\n		{\r\n\r\n	    	printf("%f\\n",pn);\r\n		}\r\n	}\r\n}\r\n\r\n'),
(1393, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1394, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1395, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{	int a;\r\n	int b;\r\n	cin>>a;\r\n	b=a%3;\r\n	cout<<b;\r\n	return 0;\r\n}\r\n'),
(1396, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int a[15]={1644,1949,1368,1912,618,2007,2228,2010,54250,2046,2012,1735,0,1999,15};\r\n	cout<<a[6]<<endl;\r\n	return 0;\r\n}\r\n\r\n	\r\n'),
(1397, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827161");\r\n	return 0;\r\n}'),
(1398, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Woart");\r\n	return 0;\r\n}'),
(1399, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1400, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int n,i,sum,l,max;\r\n	char s[50];\r\n	scanf("%d",&n);\r\n	while(n--)\r\n	{\r\n		max=0;\r\n		sum=0;\r\n		scanf("%s",&s);\r\n		l=strlen(s);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(s[i]==''I'')\r\n			{s[i]=1;continue;}\r\n\r\n			if(s[i]==''V'')\r\n			{s[i]=5;continue;}\r\n\r\n			if(s[i]==''X'')\r\n\r\n			{s[i]=10;continue;}\r\n\r\n			if(s[i]==''L'')\r\n			{s[i]=50;continue;}\r\n			if(s[i]==''C'')\r\n			{s[i]=100;continue;}\r\n		}\r\n		for(i=l-1;i>=0;i--)\r\n		{\r\n			if(s[i]>=s[i+1])\r\n				sum+=s[i];\r\n			else\r\n				sum-=s[i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}'),
(1401, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n		double a=1;\r\n		int plus=0;\r\n		char str[120];\r\n		str[119]=''1'';\r\n	\r\n		for(int i=0;i<119;i++)\r\n		{\r\n			str[i]=''0'';\r\n		}\r\n		for(int i=0;i<pow;i++)\r\n		{\r\n			for(int j=119;j>=0;j--)\r\n			{\r\n				int tmp=0;\r\n				tmp=(str[j]-48)*2%10+plus;\r\n				plus=(str[j]-48)*2/10;\r\n				str[j]=tmp+48;\r\n			}\r\n		}\r\n		int index=0;\r\n		while(str[index]==''0'')\r\n		index++;\r\n		for(int i=index;i<120;i++)\r\n		{\r\n			printf("%c",str[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1402, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("13 12 17 16 12");\r\n	return 0;\r\n}'),
(1403, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Woart Dannie Dannie");\r\n	return 0;\r\n}'),
(1404, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    int n;\r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n        char a[200]={1};\r\n        char b[200]={0};\r\n        int i=1;\r\n        int j;\r\n        while(n--)\r\n        {\r\n             \r\n            for(j=0;j<i;j++)\r\n            {\r\n                a[j]=a[j]*2;\r\n            }\r\n            for(j=0;j<i;j++)\r\n            {\r\n                b[j]=a[j]/10;\r\n                a[j]=a[j]%10;\r\n                a[j+1]=a[j+1]+b[j];\r\n            }\r\n            if(a[i])\r\n                i++;\r\n        }\r\n        int c=strlen(a);\r\n        for(j=i-1;j>=0;j--)\r\n            printf("%d",a[j]);\r\n        printf("\\n");\r\n    }\r\n    return 0;\r\n}'),
(1405, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 16 15 12");\r\n	return 0;\r\n}'),
(1406, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 288 2835");\r\n	return 0;\r\n}'),
(1407, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 9 14 13");\r\n	return 0;\r\n}'),
(1408, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}\r\n'),
(1409, '#include<stdio.h>\r\nint main()\r\n{\r\n    //freopen("in.txt","r",stdin);\r\n    int n,sum,i,count;\r\n    int b[1000];\r\n    char a;\r\n    scanf("%d",&n);\r\n    getchar();\r\n    while(n--)\r\n    {\r\n	 count=0;\r\n     sum=0;\r\n     for(i=0;;i++)\r\n     {\r\n        scanf("%c",&a);\r\n        if(a==''\\n'')\r\n            break;\r\n        else if(a==''I'')\r\n            b[i]=1;\r\n        else if(a==''V'')\r\n            b[i]=5;\r\n        else if(a==''X'')\r\n            b[i]=10;\r\n        else if(a==''L'')\r\n            b[i]=50;\r\n        else if(a==''C'')\r\n            b[i]=100;\r\n		count++;\r\n     }\r\n     for(i=0;i<count;i++)\r\n	 {\r\n		 if(b[i]<b[i+1])\r\n			 b[i]=-b[i];\r\n		 sum=sum+b[i];\r\n	 }\r\n	 printf("%d\\n",sum);\r\n    }\r\n	\r\n \r\n    return 0;\r\n}'),
(1410, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("22 19 16 15 13);\r\n	return 0;\r\n}'),
(1411, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1412, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("22 19 16 15 13");\r\n	return 0;\r\n}'),
(1413, '#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{	int a;\r\n	cin>>a;\r\n	cout<<a%3;\r\n	return 0;\r\n}\r\n'),
(1414, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1415, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 10 10 6 5");\r\n	return 0;\r\n}'),
(1416, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\nint main ()\r\n{\r\n	char c;\r\n	int n,sum,j,i,k,a[400],m;\r\n	scanf("%d%*c",&m);\r\n	while(m--)\r\n	{\r\n	sum=0;i=0;\r\n	while((c=getchar())!=''\\n'')\r\n	{\r\n		if(c==''I''){a[i]=1;i++;}\r\n		else if(c==''V'')\r\n		{\r\n			a[i]=5;i++;\r\n		}\r\n		else if(c==''X'')\r\n		{\r\n			a[i]=10;i++;\r\n		}\r\n		else if(c==''L'')\r\n		{\r\n			a[i]=50;i++;\r\n		}\r\n		else if(c==''C'')\r\n		{\r\n			a[i]=100;i++;\r\n		}\r\n		if((a[i-1]>a[i-2])&&(i!=0))\r\n			a[i-2]=-a[i-2];\r\n\r\n	}\r\n\r\n\r\n	for(j=0;j<i;j++)\r\n	\r\n	{\r\n		sum+=a[j];\r\n	}\r\n\r\n	printf("%d\\n",sum);\r\n	\r\n\r\n	}\r\n	return 0;\r\n}'),
(1417, '#include<iostream>\r\n#include<cstring>\r\nusing namespace std;\r\n\r\n\r\n	string Roma[400]={" ","I","II","III","IV","V","VI","VII","VIII","IX","X"};\r\n	void ini()\r\n	{\r\n		int i,j;\r\n		Roma[20]="XX";\r\n		Roma[30]="XXX";\r\n		Roma[40]="XL";\r\n		Roma[50]="L";\r\n		Roma[60]="LX";\r\n		Roma[70]="LXX";\r\n		Roma[80]="LXXX";\r\n		Roma[90]="XC";\r\n		for(i=1;i<10;i++)\r\n		{\r\n			for(j=1;j<10;j++)\r\n			{\r\n				Roma[i*10+j]=Roma[i*10]+Roma[j];\r\n			}\r\n		}\r\n		Roma[100]="C";\r\n		Roma[200]="CC";\r\n		Roma[300]="CCC";\r\n		for(i=1;i<4;i++)\r\n		{\r\n			for(j=1;j<100;j++)\r\n			{\r\n				Roma[i*100+j]=Roma[i*100]+Roma[j];\r\n			}\r\n		}\r\n	}\r\n	int main()\r\n	{\r\n		string roma;\r\n		int n;\r\n		int i;\r\n		ini();\r\n		cin>>n;\r\n		while(n--)\r\n		{\r\n			cin>>roma;\r\n			int i;\r\n			for(i=1;i<400;i++)\r\n			{\r\n				if(roma==Roma[i])\r\n				{\r\n					cout<<i<<endl;\r\n				}\r\n			}\r\n		}return 0;\r\n	}\r\n	\r\n	\r\n'),
(1418, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.06604 0.13201");\r\n	return 0;\r\n}'),
(1419, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1420, '#include<stdio.h>\r\nint main()\r\n{\r\n	int x,i,j;\r\n	scanf("%d",&x);\r\n	int a[100][100];\r\n	for(i=1;i<x;i++)\r\n	    {\r\n		    for(j=1;j<x;j++)\r\n	           {\r\n		          scanf("%d",&a[i][j]);\r\n 	            }\r\n	    }\r\n 	    for(i=x;i>0;i--)\r\n 	        {\r\n			 for(j=1;j<x;j++)\r\n 	            {\r\n        	 	if(a[i][j]>=a[i][j+1])\r\n        	 	    a[i-1][j]=a[i-1][j]+a[i][j];\r\n        	 	else\r\n        	 	     a[i-1][j]=a[i-1][j]+a[i][j+1];\r\n        	     }\r\n 	        }\r\n        	 printf("%d",a[1][1]);\r\n        	 return 0;\r\n}'),
(1421, '#include<stdio.h>\r\nint main()\r\n{\r\n	int c=0,n,s,i,tmp;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		c++;\r\n		s=0;\r\n		for(i=0;i<n;i++)\r\n		{\r\n			scanf("%d",&tmp);\r\n			s^=tmp;\r\n		}\r\n		printf("Case #%d: %d\\n",c,s);\r\n	}\r\n	return 0;\r\n}'),
(1422, '#include<stdio.h>\r\nint main()\r\n{\r\n	\r\n	while(1)\r\n	{\r\n		int a,b;\r\n		scanf("%d",&a);\r\n		printf("%d",a%3);\r\n	}\r\n}'),
(1423, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n		double a=1;\r\n		int plus=0;\r\n		char str[250];\r\n		str[249]=''1'';\r\n	\r\n		for(int i=0;i<249;i++)\r\n		{\r\n			str[i]=''0'';\r\n		}\r\n		for(int i=0;i<pow;i++)\r\n		{\r\n			for(int j=249;j>=0;j--)\r\n			{\r\n				int tmp=0;\r\n				tmp=(str[j]-48)*2%10+plus;\r\n				plus=(str[j]-48)*2/10;\r\n				str[j]=tmp+48;\r\n			}\r\n		}\r\n		int index=0;\r\n		while(str[index]==''0'')\r\n		index++;\r\n		for(int i=index;i<250;i++)\r\n		{\r\n			printf("%c",str[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1424, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("22 19 14 15 13");\r\n	return 0;\r\n}'),
(1425, '#include "stdio.h"\r\nint main ()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n	return 0;\r\n}'),
(1426, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827162");\r\n	return 0;\r\n}'),
(1427, '#include<stdio.h>\r\nint main()\r\n{\r\n    int n,sum,i,count;\r\n    int b[1000];\r\n    char a;\r\n    scanf("%d",&n);\r\n    getchar();\r\n    while(n--)\r\n    {\r\n	 count=0;\r\n     sum=0;\r\n     for(i=0;;i++)\r\n     {\r\n        scanf("%c",&a);\r\n        if(a==''\\n'')\r\n            break;\r\n        else if(a==''I'')\r\n            b[i]=1;\r\n        else if(a==''V'')\r\n            b[i]=5;\r\n        else if(a==''X'')\r\n            b[i]=10;\r\n        else if(a==''L'')\r\n            b[i]=50;\r\n        else\r\n            b[i]=100;\r\n		count++;\r\n     }\r\n     for(i=0;i<count;i++)\r\n	 {\r\n		 if(b[i]<b[i+1])\r\n			 b[i]=-b[i];\r\n		 sum=sum+b[i];\r\n	 }\r\n	 printf("%d\\n",sum);\r\n    }\r\n    return 0;\r\n}'),
(1428, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("Woart Woart Dannie Woart Dannie Woart");\r\nreturn 0;\r\n}\r\n'),
(1429, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07072 0.13208");\r\n	return 0;\r\n}'),
(1430, '#include<stdio.h>\r\n#include<math.h>\r\nint f[610];\r\nint fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nint main()\r\n{\r\n	int n,c;\r\n	double pn,a,b;\r\n	c=2;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(fibonacci_1(n-1)+fibonacci_1(n+1));\r\n		if(n==1)\r\n		{\r\n			printf("%d\\n",c);\r\n		}\r\n		else\r\n		{\r\n	    	printf("%0.0f\\n",pn);\r\n		}\r\n	}\r\n}\r\n\r\n'),
(1431, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1432, '#include "stdio.h"\r\nvoid main ()\r\n{\r\n	int a,b;\r\n	scanf("%d",&a);\r\n	b=a%3;\r\n	printf("%d",b);\r\n}'),
(1433, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(1434, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,j,i,len[100],sum=0;\r\n	char c[100][100];\r\n	\r\n	cin>>n;\r\n	\r\n	\r\n	for(i=0;i<n;i++)\r\n	{\r\n		sum=0;\r\n		cin>>c[i];\r\n		len[i]=strlen(c[i]);\r\n		for(j=0;j<len[i];j++)\r\n		{\r\n			if(c[i][j]==''I'')\r\n			{\r\n				if(c[i][j+1]==''V'')\r\n				{\r\n					sum=sum+4;\r\n					j++;\r\n					break;\r\n				}\r\n				if(c[i][j+1]==''X'')\r\n				{\r\n					sum=sum+9;\r\n					j++;\r\n					break;\r\n				}\r\n				else sum=sum+1;	\r\n			}\r\n			else if(c[i][j]==''V'')\r\n			{	\r\n				sum=sum+5;\r\n			}\r\n			else if(c[i][j]==''X'')\r\n			{\r\n				if(c[i][j+1]==''L'')\r\n				{\r\n					sum=sum+40;\r\n					j++;\r\n				}\r\n				if(c[i][j+1]==''C'')\r\n				{\r\n					sum=sum+90;\r\n					j++;\r\n				}\r\n				else sum=sum+10;				\r\n			}\r\n			else if(c[i][j],''L'')\r\n		{\r\n			sum=sum+50;\r\n		}\r\n		else\r\n		{\r\n			sum=sum+100;\r\n		}\r\n	\r\n	}\r\n		cout<<sum<<endl;\r\n	}\r\n/*	for(int j=0;j<len[i];j++)\r\n	{\r\n		if(c[1][j]==''I'')\r\n		{\r\n			if(c[1][j+1]==''V'')\r\n			{\r\n				sum=sum+4;\r\n				j++;\r\n			}\r\n			if(c[1][j+1]==''X'')\r\n			{\r\n				sum=sum+9;\r\n				j++;\r\n			}\r\n			else sum=sum+1;	\r\n		}\r\n		else if(c[1][j]==''V'')\r\n		{	\r\n			sum=sum+5;	\r\n		}\r\n		else if(c[1][j]==''X'')\r\n		{\r\n			if(c[1][j+1]==''L'')\r\n			{\r\n				sum=sum+40;\r\n				j++;\r\n			}\r\n			if(c[1][j+1]==''C'')\r\n			{\r\n				sum=sum+90;\r\n				j++;\r\n			}\r\n			else sum=sum+10;				\r\n		}\r\n		else if(c[1][j]==''L'')\r\n		{\r\n			sum=sum+50;\r\n		}\r\n		else\r\n		{\r\n			sum=sum+100;\r\n		}\r\n		cout<<sum;\r\n	}\r\n\r\n    for(i=0;i<n;i++)\r\n	{\r\n		cout<<" "<<c[i]<<" ";\r\n	}	*/\r\n}'),
(1435, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("Woart Woart Dannie Dannie Dannie Woart");\r\nreturn 0;\r\n}\r\n'),
(1436, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 10 10 6 5");\r\n	return 0;\r\n}'),
(1437, '#include<stdio.h>\r\nvoid main()\r\n{   int a,b,c; \r\n	scanf("%d",&a);\r\n	scanf("%d",&b);\r\n	scanf("%d",&c);\r\n	a=a%3;\r\n	b=b%3;\r\n	c=c%3;\r\n	printf("%d",a);printf("\\n");\r\n	printf("%d",b);printf("\\n");\r\n	printf("%d",c);printf("\\n");\r\n}'),
(1438, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("20 19 14 15 13");\r\n	return 0;\r\n}'),
(1439, '#include<stdio.h>\r\nint main()\r\n{\r\n	int i=4;\r\n	while(i--)\r\n\r\n	\r\n	{\r\n		int a,b;\r\n		scanf("%d",&a);\r\n		printf("%d",a%3);\r\n	}\r\n}'),
(1440, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 5 5 5 5");\r\n	return 0;\r\n}'),
(1441, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4851");\r\n	return 0;\r\n}'),
(1442, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int a,b=0,i,l;\r\n	char str[100];\r\n	scanf("%d",&a);\r\n	while(a--)\r\n	{\r\n		scanf("%s",str);\r\n		l=strlen(str);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(str[i]==''C'')\r\n			b+=100;\r\n			if(str[i]==''L'')\r\n			b+=50;\r\n			if(str[i]==''V'')\r\n			b+=5;\r\n			if(str[i]==''X'')\r\n			b+=10;\r\n			if(str[i]==''I'')\r\n			b+=1;\r\n			if(str[i]==''I''&&str[i+1]==''V''&&str[i-1]!=''I'')\r\n			;\r\n			if(str[i]==''I''&&str[i+1]==''I''&&str[i+2]==''V'')\r\n			b-=4;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]!=''I'')\r\n			b-=2;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]==''I'')\r\n			b-=4;\r\n			if(str[i]==''X''&&str[i+1]==''L''&&str[i-1]!=''X'')\r\n			b-=20;\r\n			if(str[i]==''X''&&str[i+1]==''X''&&str[i+2]==''L'')\r\n			b-=40;\r\n			if(str[i]==''C''&&str[i+1]==''C''&&str[i-1]==''X'')\r\n			b-=10;\r\n			if(str[i]==''C''&&str[i-1]==''X'')\r\n			b-=20;\r\n		}\r\n		printf("%d\\n",b);\r\n		b=0;\r\n	}\r\n	return 0;\r\n}'),
(1443, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Worat Worat Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1444, '#include<stdio.h>\r\nint main()\r\n{   int a,b,c; \r\n	scanf("%d",&a);\r\n	scanf("%d",&b);\r\n	scanf("%d",&c);\r\n	a=a%3;\r\n	b=b%3;\r\n	c=c%3;\r\n	printf("%d",a);printf("\\n");\r\n	printf("%d",b);printf("\\n");\r\n	printf("%d",c);printf("\\n");\r\n	return 0;\r\n}'),
(1445, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 27 54");\r\n	return 0;\r\n}'),
(1446, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int a,b=0,i,l;\r\n	char str[100];\r\n	scanf("%d",&a);\r\n	a+=1;\r\n	while(a--)\r\n	{\r\n		scanf("%s",str);\r\n		l=strlen(str);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(str[i]==''C'')\r\n			b+=100;\r\n			if(str[i]==''L'')\r\n			b+=50;\r\n			if(str[i]==''V'')\r\n			b+=5;\r\n			if(str[i]==''X'')\r\n			b+=10;\r\n			if(str[i]==''I'')\r\n			b+=1;\r\n			if(str[i]==''I''&&str[i+1]==''V''&&str[i-1]!=''I'')\r\n			b-=2;\r\n			if(str[i]==''I''&&str[i+1]==''I''&&str[i+2]==''V'')\r\n			b-=4;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]!=''I'')\r\n			b-=2;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]==''I'')\r\n			b-=4;\r\n			if(str[i]==''X''&&str[i+1]==''L''&&str[i-1]!=''X'')\r\n			b-=20;\r\n			if(str[i]==''X''&&str[i+1]==''X''&&str[i+2]==''L'')\r\n			b-=40;\r\n			if(str[i]==''C''&&str[i+1]==''C''&&str[i-1]==''X'')\r\n			b-=10;\r\n			if(str[i]==''C''&&str[i-1]==''X'')\r\n			b-=20;\r\n		}\r\n		printf("%d\\n",b);\r\n		b=0;\r\n	}\r\n	return 0;\r\n}\r\n	'),
(1447, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1448, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",(a%3));}\r\n		return 0;\r\n	}'),
(1449, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("24 5040 362880");\r\n	return 0;\r\n}'),
(1450, '#include<stdio.h>\r\n#include<math.h>\r\ndouble f[610];\r\ndouble fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nint main()\r\n{\r\n	int n,c;\r\n	double ln,pn,a,b;\r\n	c=2;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n		ln=fibonacci_1(n-1)+fibonacci_1(n+1);\r\n\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(ln);\r\n		if(n==1)\r\n		{\r\n			printf("%d\\n",c);\r\n		}\r\n		else\r\n		{\r\n	    	printf("%0.0f\\n",pn);\r\n		}\r\n	}\r\n}\r\n\r\n'),
(1451, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n\r\n#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		printf("%d\\n",n%3);\r\n	}\r\n	return 0;\r\n}'),
(1452, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	int a,b=0,i,l;\r\n	char str[100];\r\n	scanf("%d",&a);\r\n	while(a--)\r\n	{\r\n		scanf("%s",str);\r\n		l=strlen(str);\r\n		for(i=0;i<l;i++)\r\n		{\r\n			if(str[i]==''C'')\r\n			b+=100;\r\n			if(str[i]==''L'')\r\n			b+=50;\r\n			if(str[i]==''V'')\r\n			b+=5;\r\n			if(str[i]==''X'')\r\n			b+=10;\r\n			if(str[i]==''I'')\r\n			b+=1;\r\n			if(str[i]==''I''&&str[i+1]==''V''&&str[i-1]!=''I'')\r\n			b-=2;\r\n			if(str[i]==''I''&&str[i+1]==''I''&&str[i+2]==''V'')\r\n			b-=4;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]!=''I'')\r\n			b-=2;\r\n			if(str[i]==''I''&&str[i+1]==''X''&&str[i-1]==''I'')\r\n			b-=4;\r\n			if(str[i]==''X''&&str[i+1]==''L''&&str[i-1]!=''X'')\r\n			b-=20;\r\n			if(str[i]==''X''&&str[i+1]==''X''&&str[i+2]==''L'')\r\n			b-=40;\r\n			if(str[i]==''C''&&str[i+1]==''C''&&str[i-1]==''X'')\r\n			b-=10;\r\n			if(str[i]==''C''&&str[i-1]==''X'')\r\n			b-=20;\r\n		}\r\n		printf("%d\\n",b);\r\n		b=0;\r\n	}\r\n	return 0;\r\n}\r\n	'),
(1453, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 14 11 16 12");\r\n	return 0;\r\n}'),
(1454, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 14 12");\r\n	return 0;\r\n}'),
(1455, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 28 55");\r\n	return 0;\r\n}'),
(1456, '#include<stdio.h>\r\n#include<string.h>\r\n\r\nint main()\r\n{\r\n	int f[110][110];\r\n	int n,i,j,sum;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n\r\n		sum=0;\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			for(j=1;j<=i;j++)scanf("%d",&f[i][j]);\r\n		}\r\n		for(i=2;i<=n;i++)\r\n		{\r\n			\r\n			for(j=1;j<=i;j++) \r\n			{\r\n				if(f[i-1][j]>f[i-1][j-1])				\r\n				{\r\n					f[i][j]+=f[i-1][j];\r\n				}\r\n				else\r\n				{\r\n					f[i][j]+=f[i-1][j-1];\r\n				}\r\n			}\r\n		}\r\n		for(i=1;i<=n;i++)\r\n		{\r\n			if(sum>f[n][i])sum=sum;\r\n			else sum=f[n][i];\r\n		}\r\n		printf("%d\\n",sum);\r\n	}\r\n	return 0;\r\n}\r\n'),
(1457, '#include <stdio.h>\r\nint main()\r\n{\r\n	int pow;\r\n	while(~scanf("%d",&pow))\r\n	{\r\n		double a=1;\r\n		int plus=0;\r\n		char str[185];\r\n		str[184]=''1'';\r\n	\r\n		for(int i=0;i<184;i++)\r\n		{\r\n			str[i]=''0'';\r\n		}\r\n		for(int i=0;i<pow;i++)\r\n		{\r\n			for(int j=184;j>=0;j--)\r\n			{\r\n				int tmp=0;\r\n				tmp=(str[j]-48)*2%10+plus;\r\n				plus=(str[j]-48)*2/10;\r\n				str[j]=tmp+48;\r\n			}\r\n		}\r\n		int index=0;\r\n		while(str[index]==''0'')\r\n		index++;\r\n		for(int i=index;i<185;i++)\r\n		{\r\n			printf("%c",str[i]);\r\n		}\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}'),
(1458, '#include<stdio.h>\r\n#include<math.h>\r\n\r\nmain()\r\n{\r\nint a[600],n,i;\r\ndouble  a0,a1,a2,a11,a21,b,p,h;\r\na[0]=0;\r\na[1]=1;\r\nwhile(scanf("%d",&n)!=EOF)\r\n{\r\n	if(n==0)\r\n	{\r\n		printf("1\\n");\r\n		continue;\r\n	}\r\n	for(i=0;i<n;i++)\r\n	a[i+2]=a[i]+a[i+1];\r\n	h=a[n-1]+a[n+1];\r\n	a0=sqrt(5);\r\n	a1=a0+1;\r\n	a2=1-a0;\r\n	a11=pow(a1,n);\r\n	a21=pow(a2,n);\r\n	b=a11+a21;\r\n	p=b/h;\r\n	printf("%.0f\\n",p);\r\n}\r\n\r\n}\r\n\r\n'),
(1459, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 24 35 49 800");\r\n	return 0;\r\n}'),
(1460, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.26415 0.13208");\r\n	return 0;\r\n}'),
(1461, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 24690394 493827160");\r\n	return 0;\r\n}'),
(1462, '#include <stdio.h>\r\nint main()\r\n{\r\nint j,x=0,y=0,i,n;\r\nint t,a=0,b=0;\r\nint q=0;\r\nint f[200];\r\ndouble m,c;\r\nscanf("%d",&n);\r\n\r\nfor(i=0;i<2*n;i++)\r\n{\r\n	scanf("%d",&f[i]);	\r\n}\r\nscanf("%lf %lf",&m,&c);\r\nfor(i=0;i<2*n;i++)\r\n{\r\nif(m<=f[i]&&c<=f[i+1])a++;\r\n}\r\nfor(i=0;i<2*n;i++)\r\n{\r\nif(m>=f[i]&&c>=f[i+1])b++;\r\n}\r\nif(n>3)\r\nfor(i=4;i<2*n;i++)\r\n{\r\n\r\nt=(f[0]-f[2])*i+j*(f[1]-f[3])-f[0]*f[3]+f[1]*f[2];\r\nif(t!=0)q++;\r\n}\r\nif(n<=50)\r\n{if((a*b>0)&&(q>0))\r\nprintf("Case #%d:YES",n);\r\nelse\r\nprintf("Case #%d:NO",n);\r\n}\r\n}\r\n'),
(1463, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("27 4096 823543 10000000000000000");\r\n	return 0;\r\n}'),
(1464, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,j,i,len[100],sum=0;\r\n	char c[100][100];\r\n	\r\n	cin>>n;\r\n	\r\n	if(n<=100)\r\n	{	for(i=0;i<n;i++)\r\n	{\r\n		sum=0;\r\n		cin>>c[i];\r\n		len[i]=strlen(c[i]);\r\n		for(j=0;j<len[i];j++)\r\n		{\r\n			if(c[i][j]==''I'')\r\n			{\r\n				if(c[i][j+1]==''V'')\r\n				{\r\n					sum=sum+4;\r\n					j++;\r\n					break;\r\n				}\r\n				if(c[i][j+1]==''X'')\r\n				{\r\n					sum=sum+9;\r\n					j++;\r\n					break;\r\n				}\r\n				else sum=sum+1;	\r\n			}\r\n			else if(c[i][j]==''V'')\r\n			{	\r\n				sum=sum+5;\r\n			}\r\n			else if(c[i][j]==''X'')\r\n			{\r\n				if(c[i][j+1]==''L'')\r\n				{\r\n					sum=sum+40;\r\n					j++;\r\n				}\r\n				if(c[i][j+1]==''C'')\r\n				{\r\n					sum=sum+90;\r\n					j++;\r\n				}\r\n				else sum=sum+10;				\r\n			}\r\n			else if(c[i][j],''L'')\r\n		{\r\n			sum=sum+50;\r\n		}\r\n		else\r\n		{\r\n			sum=sum+100;\r\n		}\r\n	\r\n	}\r\n		cout<<sum<<endl;\r\n		\r\n	}\r\n\r\n	}\r\n}'),
(1465, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("11 10 10 11 12");\r\n	return 0;\r\n}'),
(1466, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 2646");\r\n	return 0;\r\n}'),
(1467, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 15 12");\r\n	return 0;\r\n}'),
(1468, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.01957 0.01957");\r\n	return 0;\r\n}'),
(1469, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 2450");\r\n	return 0;\r\n}'),
(1470, '#include<iostream>\r\n#include<vector>\r\nusing namespace std;\r\nint main()\r\n{\r\n	static int q=1;\r\n	vector<int> vc1;\r\n	int i,j,t,o=0,p,a[2],l=0;\r\n	long int n;\r\n	for(p=0;p<2;p++)\r\n	{cin>>n;\r\n	for(j=0;j<n;j++)\r\n	{\r\n		cin>>t;\r\n		vc1.push_back(t);\r\n	}\r\n	for(j=0;j<n;j++)\r\n	{\r\n		for(i=0;i<n;i++)\r\n		{\r\n			if(j!=i)\r\n			{\r\n			if(vc1[j]==vc1[i])\r\n			{\r\n				o++;\r\n			}\r\n			}\r\n		}\r\n			if(o==0)\r\n			{\r\n				a[l++]=vc1[j];\r\n				continue;\r\n	\r\n			\r\n			}\r\n		o=0;\r\n					vc1.clear();\r\n	}}\r\n	cout<<"Case #1   "<<a[0]<<endl;\r\n	cout<<"Case #2   "<<a[1]<<endl;\r\n		\r\nreturn 0;\r\n	\r\n}\r\n'),
(1471, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("18 18 15 16 13");\r\nreturn 0;\r\n}\r\n'),
(1472, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31427");\r\n	return 0;\r\n}'),
(1473, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1474, '#include <stdio.h>\r\n#include "math.h"\r\n\r\nint main()\r\n{\r\n	int n,i,j,k;\r\n	int a[100],b[100],p; \r\n	a[0]=0;\r\n	a[1]=1;\r\n	b[0]=2;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=2;i<n+3;i++)\r\n		{\r\n		   a[i]=a[i-1]+a[i-2]; \r\n		}\r\n		for(j=1;j<=n;j++)\r\n		{\r\n			b[j]=a[j-1]+a[j+1];\r\n		}\r\n		float z,v,x,y;\r\n	    z=x=1+sqrt(5);\r\n		v=y=1-sqrt(5);\r\n		\r\n		for(k=1;k<n;k++)\r\n		{\r\n		    z=x*z;\r\n			v=y*v;	\r\n		}\r\n		p=(z+v)/b[n];\r\n		printf("%d",p);\r\n	}\r\n	return 0;\r\n}'),
(1475, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1476, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1477, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1478, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1479, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("10 10000 32768 61728394 493827160");\r\nreturn 0;\r\n}\r\n'),
(1480, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 10000 65536 61728394 493827160");\r\n	return 0;\r\n}'),
(1481, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 4900");\r\n	return 0;\r\n}'),
(1482, '#include <stdio.h>\r\nint main()\r\n{\r\nint i,j,N,M;\r\nint a[i],b[j];\r\nint sum1=0,sum2=0;\r\nscanf("%d",&N);\r\nfor(i=0;i<N;i++)\r\nscanf("%d",&a[i]);\r\nscanf("%d",&M);\r\nfor(j=0;j<M;j++)\r\nscanf("%d",&b[j]);\r\nfor(i=0;i<N;i++)\r\n{\r\nsum1=sum1^a[i];\r\n}\r\nprintf("Case #1:%d",sum1);\r\nfor(j=0;j<M;j++)\r\n{\r\nsum2=sum2^b[j];\r\n}\r\nprintf("Case #2:%d",sum2);\r\n}'),
(1483, '#include <stdio.h>\r\n#include "math.h"\r\n\r\nint main()\r\n{\r\n	int n,i,j,k;\r\n	int a[100],b[100],p; \r\n	a[0]=0;\r\n	a[1]=1;\r\n	b[0]=2;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		for(i=2;i<n+3;i++)\r\n		{\r\n		   a[i]=a[i-1]+a[i-2]; \r\n		}\r\n		for(j=1;j<=n;j++)\r\n		{\r\n			b[j]=a[j-1]+a[j+1];\r\n		}\r\n		float z,v,x,y;\r\n	    z=x=1+sqrt(5);\r\n		v=y=1-sqrt(5);\r\n		\r\n		for(k=1;k<n;k++)\r\n		{\r\n		    z=x*z;\r\n			v=y*v;	\r\n		}\r\n		p=(z+v)/b[n];\r\n		printf("%d\\n",p);\r\n	}\r\n	return 0;\r\n}'),
(1484, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 744 362943");\r\n	return 0;\r\n}'),
(1485, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 9 13 15 22");\r\n	return 0;\r\n}'),
(1486, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("12 11 12 11 6");\r\n	return 0;\r\n}'),
(1487, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 13 12");\r\n	return 0;\r\n}'),
(1488, '#include<stdio.h>\r\nint main()\r\n{\r\n    //freopen("in.txt","r",stdin);\r\n    int n,sum,i,count;\r\n    int b[1000];\r\n    char a;\r\n    scanf("%d",&n);\r\n    getchar();\r\n    while(n--)\r\n    {\r\n	 count=0;\r\n     sum=0;\r\n	 i=0;\r\n     //for(i=0;;i++)\r\n     //{\r\n        while(~scanf("%c",&a))\r\n		{\r\n        if(a==''\\n'')\r\n            break;\r\n        else if(a==''I'')\r\n            b[i]=1;\r\n        else if(a==''V'')\r\n            b[i]=5;\r\n        else if(a==''X'')\r\n            b[i]=10;\r\n        else if(a==''L'')\r\n            b[i]=50;\r\n        else\r\n            b[i]=100;\r\n		count++;\r\n		i++;\r\n		}\r\n     //}\r\n     for(i=0;i<count;i++)\r\n	 {\r\n		 if(b[i]<b[i+1])\r\n			 b[i]=-b[i];\r\n		 sum=sum+b[i];\r\n	 }\r\n	 printf("%d\\n",sum);\r\n    }\r\n    return 0;\r\n}'),
(1489, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 408 19845");\r\n	return 0;\r\n}'),
(1490, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("10 10 16 6 5");\r\n	return 0;\r\n}\r\n//请将11 11 11 11 11替换成你想提交的答案并提交，每组数据用空格隔开 '),
(1491, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("2228\\n");\r\n	return 0;\r\n}\r\n\r\n'),
(1492, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("15 14 15 16 13");\r\nreturn 0;\r\n}\r\n'),
(1493, '#include<stdio.h>\r\nint main()\r\n{\r\n   int i,n,k,j;\r\n   char *p,a[100][100];\r\n   while(scanf("%d",&n)!=EOF)\r\n   {\r\n       getchar();\r\n       for(i=0;i<n;i++)\r\n       {\r\n\r\n            gets(&a[i][0]);\r\n\r\n       }\r\n       /* for(i=0;i<n;i++)\r\n            {\r\n                for(j=0;j<n;j++)\r\n                {\r\n                a[i][j]=*p;\r\n                p++;\r\n                }\r\n            }*/\r\n           for(i=0;i<n;i++)\r\n           {scanf("%d",&k);\r\n                printf("%c",a[i][k-1]);}\r\n   }\r\n\r\n  return 0;\r\n}'),
(1494, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}\r\n	\r\n'),
(1495, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[601],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(~scanf("%d",&n))\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1496, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1497, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}\r\n	\r\n');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(1498, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1499, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n	char s[110][110];\r\n	int n,i,j,tmp;\r\n	scanf("%d",&n);\r\n	getchar();\r\n	memset(s,0,sizeof(s));\r\n	for(i=0;i<n;i++)\r\n	{\r\n		for(j=0;;j++)\r\n		{\r\n			scanf("%c",&s[i][j]);\r\n			if(s[i][j]==''\\n'')break;\r\n		}\r\n	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		scanf("%d",&tmp);\r\n		tmp--;\r\n		s[n][i]=s[i][tmp];\r\n	}\r\n\r\n	printf("%s\\n",s[n]);\r\n	return 0;\r\n}'),
(1500, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 14 13 12");\r\n	return 0;\r\n}'),
(1501, '#include<stdio.h>\r\n#include<string.h>\r\nint main()\r\n{\r\n    char a[100];\r\n    int n;\r\n    scanf("%d",&n);\r\n    while(n--)\r\n    {\r\n        getchar();\r\n    int b[100];\r\n    int sum=0,i=0,sum1=0;\r\n    scanf("%s",&a[i]);\r\n    for(i=0;i<2;i++)\r\n    {   \r\n        switch(a[i])\r\n        {\r\n            case''I'':b[i]=1,sum1++;continue;\r\n            case''V'':b[i]=5,sum1++;continue;\r\n            case''X'':b[i]=10,sum1++;continue;\r\n            case''L'':b[i]=50,sum1++;continue;\r\n            case''C'':b[i]=100,sum1++;continue;\r\n            default:break;\r\n        }\r\n    }\r\n    if (sum1==1)\r\n        printf("%d\\n",b[0]);\r\n    else\r\n    {\r\n        for(i=0;i<sum1;i++)\r\n            {\r\n                sum=0;\r\n                if(b[i]>=b[i+1])\r\n                    sum=sum+b[i];\r\n                else\r\n                {\r\n                    sum=sum+(b[i+1]-b[i]);\r\n                    i++;\r\n                }\r\n            }\r\n            printf("%d\\n",sum);\r\n    }\r\n    memset(a,0,100);\r\n    }\r\n    return 0;\r\n}'),
(1502, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,j,i,len[100],sum=0;\r\n	char c[100][100];	\r\n	cin>>n;	\r\n	\r\n	if(n<=100)\r\n	{	\r\n		for(i=0;i<n;i++)\r\n		{\r\n			sum=0;\r\n			cin>>c[i];\r\n			len[i]=strlen(c[i]);\r\n			for(j=0;j<len[i];j++)\r\n			{\r\n				if(c[i][j]==''I'')\r\n				{\r\n					if(c[i][j+1]==''V'')\r\n					{\r\n						sum=sum+4;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''X'')\r\n					{\r\n						sum=sum+9;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+1;	\r\n				}\r\n				else if(c[i][j]==''V'')\r\n				{	\r\n					sum=sum+5;\r\n				}\r\n				else if(c[i][j]==''X'')\r\n				{\r\n					if(c[i][j+1]==''L'')\r\n					{\r\n						sum=sum+40;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''C'')\r\n					{\r\n						sum=sum+90;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+10;				\r\n				}\r\n				else if(c[i][j]==''L'')\r\n				{	\r\n					sum=sum+50;\r\n				}\r\n				else\r\n				{\r\n					sum=sum+100;\r\n				}\r\n			}\r\n			if(sum<=400)	\r\n				cout<<sum<<endl;		\r\n		}\r\n	}\r\n}'),
(1503, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("10 82 1211 1254 250515237");\r\n	return 0;\r\n}'),
(1504, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1505, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1506, '#include<stdio.h>\r\nint main()\r\n{\r\nprintf("3 100 256 11111 31426");\r\nreturn 0;\r\n}\r\n'),
(1507, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Dannie");\r\n	return 0;\r\n}'),
(1508, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("4 45 2548");\r\nreturn 0;\r\n}\r\n'),
(1509, '#include <stdio.h>\r\n#include "math.h"\r\n\r\nint main()\r\n{\r\n	int n,i,j,k;\r\n	int a[100],b[100],p; \r\n	a[0]=0;\r\n	a[1]=1;\r\n	b[0]=2;\r\n	while(~scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=2;i<n+3;i++)\r\n		{\r\n		   a[i]=a[i-1]+a[i-2]; \r\n		}\r\n		for(j=1;j<=n;j++)\r\n		{\r\n			b[j]=a[j-1]+a[j+1];\r\n		}\r\n		float z,v,x,y;\r\n	    z=x=1+sqrt(5);\r\n		v=y=1-sqrt(5);	\r\n		for(k=1;k<n;k++)\r\n		{\r\n		    z=x*z;\r\n			v=y*v;	\r\n		}\r\n		p=(z+v)/b[n];\r\n		printf("%d\\n",p);\r\n	}\r\n	return 0;\r\n}'),
(1510, '#include<stdio.h>\r\nint main()\r\n{\r\n	int a;\r\n	while(~scanf("%d",&a))\r\n	{\r\n		printf("%d\\n",a%3);\r\n	}\r\n	return 0;\r\n}'),
(1511, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(1512, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("4 45 4302");\r\nreturn 0;\r\n}\r\n'),
(1513, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("14 13 18 14 12");\r\n	return 0;\r\n}'),
(1514, '#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n\r\n\r\n	int f1,f2,f3,f4,f,n,l,m,i,k;\r\n\r\n	double h,p,z,a,b;\r\n\r\n	f1=0;f2=1;f3=0;f4=1;i=0;k=0;\r\n\r\n	while(~scanf("%d",&n))\r\n       if (n<=600)\r\n\r\n   do\r\n\r\n	{\r\n		f=f1+f2;f1=f2;f2=f;\r\n\r\n		i++;\r\n\r\n	}\r\n\r\n	while(i<=(n-3));\r\n\r\n	do\r\n\r\n	{\r\n		m=f3+f4;f3=f4;f4=m;\r\n\r\n	\r\n		k++;\r\n\r\n	}\r\n\r\n	while(k<=(n-1));\r\n\r\n	l=m+f;\r\n\r\n	h=1+sqrt(5);\r\n\r\n	z=1-sqrt(5);\r\n\r\n	a=pow(h,n);\r\n\r\n	b=pow(z,n);\r\n\r\n	p=(a+b)/l;\r\n\r\n	printf("%f\\n",p);\r\n\r\n	return 0;\r\n}'),
(1515, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,j,i,len[100],sum=0;\r\n	char c[100][100];	\r\n	cin>>n;	\r\n	\r\n	if(n<=100)\r\n	{	\r\n		for(i=0;i<n;i++)\r\n		{\r\n			sum=0;\r\n			cin>>c[i];\r\n			len[i]=strlen(c[i]);\r\n			for(j=0;j<len[i];j++)\r\n			{\r\n				if(c[i][j]==''I''||c[i][j]==''i'')\r\n				{\r\n					if(c[i][j+1]==''V''||c[i][j+1]==''v'')\r\n					{\r\n						sum=sum+4;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''X''||c[i][j+1]==''x'')\r\n					{\r\n						sum=sum+9;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+1;	\r\n				}\r\n				else if(c[i][j]==''V''||c[i][j]==''v'')\r\n				{	\r\n					sum=sum+5;\r\n				}\r\n				else if(c[i][j]==''X''||c[i][j]==''x'')\r\n				{\r\n					if(c[i][j+1]==''L''||c[i][j+1]==''l'')\r\n					{\r\n						sum=sum+40;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''C''||c[i][j+1]==''c'')\r\n					{\r\n						sum=sum+90;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+10;				\r\n				}\r\n				else if(c[i][j]==''L''||c[i][j]==''l'')\r\n				{	\r\n					sum=sum+50;\r\n				}\r\n				else\r\n				{\r\n					sum=sum+100;\r\n				}\r\n			}\r\n			if(sum<=400)	\r\n				cout<<sum<<endl;		\r\n		}\r\n	}\r\n}'),
(1516, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1517, '#include<stdio.h>\r\nint main()\r\n{\r\n    //freopen("in.txt","r",stdin);\r\n    int n,sum,i;\r\n    int b[1000];\r\n    char a;\r\n    scanf("%d",&n);\r\n    getchar();\r\n    while(n--)\r\n    {\r\n     sum=0;\r\n	 i=0;\r\n     //for(i=0;;i++)\r\n     //{\r\n        while(~scanf("%c",&a))\r\n		{\r\n        if(a==''\\n'')\r\n            break;\r\n        else if(a==''I'')\r\n            b[i]=1;\r\n        else if(a==''V'')\r\n            b[i]=5;\r\n        else if(a==''X'')\r\n            b[i]=10;\r\n        else if(a==''L'')\r\n            b[i]=50;\r\n        else\r\n            b[i]=100;\r\n		i++;\r\n		b[i]=0;\r\n		}\r\n     //}\r\n     for(i=0;b[i]>0;i++)\r\n	 {\r\n		 if(b[i]<b[i+1])\r\n			 b[i]=-b[i];\r\n		 sum=sum+b[i];\r\n	 }\r\n	 printf("%d\\n",sum);\r\n    }\r\n    return 0;\r\n}'),
(1518, '#include <stdio.h>\r\nint main()\r\n{\r\n    int n,y,c=1;\r\n    while(scanf("%d",&n)!=EOF)\r\n    {\r\n    	\r\n    \r\n	int a[n-1];\r\n	for(int i=0;i<n;i++)\r\n	   scanf("%d",&a[i]);\r\n    y=a[0];\r\n	for(int i=1;i<n;i++)\r\n	   y=a[i]^y;\r\n 	printf("Case #%d: ",c);\r\n 	c++;\r\n	printf("%d\\n",y);\r\n    }\r\n	return 0;\r\n}'),
(1519, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Woart Dannie");\r\n	return 0;\r\n}'),
(1520, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("Woart Woart Dannie Dannie Dannie Woart");\r\n	return 0;\r\n}'),
(1521, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1522, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n* /\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}\r\n*/\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1523, '#include <stdio.h>\r\n#include <math.h>\r\n#include <string.h>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,i;\r\nscanf("%d",&n);\r\n\r\n	char a[n][100],c[n];\r\n	int b[n];\r\n\r\nfor(i=0;i<n;i++) \r\n	{gets(a[i]);}\r\n	for(i=0;i<n;i++)\r\n{cin>>b[i];	}\r\n	for(i=0;i<n;i++)\r\n	{\r\n		if(b[i]>strlen(a[i]))\r\n		c[i]=32;\r\n		else\r\n		c[i]=a[i][b[i]-1];	\r\n	}\r\n	\r\nputs(c);	\r\n	\r\n}\r\n'),
(1524, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 1111 31426");\r\n	return 0;\r\n}'),
(1525, '#include<stdio.h>\r\nint main()\r\n\r\n{\r\nint m,i,j,sum=1;\r\nwhile(scanf("%d",&m)!=EOF)\r\n{for(i=1;i<=m;i++)\r\n{\r\nsum*=2;\r\n}\r\nprintf("%d\\n",sum);\r\n\r\n}\r\nreturn  0;\r\n}\r\n'),
(1526, '#include <stdio.h>\r\n#include "math.h"\r\n\r\nint main()\r\n{\r\n	int n,i,j,k;\r\n	unsigned long long a[1000],b[1000],p; \r\n	a[0]=0;\r\n	a[1]=1;\r\n	b[0]=2;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		for(i=2;i<n+3;i++)\r\n		{\r\n		   a[i]=a[i-1]+a[i-2]; \r\n		}\r\n		for(j=1;j<=n;j++)\r\n		{\r\n			b[j]=a[j-1]+a[j+1];\r\n		}\r\n		float z,v,x,y;\r\n	    z=x=1+sqrt(5);\r\n		v=y=1-sqrt(5);	\r\n		for(k=1;k<n;k++)\r\n		{\r\n		    z=x*z;\r\n			v=y*v;	\r\n		}\r\n		p=(z+v)/b[n];\r\n		printf("%d\\n",p);\r\n	}\r\n	return 0;\r\n}'),
(1527, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1528, '#include<stdio.h>\r\n#include<math.h>\r\nint ya=0;\r\nint main()\r\n{   \r\n	double mianji1,mianji2,b[1000],s,a,q,c,x[2];\r\n	int n,i;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		ya++;\r\n		mianji1=0;mianji2=0;s=0;\r\n		for(i=0;i<n*2;i++)\r\n		scanf("%lf",&b[i]);\r\n		scanf("%lf%lf",x,x+1);\r\n		\r\n		for(int j=2;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((b[0]-b[j])*(b[0]-b[j])+(b[1]-b[j+1])*(b[1]-b[j+1]));\r\n		 		q=sqrt((b[0]-b[i])*(b[0]-b[i])+(b[1]-b[i+1])*(b[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 	\r\n		 		double l=(a+q+c)/2;\r\n		 		s=sqrt(l*(l-a)*(l-q)*(l-c));\r\n		 		mianji1+=s;\r\n			}	\r\n		}\r\n		\r\n		for(int j=0;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((x[0]-b[j])*(x[0]-b[j])+(x[1]-b[j+1])*(x[1]-b[j+1]));\r\n		 		q=sqrt((x[0]-b[i])*(x[0]-b[i])+(x[1]-b[i+1])*(x[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 		//printf("%lf %lf %lf",a,q,c);\r\n		 		double t=(a+q+c)/2;\r\n		 		s=sqrt(t*(t-a)*(t-q)*(t-c));\r\n		 		mianji2+=s;\r\n			}	\r\n		}\r\n		\r\n		//printf("\\n%lf",mianji1);\r\n		//printf(" %lf",mianji2);\r\n		if(mianji1==mianji2)\r\n		printf("Case #%d: YES\\n",ya);\r\n		else\r\n		printf("Case #%d: NO\\n",ya);\r\n	}\r\n	return 0;\r\n}'),
(1529, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1530, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\nprintf("15 14 14 14 13");\r\nreturn 0;\r\n}\r\n'),
(1531, '#include<stdio.h>\r\nint main()\r\n\r\n{\r\nint a,b,c,sum=1;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{for(b=1;b<=a;b++)\r\n{\r\nsum*=2;\r\n}\r\nprintf("%d\\n",sum);\r\n\r\n}\r\nreturn  0;\r\n}\r\n'),
(1532, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1533, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 11 10 6 5");\r\n	return 0;\r\n}'),
(1534, '#include<stdio.h>\r\nint main()\r\n{\r\n	int n;\r\n	int a=2;\r\n	for(n=0;;n++)\r\n	a=a*a;\r\n	printf("%d",&a);\r\n}'),
(1535, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 16 13");\r\n	return 0;\r\n}'),
(1536, '#include<stdio.h>\r\n#include<math.h>\r\nint ya=0;\r\nint main()\r\n{   \r\n	double mianji1,mianji2,b[1000],s,a,q,c,x[2];\r\n	int n,i;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		ya++;\r\n		mianji1=0;mianji2=0;s=0;\r\n		for(i=0;i<n*2;i++)\r\n		scanf("%lf",&b[i]);\r\n		scanf("%lf%lf",x,x+1);\r\n		\r\n		for(int j=2;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((b[0]-b[j])*(b[0]-b[j])+(b[1]-b[j+1])*(b[1]-b[j+1]));\r\n		 		q=sqrt((b[0]-b[i])*(b[0]-b[i])+(b[1]-b[i+1])*(b[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 	\r\n		 		double l=(a+q+c)/2;\r\n		 		s=sqrt(l*(l-a)*(l-q)*(l-c));\r\n		 		mianji1+=s;\r\n			}	\r\n		}\r\n		\r\n		for(int j=0;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((x[0]-b[j])*(x[0]-b[j])+(x[1]-b[j+1])*(x[1]-b[j+1]));\r\n		 		q=sqrt((x[0]-b[i])*(x[0]-b[i])+(x[1]-b[i+1])*(x[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 		//printf("%lf %lf %lf",a,q,c);\r\n		 		double t=(a+q+c)/2;\r\n		 		s=sqrt(t*(t-a)*(t-q)*(t-c));\r\n		 		mianji2+=s;\r\n			}	\r\n		}\r\n		\r\n		//printf("\\n%lf",mianji1);\r\n		//printf(" %lf",mianji2);\r\n		if(mianji1==mianji2)\r\n		printf("Case #%d:YES\\n",ya);\r\n		else\r\n		printf("Case #%d:NO\\n",ya);\r\n	}\r\n	return 0;\r\n}'),
(1537, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1538, '#include<stdio.h>\r\n#include<math.h>\r\nint ya=0;\r\nint main()\r\n{   \r\n	double mianji1,mianji2,b[1000],s,a,q,c,x[2];\r\n	int n,i;\r\n	while(scanf("%d",&n)!=EOF)\r\n	{\r\n		ya++;\r\n		mianji1=0;mianji2=0;s=0;\r\n		for(i=0;i<n*2;i++)\r\n		scanf("%lf",&b[i]);\r\n		scanf("%lf%lf",x,x+1);\r\n		\r\n		for(int j=2;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((b[0]-b[j])*(b[0]-b[j])+(b[1]-b[j+1])*(b[1]-b[j+1]));\r\n		 		q=sqrt((b[0]-b[i])*(b[0]-b[i])+(b[1]-b[i+1])*(b[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 	\r\n		 		double l=(a+q+c)/2;\r\n		 		s=sqrt(l*(l-a)*(l-q)*(l-c));\r\n		 		mianji1+=s;\r\n			}	\r\n		}\r\n		\r\n		for(int j=0;j<n*2-4;j+=2)\r\n		{\r\n			for(i=j+2;i<n*2-2;i+=2)\r\n			{\r\n		 		a=sqrt((x[0]-b[j])*(x[0]-b[j])+(x[1]-b[j+1])*(x[1]-b[j+1]));\r\n		 		q=sqrt((x[0]-b[i])*(x[0]-b[i])+(x[1]-b[i+1])*(x[1]-b[i+1]));\r\n		 		c=sqrt((b[i]-b[j])*(b[i]-b[j])+(b[i+1]-b[j+1])*(b[i+1]-b[j+1]));\r\n		 		//printf("%lf %lf %lf",a,q,c);\r\n		 		double t=(a+q+c)/2;\r\n		 		s=sqrt(t*(t-a)*(t-q)*(t-c));\r\n		 		mianji2+=s;\r\n			}	\r\n		}\r\n		\r\n		//printf("\\n%lf",mianji1);\r\n		//printf(" %lf",mianji2);\r\n		if(mianji1==mianji2)\r\n		printf("Case #%d:YES\\n",ya);\r\n		else\r\n		printf("Case #%d:NO\\n",ya);\r\n	}\r\n	return 0;\r\n}'),
(1539, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 14 14 13");\r\n	return 0;\r\n}'),
(1540, '#include<stdio.h>\r\nint main()\r\n\r\n{\r\nint a,b,c,sum=1;\r\nwhile(scanf("%d",&a)!=EOF)\r\n{for(b=1;b<=a;b++)\r\n{\r\nsum*=2;\r\n}\r\nprintf("%d\\n",sum);break;\r\n\r\n}\r\nreturn  0;\r\n}\r\n'),
(1541, '#include<stdio.h>\r\n#include<math.h>\r\n#include<iostream>\r\n\r\nusing namespace std;\r\nlong double f[610];\r\n\r\nlong double fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nvoid main()\r\n{\r\n	int n,c;\r\n	long double ln,pn,a,b;\r\n	c=2;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n		ln=fibonacci_1(n-1)+fibonacci_1(n+1);\r\n\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(ln);\r\n\r\n		if(n==1)\r\n		{\r\n			printf("%d\\n",c);\r\n		}\r\n		else\r\n		{\r\n	    	cout<<pn<<endl;\r\n		}\r\n	}\r\n}\r\n'),
(1542, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 9 10 6 5");\r\n	return 0;\r\n}'),
(1543, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 14 15 14 13");\r\n	return 0;\r\n}'),
(1544, '#include<stdio.h>\r\nint main()\r\n\r\n{\r\nint m,i,j,sum=1;\r\nif(scanf("%d",&m)!=0)\r\n{\r\nfor(i=1;i<=m;i++)\r\n{\r\nsum*=2;\r\n}\r\n}\r\nprintf("%d\\n",sum);\r\nreturn  0;\r\n}\r\n'),
(1545, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n* /\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}\r\n*/\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else if(n==3)\r\n        {\r\n        	printf("NO\\n");\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	//printf("*%d*",liside_p(po,n,p));\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1546, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31427");\r\n	return 0;\r\n}'),
(1547, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07070 0.13208");\r\n	return 0;\r\n}'),
(1548, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1549, '#include <stdio.h>\r\nint main()\r\n{\r\n	int i,j,h,a[100][100];\r\n	while(scanf("%d",&h)!=EOF)	\r\n	{\r\n		for(j=0;j<h;j++)\r\n			for(i=0;i<=j;i++)\r\n				scanf("%d",&a[j][i]);\r\n		for(j=h-1;j>0;j--)\r\n			for(i=0;i<=j;i++)\r\n			{\r\n				if(a[j][i]>a[j][i+1])\r\n					a[j-1][i]=a[j-1][i]+a[j][i];\r\n				else\r\n					a[j-1][i]=a[j-1][i]+a[j][i+1];\r\n			}\r\n			printf("%d\\n",a[0][0]);\r\n	}\r\n	return 0;\r\n}'),
(1550, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1551, '#include<stdio.h>\r\nint main()\r\n\r\n{\r\nint m,i,j,sum=1;\r\n  while(scanf("%d",&m)!=EOF)\r\n{\r\nfor(i=1;i<=m;i++)\r\n{\r\nsum*=2;\r\n}\r\nbreak;\r\n}\r\nprintf("%d\\n",sum);\r\nreturn  0;\r\n}\r\n'),
(1552, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 11 9 6 5");\r\n	return 0;\r\n}'),
(1553, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[601],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1554, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("6 90 9702");\r\n	return 0;\r\n}'),
(1555, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("15 13 11 16 12");\r\n	return 0;\r\n}'),
(1556, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n* /\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}\r\n*/\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else if(n==3)\r\n        {\r\n        	if(liside_p(po,n,p)==2||liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	//printf("*%d*",liside_p(po,n,p));\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1557, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1558, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.07071 0.13208");\r\n	return 0;\r\n}'),
(1559, '#include<iostream>\r\n\r\n#include<math.h>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n	int n,i,j,F[601],Ln;\r\n	double Pn;\r\n	F[0]=0,F[1]=1;\r\n	while(cin>>n)\r\n	{\r\n		double x=1,y=1;\r\n		if(n==0)\r\n		{\r\n			Pn=1;\r\n		}\r\n		else\r\n		{\r\n			for(i=2;i<n+2;i++)\r\n			{\r\n				F[i]=F[i-1]+F[i-2];\r\n			}\r\n			Ln=F[n-1]+F[n+1];\r\n			for(i=0;i<n;i++)\r\n			{\r\n				x*=(1+sqrt(5));\r\n				y*=(1-sqrt(5));\r\n			}\r\n			Pn=(x+y)/Ln;\r\n		}\r\n		cout<<Pn<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1560, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 11 14 11 12");\r\n	return 0;\r\n}'),
(1561, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\nint single,aaa,temp1=1;\r\nint i,n;\r\nwhile(cin>>n)\r\n{\r\nsingle=0;\r\nfor(i=0;i<n;i++)\r\n{\r\ncin>>aaa;\r\nsingle^=aaa;\r\n}\r\ncount<<"case#"<<temp1<<":"<<single<<endl;\r\ntemp1++;\r\n\r\n}\r\nreturn 0;\r\n}'),
(1562, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("0.13208 0.13208");\r\n	return 0;\r\n}'),
(1563, '#include<stdio.h>\r\n#include<math.h>\r\n#include<iostream>\r\n\r\nusing namespace std;\r\nlong double f[610];\r\n\r\nlong double fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nvoid main()\r\n{\r\n	int n,c;\r\n	long double ln,pn,a,b;\r\n	c=2;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n		ln=fibonacci_1(n-1)+fibonacci_1(n+1);\r\n\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(ln);\r\n\r\n		if(n==1)\r\n		{\r\n			printf("%d\\n",c);\r\n		}\r\n		else\r\n		{\r\n	    	cout<<dec<<pn<<endl;\r\n		}\r\n	}\r\n}\r\n'),
(1564, '#include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}'),
(1565, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1566, '#include<stdio.h>\r\n#include<math.h>\r\n#include<iostream>\r\n\r\nusing namespace std;\r\nlong double f[610];\r\n\r\nlong double fibonacci_1(int n)\r\n{\r\n	int i;\r\n	f[0]=0;\r\n	f[1]=1;\r\n	if(n<1)\r\n	{\r\n		return 1;\r\n	}\r\n	else\r\n	{\r\n		for(i=0;i<=n;i++)\r\n		{\r\n			f[i+2]=f[i+1]+f[i];\r\n		}\r\n		return f[n];\r\n	}\r\n}\r\nint main()\r\n{\r\n	int n,c;\r\n	long double ln,pn,a,b;\r\n	c=2;\r\n	b=5.0;\r\nwhile(scanf("%d",&n)!=EOF)\r\n	{\r\n		a=sqrt(b);\r\n		ln=fibonacci_1(n-1)+fibonacci_1(n+1);\r\n\r\n\r\n		pn=(pow((1+a),n)+pow((1-a),n))/(ln);\r\n\r\n		if(n==1)\r\n		{\r\n			printf("%d\\n",c);\r\n		}\r\n		else\r\n		{\r\n	    	cout<<pn<<endl;\r\n		}\r\n	}\r\nreturn 0;\r\n}\r\n'),
(1567, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n*/\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\n/*\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}*/\r\n\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else if(n==3)\r\n        {\r\n        	if(inside_c(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	//printf("*%d*",liside_p(po,n,p));\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("No\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1568, '#include<stdio.h>\r\nint main()\r\n{\r\nint j=0,i,y=0,a;\r\nwhile(~scanf("%d",&i))\r\n{y=0;\r\nwhile(i--)\r\n {scanf("%d",&a);\r\n y^=a;\r\n}\r\nprintf("Case#%d:%d\\n",++j,y);\r\n}\r\nreturn 0;\r\n}'),
(1569, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1570, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("7 9 10 6 5");\r\n	return 0;\r\n}'),
(1571, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31426");\r\n	return 0;\r\n}'),
(1572, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 912 418635");\r\n	return 0;\r\n}'),
(1573, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\nint single,aaa,temp1=1;\r\nint i,n;\r\nwhile(cin>>n)\r\n{\r\nsingle=0;\r\nfor(i=0;i<n;i++)\r\n{\r\ncin>>aaa;\r\nsingle^=aaa;\r\n}\r\ncount<<"case#"<<temp1<<": "<<single<<endl;\r\ntemp1++;\r\n\r\n}\r\nreturn 0;\r\n}\r\n'),
(1574, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1575, ' #include<stdio.h>\r\n\r\nint main()\r\n{\r\n	printf("8 9 9 5 4");\r\n	return 0;\r\n}'),
(1576, '#include <cstdio>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	\r\n	int ans[100][101];\r\n	memset(ans,0,sizeof(ans));\r\n	\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		for(int i = 1; i <= n; ++i)\r\n		{\r\n			for(int j = 1; j <= i;++j)\r\n			{\r\n				cin>>ans[i][j];\r\n			}\r\n		}\r\n		for(int i = n-1; i >= 1; --i)\r\n		{\r\n			for(int j = 1; j <= i; ++j)\r\n			{\r\n				ans[i][j] = max(ans[i+1][j],ans[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<ans[1][1]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1577, '#include <cstdio>\r\n#include <stdlib>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	\r\n	int ans[100][101];\r\n	memset(ans,0,sizeof(ans));\r\n	\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		for(int i = 1; i <= n; ++i)\r\n		{\r\n			for(int j = 1; j <= i;++j)\r\n			{\r\n				cin>>ans[i][j];\r\n			}\r\n		}\r\n		for(int i = n-1; i >= 1; --i)\r\n		{\r\n			for(int j = 1; j <= i; ++j)\r\n			{\r\n				ans[i][j] = max(ans[i+1][j],ans[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<ans[1][1]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1578, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 2163 163296");\r\n	return 0;\r\n}');
INSERT INTO `source_code` (`solution_id`, `source`) VALUES
(1579, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n*/\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\n/*\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}*/\r\n\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else if(n==3)\r\n        {\r\n        	if(inside_c(po,n,p)==0)\r\n        	{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	//printf("*%d*",liside_p(po,n,p));\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1580, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	\r\n	int ans[100][101];\r\n	memset(ans,0,sizeof(ans));\r\n	\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		for(int i = 1; i <= n; ++i)\r\n		{\r\n			for(int j = 1; j <= i;++j)\r\n			{\r\n				cin>>ans[i][j];\r\n			}\r\n		}\r\n		for(int i = n-1; i >= 1; --i)\r\n		{\r\n			for(int j = 1; j <= i; ++j)\r\n			{\r\n				ans[i][j] = max(ans[i+1][j],ans[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<ans[1][1]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1581, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("3 100 256 11111 31494");\r\n	return 0;\r\n}'),
(1582, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("4 45 7252");\r\n	return 0;\r\n}'),
(1583, '#include<iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n	int n,j,i,len[100],sum=0;\r\n	char c[100][100];	\r\n	cin>>n;	\r\n	\r\n	if(n<=100)\r\n	{	\r\n		for(i=0;i<n;i++)\r\n		{\r\n			sum=0;\r\n			cin>>c[i];\r\n			len[i]=strlen(c[i]);\r\n			for(j=0;j<len[i];j++)\r\n			{\r\n				if(c[i][j]==''I''||c[i][j]==''i'')\r\n				{\r\n					if(c[i][j+1]==''V''||c[i][j+1]==''v'')\r\n					{\r\n						sum=sum+4;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''X''||c[i][j+1]==''x'')\r\n					{\r\n						sum=sum+9;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+1;	\r\n				}\r\n				else if(c[i][j]==''V''||c[i][j]==''v'')\r\n				{	\r\n					sum=sum+5;\r\n				}\r\n				else if(c[i][j]==''X''||c[i][j]==''x'')\r\n				{\r\n					if(c[i][j+1]==''L''||c[i][j+1]==''l'')\r\n					{\r\n						sum=sum+40;\r\n						j++;\r\n						break;\r\n					}\r\n					if(c[i][j+1]==''C''||c[i][j+1]==''c'')\r\n					{\r\n						sum=sum+90;\r\n						j++;\r\n						break;\r\n					}\r\n					else sum=sum+10;				\r\n				}\r\n				else if(c[i][j]==''L''||c[i][j]==''l'')\r\n				{	\r\n					sum=sum+50;\r\n				}\r\n				else if(c[i][j]==''C''||c[i][j]==''c'')\r\n				{\r\n					sum=sum+100;\r\n				}\r\n			}\r\n			if(sum<=400)	\r\n				cout<<sum<<endl;		\r\n		}\r\n	}\r\n}'),
(1584, '#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\nint single,aaa,temp1=1;\r\nint i,n;\r\nwhile(cin>>n)\r\n{\r\nsingle=0;\r\nfor(i=0;i<n;i++)\r\n{\r\ncin>>aaa;\r\nsingle^=aaa;\r\n}\r\ncount<<"Case#"<<temp1<<": "<<single<<endl;\r\ntemp1++;\r\n\r\n}\r\nreturn 0;\r\n}\r\n'),
(1585, '#include<stdio.h>\r\nint main()\r\n{\r\nint j=0,i,y=0,a;\r\nwhile(~scanf("%d",&i))\r\n{y=0;\r\nwhile(i--)\r\n {scanf("%d",&a);\r\n y^=a;\r\n}\r\nprintf("Case#%d:%d\\n",++j,y);\r\n}\r\nreturn 0;\r\n}'),
(1586, '#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <string>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n	\r\n	int ans[100][101];\r\n	memset(ans,0,sizeof(ans));\r\n	\r\n	int n;\r\n	while(cin>>n)\r\n	{\r\n		for(int i = 1; i <= n; ++i)\r\n		{\r\n			for(int j = 1; j <= i;++j)\r\n			{\r\n				cin>>ans[i][j];\r\n			}\r\n		}\r\n		for(int i = n-1; i >= 1; --i)\r\n		{\r\n			for(int j = 1; j <= i; ++j)\r\n			{\r\n				ans[i][j] = max(ans[i+1][j],ans[i+1][j+1]);\r\n			}\r\n		}\r\n		cout<<ans[1][1]<<endl;\r\n	}\r\n	return 0;\r\n}'),
(1587, '#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#define INF 999999999.9\r\n#define offset 10000\r\n#define eps 1e-8\r\n\r\n#define zero(x)(((x)>0?(x):-(x))<eps)\r\n#define _sign(x)((x)>eps?1:((x)<-eps?2:0))\r\n\r\n//const double eps = 1e-8;\r\nconst int inf = 99999999;\r\nconst int max_x = 1000;\r\nconst int max_y = 1000;\r\n struct point\r\n {\r\n 	double x,y;\r\n 	double dis;\r\n }p[55],po,stack[55];\r\n \r\n double Dis(double x1,double y1, double x2,double y2)\r\n {\r\n 	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n }\r\n int Cmp_PolarAngel(struct point p1,struct point p2,struct point pb)\r\n {\r\n 	double delta = (p1.x-pb.x)*(p2.y-pb.y)-(p2.x-pb.x)*(p1.y-pb.y);\r\n 	if(delta<0.0)return 1;\r\n 	else if(delta==0.0)return 0;\r\n 	else return -1;\r\n }\r\n bool Is_LeftTurn(struct point p3,struct point p2,struct point p1)\r\n {\r\n 	\r\n 	int type=Cmp_PolarAngel(p3,p1,p2);\r\n 	if(type<0)return true;\r\n 	return false;\r\n	}\r\nint Cmp(const void*p1,const void*p2)\r\n{\r\n	struct point*a1=(struct point*)p1;\r\n	struct point*a2=(struct point*)p2;\r\n	int type=Cmp_PolarAngel(*a1,*a2,po);\r\n	if(type<0)return -1;\r\n	else if(type==0)\r\n	{\r\n		\r\n		if(a1->dis<a2->dis)return -1;\r\n		else if(a1->dis==a2->dis)return 0;\r\n		else return 1;\r\n	}\r\n	else return 1;\r\n	\r\n}\r\n \r\nvoid Solve(int n)\r\n{\r\n	int i,k;\r\n	po.x=po.y=INF;\r\n	for(i=0;i<n;i++)\r\n	{\r\n		//scanf("%lf%lf",&p[i].x,&p[i].y);\r\n		if(p[i].y<po.y)\r\n		{\r\n			po.y=p[i].y;\r\n			po.x=p[i].x;\r\n			k=i;\r\n		}\r\n		else if(p[i].x<po.y)\r\n		{\r\n			if(p[i].x<po.x)\r\n			{\r\n				po.x=p[i].x;\r\n				k=i;\r\n			}\r\n		}\r\n	}\r\n	p[k]=p[0];\r\n	p[0]=po;\r\n	for(i=1;i<n;i++)\r\n	{\r\n		p[i].dis=Dis(p[i].x,p[i].y,po.x,po.y);\r\n	}\r\n	qsort(p+1,n-1,sizeof(struct point),Cmp);\r\n	int tot = 1;\r\n	/*\r\n	for(i=2;i<n;i++)\r\n	{\r\n		if(Cmp_PolarAngel(p[i],p[i-1],po))\r\n		{\r\n			p[tot++] = p[n-1];\r\n		}\r\n	}*/\r\n	int top = 1;\r\n	stack[0]=p[0];\r\n	stack[1]=p[1];\r\n	for(i=2;i<tot;i++)\r\n	{\r\n		while(top>=1 && Is_LeftTurn(p[i],stack[top],stack[top-1]) == false)\r\n		top--;\r\n		stack[++top]=p[i];\r\n	}\r\n}\r\n\r\ndouble xmult(point p1,point p2, point p0)\r\n{\r\n	//return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.y-a.y);\r\n	return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);\r\n}\r\n /*\r\nint zero(double x){\r\n	if(x>eps)\r\n	  return 1;\r\n 	if(x<-eps)\r\n 	  return -1;\r\n  	if(x<eps && x>-eps)\r\n  	  return 0;\r\n}\r\nint inPoly(int n,point p1,point p[])\r\n{\r\n	int count;\r\n	int i = 0;\r\n	p[n] = p[0];\r\n	point p2;\r\n	while(i<n)\r\n	{\r\n		p2.x = rand()+max_x;\r\n		p2.y = rand()+max_y;\r\n		for(i=count=0;i<n;i++)\r\n		{\r\n			if(zero(xmult(p1,p[i],p[i+1])) ==0 && (p[i].x-p1.x)*(p[i+1].x-p1.x)<eps && (p[i].y-p1.y)*(p[i+1].y-p1.y)<eps)\r\n			  return true;\r\n 			else if(zero(xmult(p1,p2,p[i])) == 0)\r\n 			  break;\r\n		  	else if(xmult(p[i],p[i+1],p1)*xmult(p[i],p2,p[i+1])>eps && xmult(p1,p2,p[i]) * xmult(p1,p[i+1],p2)>eps)\r\n		  	  count++;\r\n		}	\r\n	}\r\n	return count& 1;\r\n}\r\n*/\r\nint inside_c(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[1]|s[2];\r\n}\r\n/*\r\nint inside_2(point q,int n,point *p)\r\n{\r\n	int i,s[3]={1,1,1};\r\n	for(i=0;i<n&&s[0]&&s[1]|s[2];i++)\r\n	{\r\n		s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;\r\n	}\r\n	return s[0]&&[1]|s[2];\r\n}*/\r\n\r\nint liside_p(point q,int n,point *p,int on_edge=2)\r\n{\r\n	point q2;\r\n	int i=0,count;\r\n	while(i<n)\r\n		for(count=i=0,q2.x= rand()+offset,q2.y=rand()+offset;i<n;i++)\r\n		{\r\n			if(zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)\r\n			{\r\n				return on_edge;\r\n			}\r\n			else if(zero(xmult(q,q2,p[i]))) \r\n				break;\r\n			else if(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)\r\n			count++;\r\n		}\r\n		return count&1;\r\n}\r\n\r\n \r\n double max(double a,double b)\r\n {\r\n 	return a>b?a:b;\r\n }\r\n double min(double a,double b)\r\n {\r\n 	return a<b?a:b;\r\n }\r\n \r\nint main()\r\n{\r\n    int n;\r\n    int count = 1;\r\n    int i;\r\n    while(~scanf("%d",&n))\r\n    {\r\n        for(i=0;i<n;i++)\r\n        {\r\n        	scanf("%lf%lf",&p[i].x,&p[i].y);\r\n        }\r\n        scanf("%lf%lf",&po.x,&po.y);\r\n        printf("Case #%d: ",count);count++;\r\n        if(n==1)\r\n        {\r\n        	if((p[0].x == po.x) && (p[0].x == po.y))\r\n        	{\r\n	        	printf("YES\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("NO\\n");\r\n        	}\r\n        }\r\n        else if(n==2)\r\n        {\r\n        	double temp;\r\n        	temp = (p[1].x-p[0].x)*(po.y-p[0].y)-(p[1].y-p[0].y)*(po.x-p[0].x);\r\n        	if(temp!=0||po.x>max(p[0].x,p[1].x)||po.x<min(p[0].x,p[1].x)||po.y>max(p[0].y,p[1].y)||po.y<min(p[0].y,p[1].y))\r\n			{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else if(n==3)\r\n        {\r\n        	if(inside_c(po,n,p)==0)\r\n        	{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n        else\r\n		{\r\n			Solve(n);\r\n        	//paixu \r\n        	//if(inPoly(n,po,p)==true)\r\n        	//printf("*%d*",liside_p(po,n,p));\r\n        	if(liside_p(po,n,p)==0)\r\n        	{\r\n	        	printf("NO\\n");\r\n	        }\r\n	        else\r\n	        {\r\n        		printf("YES\\n");\r\n        	}\r\n        }\r\n    }\r\n    return 0;\r\n}'),
(1588, '#include<stdio.h>\r\nint main()\r\n{\r\n	printf("9 1854 1334961");\r\n	return 0;\r\n}');

-- --------------------------------------------------------

--
-- 表的结构 `student_information`
--

CREATE TABLE IF NOT EXISTS `student_information` (
  `id` int(11) NOT NULL,
  `student_school` varchar(10) CHARACTER SET utf8 NOT NULL,
  `student_major` varchar(10) CHARACTER SET utf8 NOT NULL,
  `student_grade` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- 转存表中的数据 `student_information`
--

INSERT INTO `student_information` (`id`, `student_school`, `student_major`, `student_grade`) VALUES
(8010101, '机械工程学院', '机自', 8),
(8010102, '机械工程学院', '机自', 8),
(8010103, '机械工程学院', '机自', 8),
(8010104, '机械工程学院', '机自', 8),
(8010105, '机械工程学院', '机自', 8),
(8010106, '机械工程学院', '机自', 8),
(8010201, '机械工程学院', '工业工程', 8),
(8010202, '机械工程学院', '工业工程', 8),
(8010301, '机械工程学院', '工业设计', 8),
(8010302, '机械工程学院', '工业设计', 8),
(8010401, '机械工程学院', '车辆工程', 8),
(8010501, '机械工程学院', '物流工程', 8),
(8010601, '机械工程学院', '体育装备', 8),
(8020101, '材料科学与工程学院', '成型控制', 8),
(8020102, '材料科学与工程学院', '成型控制', 8),
(8020103, '材料科学与工程学院', '成型控制', 8),
(8020104, '材料科学与工程学院', '成型控制', 8),
(8020105, '材料科学与工程学院', '成型控制', 8),
(8020106, '材料科学与工程学院', '成型控制', 8),
(8020107, '材料科学与工程学院', '成型控制', 8),
(8020108, '材料科学与工程学院', '成型控制', 8),
(8020201, '材料科学与工程学院', '金属材料', 8),
(8020202, '材料科学与工程学院', '金属材料', 8),
(8020301, '材料科学与工程学院', '无机', 8),
(8020302, '材料科学与工程学院', '无机', 8),
(8030101, '电气工程学院', '电气工程', 8),
(8030102, '电气工程学院', '电气工程', 8),
(8030103, '电气工程学院', '电气工程', 8),
(8030104, '电气工程学院', '电气工程', 8),
(8030105, '电气工程学院', '电气工程', 8),
(8030106, '电气工程学院', '电气工程', 8),
(8030201, '电气工程学院', '自动化', 8),
(8030202, '电气工程学院', '自动化', 8),
(8030203, '电气工程学院', '自动化', 8),
(8030204, '电气工程学院', '自动化', 8),
(8030205, '电气工程学院', '自动化', 8),
(8030301, '电气工程学院', '生物医学', 8),
(8040101, '信息科学与工程学院', '测控技术', 8),
(8040102, '信息科学与工程学院', '测控技术', 8),
(8040103, '信息科学与工程学院', '测控技术', 8),
(8040104, '信息科学与工程学院', '测控技术', 8),
(8040201, '信息科学与工程学院', '电子信息', 8),
(8040202, '信息科学与工程学院', '电子信息', 8),
(8040203, '信息科学与工程学院', '电子信息', 8),
(8040204, '信息科学与工程学院', '电子信息', 8),
(8040301, '信息科学与工程学院', '电子科学', 8),
(8040302, '信息科学与工程学院', '电子科学', 8),
(8040401, '信息科学与工程学院', '通信工程', 8),
(8040402, '信息科学与工程学院', '通信工程', 8),
(8040403, '信息科学与工程学院', '通信工程', 8),
(8040501, '信息科学与工程学院', '计算机', 8),
(8040502, '信息科学与工程学院', '计算机', 8),
(8040503, '信息科学与工程学院', '计算机', 8),
(8040504, '信息科学与工程学院', '计算机', 8),
(8050101, '管理学院', '工程管理', 8),
(8050102, '管理学院', '工程管理', 8),
(8050201, '管理学院', '工商管理', 8),
(8050202, '管理学院', '工商管理', 8),
(8050301, '管理学院', '市场营销', 8),
(8050401, '管理学院', '会计学', 8),
(8050402, '管理学院', '会计学', 8),
(8050501, '管理学院', '物流管理', 8),
(8050502, '管理学院', '物流管理', 8),
(8050601, '管理学院', '电子商务', 8),
(8050602, '管理学院', '电子商务', 8),
(8060101, '文法学院', '法学', 8),
(8060102, '文法学院', '法学', 8),
(8060103, '文法学院', '法学', 8),
(8060104, '文法学院', '法学', 8),
(8060401, '文法学院', '广告学', 8),
(8060402, '文法学院', '广告学', 8),
(8060501, '文法学院', '艺术设计', 8),
(8060502, '文法学院', '艺术设计', 8),
(8070101, '理学院', '计算科学', 8),
(8070201, '理学院', '应用物理', 8),
(8070301, '理学院', '应用化学', 8),
(8070302, '理学院', '应用化学', 8),
(8070303, '理学院', '应用化学', 8),
(8070401, '理学院', '环境工程', 8),
(8070402, '理学院', '环境工程', 8),
(8070501, '理学院', '应用数学', 8),
(8080101, '建筑工程学院', '土木工程', 8),
(8080102, '建筑工程学院', '土木工程', 8),
(8080103, '建筑工程学院', '土木工程', 8),
(8080104, '建筑工程学院', '土木工程', 8),
(8080105, '建筑工程学院', '土木工程', 8),
(8080201, '建筑工程学院', '建筑学', 8),
(8080202, '建筑工程学院', '建筑学', 8),
(8080301, '建筑工程学院', '建筑设备', 8),
(8090101, '外语学院', '英语', 8),
(8090102, '外语学院', '英语', 8),
(8090103, '外语学院', '英语', 8),
(8090104, '外语学院', '英语', 8),
(8100101, '经济学院', '国际贸易', 8),
(8100102, '经济学院', '国际贸易', 8),
(8100103, '经济学院', '国际贸易', 8),
(8100201, '经济学院', '金融学', 8),
(8100202, '经济学院', '金融学', 8),
(8100203, '经济学院', '金融学', 8),
(8100301, '经济学院', '经济学', 8),
(8110101, '国际教育学院', '计算机', 8),
(8110201, '国际教育学院', '会计', 8),
(8110202, '国际教育学院', '会计', 8),
(8110203, '国际教育学院', '会计', 8),
(8110204, '国际教育学院', '会计', 8),
(8110301, '国际教育学院', '国贸', 8),
(8120101, '软件学院', '软件', 8),
(8120102, '软件学院', '软件', 8),
(8120103, '软件学院', '软件', 8),
(8120104, '软件学院', '软件', 8),
(8120105, '软件学院', '软件', 8),
(8120106, '软件学院', '软件', 8),
(8120301, '软件学院', '软件工程', 8),
(8120302, '软件学院', '软件工程', 8),
(9010101, '机械工程学院', '机自', 9),
(9010102, '机械工程学院', '机自', 9),
(9010103, '机械工程学院', '机自', 9),
(9010104, '机械工程学院', '机自', 9),
(9010105, '机械工程学院', '机自', 9),
(9010106, '机械工程学院', '机自', 9),
(9010201, '机械工程学院', '工业工程', 9),
(9010202, '机械工程学院', '工业工程', 9),
(9010301, '机械工程学院', '工业设计', 9),
(9010302, '机械工程学院', '工业设计', 9),
(9010401, '机械工程学院', '车辆工程', 9),
(9010501, '机械工程学院', '物流工程', 9),
(9010601, '机械工程学院', '体育装备', 9),
(9020101, '材料科学与工程学院', '成型控制', 9),
(9020102, '材料科学与工程学院', '成型控制', 9),
(9020103, '材料科学与工程学院', '成型控制', 9),
(9020104, '材料科学与工程学院', '成型控制', 9),
(9020105, '材料科学与工程学院', '成型控制', 9),
(9020106, '材料科学与工程学院', '成型控制', 9),
(9020107, '材料科学与工程学院', '成型控制', 9),
(9020108, '材料科学与工程学院', '成型控制', 9),
(9020201, '材料科学与工程学院', '金属材料', 9),
(9020202, '材料科学与工程学院', '金属材料', 9),
(9020301, '材料科学与工程学院', '无机', 9),
(9020302, '材料科学与工程学院', '无机', 9),
(9030101, '电气工程学院', '电气工程', 9),
(9030102, '电气工程学院', '电气工程', 9),
(9030103, '电气工程学院', '电气工程', 9),
(9030104, '电气工程学院', '电气工程', 9),
(9030105, '电气工程学院', '电气工程', 9),
(9030106, '电气工程学院', '电气工程', 9),
(9030201, '电气工程学院', '自动化', 9),
(9030202, '电气工程学院', '自动化', 9),
(9030203, '电气工程学院', '自动化', 9),
(9030204, '电气工程学院', '自动化', 9),
(9030205, '电气工程学院', '自动化', 9),
(9030301, '电气工程学院', '生物医学', 9),
(9040101, '信息科学与工程学院', '测控技术', 9),
(9040102, '信息科学与工程学院', '测控技术', 9),
(9040103, '信息科学与工程学院', '测控技术', 9),
(9040201, '信息科学与工程学院', '电子信息', 9),
(9040202, '信息科学与工程学院', '电子信息', 9),
(9040203, '信息科学与工程学院', '电子信息', 9),
(9040204, '信息科学与工程学院', '电子信息', 9),
(9040301, '信息科学与工程学院', '电子科学', 9),
(9040302, '信息科学与工程学院', '电子科学', 9),
(9040401, '信息科学与工程学院', '通信工程', 9),
(9040402, '信息科学与工程学院', '通信工程', 9),
(9040403, '信息科学与工程学院', '通信工程', 9),
(9040501, '信息科学与工程学院', '计算机', 9),
(9040502, '信息科学与工程学院', '计算机', 9),
(9040503, '信息科学与工程学院', '计算机', 9),
(9040504, '信息科学与工程学院', '计算机', 9),
(9050101, '管理学院', '工程管理', 9),
(9050102, '管理学院', '工程管理', 9),
(9050201, '管理学院', '工商管理', 9),
(9050202, '管理学院', '工商管理', 9),
(9050301, '管理学院', '市场营销', 9),
(9050302, '管理学院', '市场营销', 9),
(9050401, '管理学院', '会计学', 9),
(9050402, '管理学院', '会计学', 9),
(9050501, '管理学院', '物流管理', 9),
(9050502, '管理学院', '物流管理', 9),
(9050601, '管理学院', '电子商务', 9),
(9050602, '管理学院', '电子商务', 9),
(9060101, '文法学院', '法学', 9),
(9060102, '文法学院', '法学', 9),
(9060103, '文法学院', '法学', 9),
(9060104, '文法学院', '法学', 9),
(9060401, '文法学院', '广告学', 9),
(9060402, '文法学院', '广告学', 9),
(9060501, '文法学院', '艺术设计', 9),
(9060502, '文法学院', '艺术设计', 9),
(9070101, '理学院', '计算科学', 9),
(9070102, '理学院', '计算科学', 9),
(9070201, '理学院', '应用物理', 9),
(9070301, '理学院', '应用化学', 9),
(9070302, '理学院', '应用化学', 9),
(9070401, '理学院', '环境工程', 9),
(9070402, '理学院', '环境工程', 9),
(9070501, '理学院', '应用数学', 9),
(9080101, '建筑工程学院', '土木工程', 9),
(9080102, '建筑工程学院', '土木工程', 9),
(9080103, '建筑工程学院', '土木工程', 9),
(9080104, '建筑工程学院', '土木工程', 9),
(9080105, '建筑工程学院', '土木工程', 9),
(9080201, '建筑工程学院', '建筑学', 9),
(9080202, '建筑工程学院', '建筑学', 9),
(9080301, '建筑工程学院', '建筑设备', 9),
(9090101, '外语学院', '英语', 9),
(9090102, '外语学院', '英语', 9),
(9090103, '外语学院', '英语', 9),
(9090104, '外语学院', '英语', 9),
(9100101, '经济学院', '国际贸易', 9),
(9100102, '经济学院', '国际贸易', 9),
(9100103, '经济学院', '国际贸易', 9),
(9100201, '经济学院', '金融学', 9),
(9100202, '经济学院', '金融学', 9),
(9100203, '经济学院', '金融学', 9),
(9100301, '经济学院', '经济学', 9),
(9110201, '国际教育学院', '会计', 9),
(9110202, '国际教育学院', '会计', 9),
(9110203, '国际教育学院', '会计', 9),
(9110301, '国际教育学院', '国贸', 9),
(9120101, '软件学院', '软件', 9),
(9120102, '软件学院', '软件', 9),
(9120103, '软件学院', '软件', 9),
(9120104, '软件学院', '软件', 9),
(9120105, '软件学院', '软件', 9),
(9120106, '软件学院', '软件', 9),
(9120301, '软件学院', '软件工程', 9),
(9120302, '软件学院', '软件工程', 9),
(1001011, '机械工程学院', '机自', 10),
(1001012, '机械工程学院', '机自', 10),
(1001013, '机械工程学院', '机自', 10),
(1001014, '机械工程学院', '机自', 10),
(1001015, '机械工程学院', '机自', 10),
(1001016, '机械工程学院', '机自', 10),
(1001021, '机械工程学院', '工业工程', 10),
(1001022, '机械工程学院', '工业工程', 10),
(1001031, '机械工程学院', '工业设计', 10),
(1001032, '机械工程学院', '工业设计', 10),
(1001041, '机械工程学院', '车辆工程', 10),
(1001042, '机械工程学院', '车辆工程', 10),
(1001051, '机械工程学院', '物流工程', 10),
(1001061, '机械工程学院', '体育装备', 10),
(1002011, '材料科学与工程学院', '成型控制', 10),
(1002012, '材料科学与工程学院', '成型控制', 10),
(1002013, '材料科学与工程学院', '成型控制', 10),
(1002014, '材料科学与工程学院', '成型控制', 10),
(1002015, '材料科学与工程学院', '成型控制', 10),
(1002016, '材料科学与工程学院', '成型控制', 10),
(1002021, '材料科学与工程学院', '金属材料', 10),
(1002022, '材料科学与工程学院', '金属材料', 10),
(1002031, '材料科学与工程学院', '无机', 10),
(1002032, '材料科学与工程学院', '无机', 10),
(1003011, '电气工程学院', '电气工程', 10),
(1003012, '电气工程学院', '电气工程', 10),
(1003013, '电气工程学院', '电气工程', 10),
(1003014, '电气工程学院', '电气工程', 10),
(1003015, '电气工程学院', '电气工程', 10),
(1003016, '电气工程学院', '电气工程', 10),
(1003021, '电气工程学院', '自动化', 10),
(1003022, '电气工程学院', '自动化', 10),
(1003023, '电气工程学院', '自动化', 10),
(1003024, '电气工程学院', '自动化', 10),
(1003025, '电气工程学院', '自动化', 10),
(1003026, '电气工程学院', '自动化', 10),
(1003031, '电气工程学院', '生物医学', 10),
(1004011, '信息科学与工程学院', '测控技术', 10),
(1004012, '信息科学与工程学院', '测控技术', 10),
(1004013, '信息科学与工程学院', '测控技术', 10),
(1004014, '信息科学与工程学院', '测控技术', 10),
(1004021, '信息科学与工程学院', '电子信息', 10),
(1004022, '信息科学与工程学院', '电子信息', 10),
(1004023, '信息科学与工程学院', '电子信息', 10),
(1004031, '信息科学与工程学院', '电子科学', 10),
(1004032, '信息科学与工程学院', '电子科学', 10),
(1004041, '信息科学与工程学院', '通信工程', 10),
(1004042, '信息科学与工程学院', '通信工程', 10),
(1004043, '信息科学与工程学院', '通信工程', 10),
(1004051, '信息科学与工程学院', '计算机', 10),
(1004052, '信息科学与工程学院', '计算机', 10),
(1004053, '信息科学与工程学院', '计算机', 10),
(1004054, '信息科学与工程学院', '计算机', 10),
(1005011, '管理学院', '工程管理', 10),
(1005012, '管理学院', '工程管理', 10),
(1005021, '管理学院', '工商管理', 10),
(1005022, '管理学院', '工商管理', 10),
(1005031, '管理学院', '市场营销', 10),
(1005032, '管理学院', '市场营销', 10),
(1005041, '管理学院', '会计学', 10),
(1005042, '管理学院', '会计学', 10),
(1005051, '管理学院', '物流管理', 10),
(1005052, '管理学院', '物流管理', 10),
(1005061, '管理学院', '电子商务', 10),
(1006011, '文法学院', '法学', 10),
(1006012, '文法学院', '法学', 10),
(1006013, '文法学院', '法学', 10),
(1006041, '文法学院', '广告学', 10),
(1006042, '文法学院', '广告学', 10),
(1006051, '文法学院', '艺术设计', 10),
(1006052, '文法学院', '艺术设计', 10),
(1007011, '理学院', '计算科学', 10),
(1007012, '理学院', '计算科学', 10),
(1007021, '理学院', '应用物理', 10),
(1007031, '理学院', '应用化学', 10),
(1007032, '理学院', '应用化学', 10),
(1007033, '理学院', '应用化学', 10),
(1007041, '理学院', '环境工程', 10),
(1007042, '理学院', '环境工程', 10),
(1007051, '理学院', '应用数学', 10),
(1008011, '建筑工程学院', '土木工程', 10),
(1008012, '建筑工程学院', '土木工程', 10),
(1008013, '建筑工程学院', '土木工程', 10),
(1008014, '建筑工程学院', '土木工程', 10),
(1008015, '建筑工程学院', '土木工程', 10),
(1008016, '建筑工程学院', '土木工程', 10),
(1008021, '建筑工程学院', '建筑学', 10),
(1008022, '建筑工程学院', '建筑学', 10),
(1008031, '建筑工程学院', '建筑设备', 10),
(1008032, '建筑工程学院', '建筑设备', 10),
(1009011, '外语学院', '英语', 10),
(1009012, '外语学院', '英语', 10),
(1009013, '外语学院', '英语', 10),
(1009014, '外语学院', '英语', 10),
(1009021, '外语学院', '日语', 10),
(1010011, '经济学院', '国际贸易', 10),
(1010012, '经济学院', '国际贸易', 10),
(1010013, '经济学院', '国际贸易', 10),
(1010021, '经济学院', '金融学', 10),
(1010022, '经济学院', '金融学', 10),
(1010023, '经济学院', '金融学', 10),
(1010031, '经济学院', '经济学', 10),
(1011021, '国际教育学院', '会计', 10),
(1011022, '国际教育学院', '会计', 10),
(1011031, '国际教育学院', '国贸', 10),
(1012011, '软件学院', '软件', 10),
(1012012, '软件学院', '软件', 10),
(1012013, '软件学院', '软件', 10),
(1012014, '软件学院', '软件', 10),
(1012015, '软件学院', '软件', 10),
(1012016, '软件学院', '软件', 10),
(1012031, '软件学院', '软件工程', 10),
(1012032, '软件学院', '软件工程', 10),
(1012033, '软件学院', '软件工程', 10),
(1015011, '新能源工程学院', '风能', 10),
(1015012, '新能源工程学院', '风能', 10),
(1101011, '机械工程学院', '机自', 11),
(1101012, '机械工程学院', '机自', 11),
(1101013, '机械工程学院', '机自', 11),
(1101014, '机械工程学院', '机自', 11),
(1101015, '机械工程学院', '机自', 11),
(1101016, '机械工程学院', '机自', 11),
(1101021, '机械工程学院', '工业工程', 11),
(1101022, '机械工程学院', '工业工程', 11),
(1101031, '机械工程学院', '工业设计', 11),
(1101041, '机械工程学院', '车辆工程', 11),
(1101042, '机械工程学院', '车辆工程', 11),
(1101043, '机械工程学院', '车辆工程', 11),
(1101051, '机械工程学院', '物流工程', 11),
(1101077, '机械工程学院', '机自', 11),
(1101078, '机械工程学院', '机自', 11),
(1102011, '材料科学与工程学院', '成型控制', 11),
(1102012, '材料科学与工程学院', '成型控制', 11),
(1102013, '材料科学与工程学院', '成型控制', 11),
(1102014, '材料科学与工程学院', '成型控制', 11),
(1102015, '材料科学与工程学院', '成型控制', 11),
(1102016, '材料科学与工程学院', '成型控制', 11),
(1102021, '材料科学与工程学院', '金属材料', 11),
(1102022, '材料科学与工程学院', '金属材料', 11),
(1102031, '材料科学与工程学院', '无机', 11),
(1102032, '材料科学与工程学院', '无机', 11),
(1102041, '材料科学与工程学院', '焊接', 11),
(1103011, '电气工程学院', '电气工程', 11),
(1103012, '电气工程学院', '电气工程', 11),
(1103013, '电气工程学院', '电气工程', 11),
(1103014, '电气工程学院', '电气工程', 11),
(1103015, '电气工程学院', '电气工程', 11),
(1103016, '电气工程学院', '电气工程', 11),
(1103017, '电气工程学院', '电气工程', 11),
(1103018, '电气工程学院', '电气工程', 11),
(1103021, '电气工程学院', '自动化', 11),
(1103022, '电气工程学院', '自动化', 11),
(1103023, '电气工程学院', '自动化', 11),
(1103024, '电气工程学院', '自动化', 11),
(1103025, '电气工程学院', '自动化', 11),
(1103026, '电气工程学院', '自动化', 11),
(1103031, '电气工程学院', '生物医学', 11),
(1104011, '信息科学与工程学院', '测控技术', 11),
(1104012, '信息科学与工程学院', '测控技术', 11),
(1104013, '信息科学与工程学院', '测控技术', 11),
(1104014, '信息科学与工程学院', '测控技术', 11),
(1104021, '信息科学与工程学院', '电子信息', 11),
(1104022, '信息科学与工程学院', '电子信息', 11),
(1104023, '信息科学与工程学院', '电子信息', 11),
(1104031, '信息科学与工程学院', '电子科学', 11),
(1104032, '信息科学与工程学院', '电子科学', 11),
(1104041, '信息科学与工程学院', '通信工程', 11),
(1104042, '信息科学与工程学院', '通信工程', 11),
(1104043, '信息科学与工程学院', '通信工程', 11),
(1104051, '信息科学与工程学院', '计算机', 11),
(1104052, '信息科学与工程学院', '计算机', 11),
(1104053, '信息科学与工程学院', '计算机', 11),
(1104071, '信息科学与工程学院', '智能科学', 11),
(1105011, '管理学院', '工程管理', 11),
(1105012, '管理学院', '工程管理', 11),
(1105021, '管理学院', '工商管理', 11),
(1105022, '管理学院', '工商管理', 11),
(1105031, '管理学院', '市场营销', 11),
(1105032, '管理学院', '市场营销', 11),
(1105041, '管理学院', '会计学', 11),
(1105042, '管理学院', '会计学', 11),
(1105043, '管理学院', '会计学', 11),
(1105051, '管理学院', '物流管理', 11),
(1105052, '管理学院', '物流管理', 11),
(1105061, '管理学院', '电子商务', 11),
(1106011, '文法学院', '法学', 11),
(1106012, '文法学院', '法学', 11),
(1106041, '文法学院', '广告学', 11),
(1106042, '文法学院', '广告学', 11),
(1106051, '文法学院', '艺术设计', 11),
(1106052, '文法学院', '艺术设计', 11),
(1106053, '文法学院', '艺术设计', 11),
(1107011, '理学院', '计算科学', 11),
(1107012, '理学院', '计算科学', 11),
(1107021, '理学院', '应用物理', 11),
(1107031, '理学院', '应用化学', 11),
(1107032, '理学院', '应用化学', 11),
(1107041, '理学院', '环境工程', 11),
(1107042, '理学院', '环境工程', 11),
(1107051, '理学院', '应用数学', 11),
(1107061, '理学院', '功能材料', 11),
(1108011, '建筑工程学院', '土木工程', 11),
(1108012, '建筑工程学院', '土木工程', 11),
(1108013, '建筑工程学院', '土木工程', 11),
(1108014, '建筑工程学院', '土木工程', 11),
(1108015, '建筑工程学院', '土木工程', 11),
(1108016, '建筑工程学院', '土木工程', 11),
(1108021, '建筑工程学院', '建筑学', 11),
(1108022, '建筑工程学院', '建筑学', 11),
(1108031, '建筑工程学院', '建筑设备', 11),
(1108032, '建筑工程学院', '建筑设备', 11),
(1109011, '外语学院', '英语', 11),
(1109012, '外语学院', '英语', 11),
(1109021, '外语学院', '日语', 11),
(1110011, '经济学院', '国际贸易', 11),
(1110012, '经济学院', '国际贸易', 11),
(1110021, '经济学院', '金融学', 11),
(1110022, '经济学院', '金融学', 11),
(1110031, '经济学院', '经济学', 11),
(1110032, '经济学院', '经济学', 11),
(1111021, '国际教育学院', '会计（', 11),
(1111022, '国际教育学院', '会计（', 11),
(1112011, '软件学院', '软件', 11),
(1112012, '软件学院', '软件', 11),
(1112013, '软件学院', '软件', 11),
(1112014, '软件学院', '软件', 11),
(1112015, '软件学院', '软件', 11),
(1112031, '软件学院', '软件工程', 11),
(1112032, '软件学院', '软件工程', 11),
(1112033, '软件学院', '软件工程', 11),
(1115011, '新能源工程学院', '风能', 11),
(1115012, '新能源工程学院', '风能', 11),
(1201011, '机械工程学院', '机自', 12),
(1201012, '机械工程学院', '机自', 12),
(1201013, '机械工程学院', '机自', 12),
(1201014, '机械工程学院', '机自', 12),
(1201015, '机械工程学院', '机自', 12),
(1201016, '机械工程学院', '机自', 12),
(1201017, '机械工程学院', '机自', 12),
(1201021, '机械工程学院', '工业工程', 12),
(1201022, '机械工程学院', '工业工程', 12),
(1201031, '机械工程学院', '工业设计', 12),
(1201041, '机械工程学院', '车辆工程', 12),
(1201042, '机械工程学院', '车辆工程', 12),
(1201043, '机械工程学院', '车辆工程', 12),
(1201051, '机械工程学院', '物流工程', 12),
(1201077, '机械工程学院', '机自', 12),
(1201079, '机械工程学院', '机自', 12),
(1202011, '材料科学与工程学院', '成型控制', 12),
(1202012, '材料科学与工程学院', '成型控制', 12),
(1202013, '材料科学与工程学院', '成型控制', 12),
(1202014, '材料科学与工程学院', '成型控制', 12),
(1202021, '材料科学与工程学院', '金属材料', 12),
(1202022, '材料科学与工程学院', '金属材料', 12),
(1202031, '材料科学与工程学院', '无机', 12),
(1202032, '材料科学与工程学院', '无机', 12),
(1202041, '材料科学与工程学院', '焊接', 12),
(1202042, '材料科学与工程学院', '焊接', 12),
(1203011, '电气工程学院', '电气工程', 12),
(1203012, '电气工程学院', '电气工程', 12),
(1203013, '电气工程学院', '电气工程', 12),
(1203014, '电气工程学院', '电气工程', 12),
(1203015, '电气工程学院', '电气工程', 12),
(1203016, '电气工程学院', '电气工程', 12),
(1203017, '电气工程学院', '电气工程', 12),
(1203018, '电气工程学院', '电气工程', 12),
(1203021, '电气工程学院', '自动化', 12),
(1203022, '电气工程学院', '自动化', 12),
(1203023, '电气工程学院', '自动化', 12),
(1203024, '电气工程学院', '自动化', 12),
(1203025, '电气工程学院', '自动化', 12),
(1203026, '电气工程学院', '自动化', 12),
(1203031, '电气工程学院', '生物医学', 12),
(1203032, '电气工程学院', '生物医学', 12),
(1204011, '信息科学与工程学院', '测控技术', 12),
(1204012, '信息科学与工程学院', '测控技术', 12),
(1204013, '信息科学与工程学院', '测控技术', 12),
(1204014, '信息科学与工程学院', '测控技术', 12),
(1204021, '信息科学与工程学院', '电子信息', 12),
(1204022, '信息科学与工程学院', '电子信息', 12),
(1204023, '信息科学与工程学院', '电子信息', 12),
(1204031, '信息科学与工程学院', '电子科学', 12),
(1204032, '信息科学与工程学院', '电子科学', 12),
(1204041, '信息科学与工程学院', '通信工程', 12),
(1204042, '信息科学与工程学院', '通信工程', 12),
(1204043, '信息科学与工程学院', '通信工程', 12),
(1204051, '信息科学与工程学院', '计算机', 12),
(1204052, '信息科学与工程学院', '计算机', 12),
(1204063, '信息科学与工程学院', '计算机', 12),
(1204071, '信息科学与工程学院', '智能科学', 12),
(1205011, '管理学院', '工程管理', 12),
(1205012, '管理学院', '工程管理', 12),
(1205021, '管理学院', '工商管理', 12),
(1205022, '管理学院', '工商管理', 12),
(1205031, '管理学院', '市场营销', 12),
(1205032, '管理学院', '市场营销', 12),
(1205041, '管理学院', '会计学', 12),
(1205042, '管理学院', '会计学', 12),
(1205051, '管理学院', '物流管理', 12),
(1205052, '管理学院', '物流管理', 12),
(1205061, '管理学院', '电子商务', 12),
(1205062, '管理学院', '电子商务', 12),
(1206011, '文法学院', '法学', 12),
(1206012, '文法学院', '法学', 12),
(1206041, '文法学院', '广告学', 12),
(1206042, '文法学院', '广告学', 12),
(1206051, '文法学院', '艺术设计', 12),
(1206052, '文法学院', '艺术设计', 12),
(1206053, '文法学院', '艺术设计', 12),
(1207011, '理学院', '计算科学', 12),
(1207012, '理学院', '计算科学', 12),
(1207021, '理学院', '应用物理', 12),
(1207031, '理学院', '应用化学', 12),
(1207032, '理学院', '应用化学', 12),
(1207041, '理学院', '环境工程', 12),
(1207042, '理学院', '环境工程', 12),
(1207051, '理学院', '应用数学', 12),
(1207061, '理学院', '功能材料', 12),
(1208011, '建筑工程学院', '土木工程', 12),
(1208012, '建筑工程学院', '土木工程', 12),
(1208013, '建筑工程学院', '土木工程', 12),
(1208014, '建筑工程学院', '土木工程', 12),
(1208015, '建筑工程学院', '土木工程', 12),
(1208016, '建筑工程学院', '土木工程', 12),
(1208021, '建筑工程学院', '建筑学', 12),
(1208022, '建筑工程学院', '建筑学', 12),
(1208031, '建筑工程学院', '建筑设备', 12),
(1208032, '建筑工程学院', '建筑设备', 12),
(1209011, '外语学院', '英语', 12),
(1209012, '外语学院', '英语', 12),
(1209021, '外语学院', '日语', 12),
(1209022, '外语学院', '日语', 12),
(1210011, '经济学院', '国际贸易', 12),
(1210012, '经济学院', '国际贸易', 12),
(1210021, '经济学院', '金融学', 12),
(1210022, '经济学院', '金融学', 12),
(1210023, '经济学院', '金融学', 12),
(1210031, '经济学院', '经济学', 12),
(1210032, '经济学院', '经济学', 12),
(1211021, '国际教育学院', '会计', 12),
(1211022, '国际教育学院', '会计', 12),
(1211031, '国际教育学院', '国贸', 12),
(1211032, '国际教育学院', '国贸', 12),
(1212011, '软件学院', '软件', 12),
(1212012, '软件学院', '软件', 12),
(1212013, '软件学院', '软件', 12),
(1212014, '软件学院', '软件', 12),
(1212031, '软件学院', '软件工程', 12),
(1212032, '软件学院', '软件工程', 12),
(1212033, '软件学院', '软件工程', 12),
(1212034, '软件学院', '软件工程', 12),
(1215011, '新能源工程学院', '风能', 12),
(1215012, '新能源工程学院', '风能', 12),
(1301011, '机械工程学院', '机自', 13),
(1301012, '机械工程学院', '机自', 13),
(1301013, '机械工程学院', '机自', 13),
(1301014, '机械工程学院', '机自', 13),
(1301015, '机械工程学院', '机自', 13),
(1301016, '机械工程学院', '机自', 13),
(1301017, '机械工程学院', '机自', 13),
(1301018, '机械工程学院', '机自', 13),
(1301019, '机械工程学院', '机自', 13),
(1301021, '机械工程学院', '工业工程', 13),
(1301022, '机械工程学院', '工业工程', 13),
(1301031, '机械工程学院', '工业设计', 13),
(1301041, '机械工程学院', '车辆工程', 13),
(1301042, '机械工程学院', '车辆工程', 13),
(1301043, '机械工程学院', '车辆工程', 13),
(1301051, '机械工程学院', '物流工程', 13),
(1302001, '材料科学与工程学院', '材料', 13),
(1302002, '材料科学与工程学院', '材料', 13),
(1302003, '材料科学与工程学院', '材料', 13),
(1302004, '材料科学与工程学院', '材料', 13),
(1302005, '材料科学与工程学院', '材料', 13),
(1302006, '材料科学与工程学院', '材料', 13),
(1302007, '材料科学与工程学院', '材料', 13),
(1302008, '材料科学与工程学院', '材料', 13),
(1302009, '材料科学与工程学院', '材料', 13),
(1302010, '材料科学与工程学院', '材料', 13),
(1303011, '电气工程学院', '电气工程', 13),
(1303012, '电气工程学院', '电气工程', 13),
(1303013, '电气工程学院', '电气工程', 13),
(1303014, '电气工程学院', '电气工程', 13),
(1303015, '电气工程学院', '电气工程', 13),
(1303016, '电气工程学院', '电气工程', 13),
(1303017, '电气工程学院', '电气工程', 13),
(1303018, '电气工程学院', '电气工程', 13),
(1303021, '电气工程学院', '自动化', 13),
(1303022, '电气工程学院', '自动化', 13),
(1303023, '电气工程学院', '自动化', 13),
(1303024, '电气工程学院', '自动化', 13),
(1303025, '电气工程学院', '自动化', 13),
(1303026, '电气工程学院', '自动化', 13),
(1303031, '电气工程学院', '生物医学', 13),
(1303032, '电气工程学院', '生物医学', 13),
(1304011, '信息科学与工程学院', '测控技术', 13),
(1304012, '信息科学与工程学院', '测控技术', 13),
(1304013, '信息科学与工程学院', '测控技术', 13),
(1304014, '信息科学与工程学院', '测控技术', 13),
(1304021, '信息科学与工程学院', '电子信息', 13),
(1304022, '信息科学与工程学院', '电子信息', 13),
(1304023, '信息科学与工程学院', '电子信息', 13),
(1304031, '信息科学与工程学院', '电子科学', 13),
(1304032, '信息科学与工程学院', '电子科学', 13),
(1304041, '信息科学与工程学院', '通信工程', 13),
(1304042, '信息科学与工程学院', '通信工程', 13),
(1304043, '信息科学与工程学院', '通信工程', 13),
(1304051, '信息科学与工程学院', '计算机', 13),
(1304052, '信息科学与工程学院', '计算机', 13),
(1304053, '信息科学与工程学院', '计算机', 13),
(1304071, '信息科学与工程学院', '智能科学', 13),
(1305011, '管理学院', '工程管理', 13),
(1305012, '管理学院', '工程管理', 13),
(1305021, '管理学院', '工商管理', 13),
(1305022, '管理学院', '工商管理', 13),
(1305031, '管理学院', '市场营销', 13),
(1305032, '管理学院', '市场营销', 13),
(1305041, '管理学院', '会计学', 13),
(1305042, '管理学院', '会计学', 13),
(1305051, '管理学院', '物流管理', 13),
(1305052, '管理学院', '物流管理', 13),
(1305061, '管理学院', '电子商务', 13),
(1305062, '管理学院', '电子商务', 13),
(1306011, '文法学院', '法学', 13),
(1306012, '文法学院', '法学', 13),
(1306041, '文法学院', '广告学', 13),
(1306042, '文法学院', '广告学', 13),
(1306061, '文法学院', '视觉传达', 13),
(1306062, '文法学院', '视觉传达', 13),
(1306071, '文法学院', '环境设计', 13),
(1306072, '文法学院', '环境设计', 13),
(1307011, '理学院', '计算科学', 13),
(1307012, '理学院', '计算科学', 13),
(1307021, '理学院', '应用物理', 13),
(1307031, '理学院', '应用化学', 13),
(1307032, '理学院', '应用化学', 13),
(1307041, '理学院', '环境工程', 13),
(1307042, '理学院', '环境工程', 13),
(1307051, '理学院', '应用数学', 13),
(1307061, '理学院', '功能材料', 13),
(1308011, '建筑工程学院', '土木工程', 13),
(1308012, '建筑工程学院', '土木工程', 13),
(1308013, '建筑工程学院', '土木工程', 13),
(1308014, '建筑工程学院', '土木工程', 13),
(1308015, '建筑工程学院', '土木工程', 13),
(1308016, '建筑工程学院', '土木工程', 13),
(1308021, '建筑工程学院', '建筑学', 13),
(1308022, '建筑工程学院', '建筑学', 13),
(1308041, '建筑工程学院', '建筑能源', 13),
(1308042, '建筑工程学院', '建筑能源', 13),
(1309011, '外语学院', '英语', 13),
(1309012, '外语学院', '英语', 13),
(1309021, '外语学院', '日语', 13),
(1309022, '外语学院', '日语', 13),
(1310011, '经济学院', '国际贸易', 13),
(1310012, '经济学院', '国际贸易', 13),
(1310021, '经济学院', '金融学', 13),
(1310022, '经济学院', '金融学', 13),
(1310023, '经济学院', '金融学', 13),
(1310031, '经济学院', '经济学', 13),
(1310032, '经济学院', '经济学', 13),
(1310041, '经济学院', '金融工程', 13),
(1311021, '国际教育学院', '会计', 13),
(1311022, '国际教育学院', '会计', 13),
(1311031, '国际教育学院', '国贸', 13),
(1311032, '国际教育学院', '国贸', 13),
(1312011, '软件学院', '软件', 13),
(1312012, '软件学院', '软件', 13),
(1312013, '软件学院', '软件', 13),
(1312014, '软件学院', '软件', 13),
(1312031, '软件学院', '软件工程', 13),
(1312032, '软件学院', '软件工程', 13),
(1312033, '软件学院', '软件工程', 13),
(1312034, '软件学院', '软件工程', 13),
(1315021, '新能源工程学院', '能源科学', 13),
(1315022, '新能源工程学院', '能源科学', 13);

-- --------------------------------------------------------

--
-- 表的结构 `topic`
--

CREATE TABLE IF NOT EXISTS `topic` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varbinary(60) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0',
  `top_level` int(2) NOT NULL DEFAULT '0',
  `cid` int(11) DEFAULT NULL,
  `pid` int(11) NOT NULL,
  `author_id` varchar(48) NOT NULL DEFAULT '' COMMENT 'user_id',
  PRIMARY KEY (`tid`),
  KEY `cid` (`cid`,`pid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `team_id` int(11) NOT NULL,
  `user_id` varchar(48) NOT NULL DEFAULT '',
  `team_number1` int(9) NOT NULL,
  `team_member1` varchar(10) NOT NULL,
  `team_number2` int(9) DEFAULT NULL,
  `team_member2` varchar(10) DEFAULT NULL,
  `team_number3` int(9) DEFAULT NULL,
  `team_member3` varchar(10) DEFAULT NULL,
  `team_telephone` bigint(100) NOT NULL,
  `freshman_contest` int(11) NOT NULL,
  `submit` int(11) DEFAULT '0',
  `solved` int(11) DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `ip` varchar(20) NOT NULL DEFAULT '',
  `accesstime` datetime DEFAULT NULL,
  `volume` int(11) NOT NULL DEFAULT '1',
  `language` int(11) NOT NULL DEFAULT '1',
  `password` varchar(32) DEFAULT NULL,
  `reg_time` datetime DEFAULT NULL,
  `nick` varchar(100) NOT NULL DEFAULT '',
  `authorizee` varchar(100) NOT NULL DEFAULT '',
  PRIMARY KEY (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `users`
--

INSERT INTO `users` (`team_id`, `user_id`, `team_number1`, `team_member1`, `team_number2`, `team_member2`, `team_number3`, `team_member3`, `team_telephone`, `freshman_contest`, `submit`, `solved`, `defunct`, `ip`, `accesstime`, `volume`, `language`, `password`, `reg_time`, `nick`, `authorizee`) VALUES
(-1, 'admin', 0, '', 0, '', 0, '', 0, 0, 1, 0, 'N', '127.0.0.1', '2013-08-26 13:42:27', 1, 1, '3f5357e4c0e6e7ec78915625e1074eeb', '2013-08-26 13:42:27', 'SUT', 'admin'),
(0, 'lin', 120, '', 0, '', 0, '', 506200331, 0, 0, 0, 'N', '127.0.0.1', '2013-09-11 10:09:17', 1, 1, 'LCuZ5Ks3FfpZSoH80bgcFKbw80o3MTYx', '2013-09-11 10:09:17', 'lin', 'admin'),
(-2, 'v1', 12, '志愿者1', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '1', 'Volunteer'),
(-3, 'v2', 12, '志愿者2', NULL, NULL, NULL, NULL, 139, 0, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '2', 'Volunteer'),
(-4, 'v3', 12, '志愿者3', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '3', 'Volunteer'),
(-5, 'v4', 12, '志愿者4', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '4', 'Volunteer'),
(-6, 'v5', 12, '志愿者5', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '5', 'Volunteer'),
(-7, 'v6', 12, '志愿者6', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '6', 'Volunteer'),
(-8, 'v7', 12, '志愿者7', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, 'f3e10a64d33104b438e2ea20778f1864', NULL, '7', 'Volunteer'),
(-9, 'v8', 12, '志愿者8', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, NULL, NULL, '8', 'Volunteer'),
(-10, 'v9', 12, '志愿者9', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, NULL, NULL, '9', 'Volunteer'),
(-11, 'v10', 12, '志愿者10', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, NULL, NULL, '10', 'Volunteer'),
(-12, 'v11', 12, '志愿者11', NULL, NULL, NULL, NULL, 139, 2, 0, 0, 'N', '', NULL, 1, 1, NULL, NULL, '11', 'Volunteer'),
(5, 'team5', 120405112, '张允禹', 120405133, '赵思雅', 120405113, '宫赫', 18742441012, 0, 13, 7, 'N', '116.2.92.135', '2013-11-12 22:32:25', 1, 1, 'gNtHkL8sSJe9LUXm8Rnmn5frikY4MjI4', '2013-11-12 22:32:25', '一团毛线~', ''),
(1, 'team1', 120405107, '李佳臻', 120406305, '林星辰', 110402105, '王鹏', 13897959151, 0, 9, 7, 'N', '120.201.101.94', '2013-11-12 20:40:24', 1, 1, 'Ki7aISaURJ0lTyBwfns/a9Zb2j8yN2Vi', '2013-11-12 20:40:24', '魔法师', ''),
(2, 'team2', 120406321, '方旭', 120405114, '李腾飞', 110302532, '张强', 13624051733, 0, 10, 7, 'N', '10.16.2.152', '2013-11-12 20:42:21', 1, 1, 'QIeJopOmo0TNwwQRErBpTBhN3ypmNWE1', '2013-11-12 20:42:21', 'Cube AC', ''),
(3, 'team3', 120405122, '向桐', 120405121, '赵旭', 110407111, '王世崇', 15604068977, 0, 14, 7, 'N', '10.16.2.55', '2013-11-12 20:59:48', 1, 1, 'KtcNa/TR5BexCXF7sL/lLZ+iAnwzNmFk', '2013-11-12 20:59:48', 'ACE', ''),
(4, 'team4', 120405108, '王俊鹏', 120405110, '刘述新', 120405118, '唐翔', 13352406330, 0, 10, 4, 'N', '116.2.90.190', '2013-11-12 22:29:58', 1, 1, 'kW/CFKDfCi7+ZM93euUPFlfklO03N2Ji', '2013-11-12 22:29:58', 'AIR-ONE', ''),
(6, 'team6', 130405316, '陈明浩', 130405307, '黄超', 130405309, '江利涛', 18804059558, 1, 18, 8, 'N', '120.201.108.50', '2013-11-13 10:53:01', 1, 1, 'wx/WaDfIXiZR97H1YnZHAtKLGy1lOGVk', '2013-11-13 10:53:01', 'Black ', ''),
(7, 'team7', 120406329, '贠霞', 120406325, '彭婵娟', 120406324, '张沛杰', 18004020650, 0, 21, 3, 'N', '10.38.9.195', '2013-11-13 11:19:52', 1, 1, '4WaPba7JmnTQ5ZI4Ij2GUCjYObdmNjRi', '2013-11-13 11:19:52', 'seven', ''),
(8, 'team8', 0, '', 0, '', 0, '', 0, 0, 0, 0, 'N', '113.225.22.222', '2013-11-13 12:26:36', 1, 1, '21232f297a57a5a743894a0e4a801fc3', '2013-11-13 12:26:36', ' ', ''),
(9, 'team9', 0, '', 0, '', 0, '', 0, 1, 0, 0, 'N', '222.161.201.145', '2013-11-13 12:41:29', 1, 1, '60018bc2e785cee332a4880807cf8e15', '2013-11-13 12:41:29', '', ''),
(10, 'team10', 120407110, '杨强', 120407106, '岳伟峰', 120407119, '范家臣', 18004020591, 0, 22, 2, 'N', '113.232.98.165', '2013-11-13 12:41:47', 1, 1, 'DkEVB3ejirxp4SLzaPlz8tzHJBRiNDYy', '2013-11-13 12:41:47', 'WE', ''),
(11, 'team11', 120407107, '贾世峰', 120407127, '张星魁', 120407130, '曹文波', 18004021198, 0, 54, 1, 'N', '113.232.98.165', '2013-11-13 12:52:46', 1, 1, 'Q4cRYkseZrpuoHmvqGCNjQp30/sxYTc3', '2013-11-13 12:52:46', 'M20', ''),
(12, 'team12', 130701208, '周意伟', 131103131, '林原', 131203117, '杨宇锋', 13324055332, 1, 23, 5, 'N', '123.150.182.157', '2013-11-13 13:01:55', 1, 1, '3bJ74UQcMChDimUX8OuafwPfg+NlODJj', '2013-11-13 13:01:55', 'ABC', ''),
(13, 'team13', 121201102, '刘晟桥', 0, '', 0, '', 18904047784, 0, 0, 0, 'N', '120.201.108.107', '2013-11-13 15:40:00', 1, 1, 'uHiTc8ThI4bqOYS+vijnVD6ePZtjOWI5', '2013-11-13 15:40:00', 'NICEPL', ''),
(14, 'team14', 111201107, '闵瑞', 111201115, '罗磊', 121201315, '张立伟', 15041292870, 0, 19, 7, 'N', '202.199.97.5', '2013-11-13 16:11:23', 1, 1, 'PMZr4cuBBNLSHR47tSTyombE0vQxMTgx', '2013-11-13 16:11:23', '好名都让xx起了', ''),
(15, 'team15', 131201233, '付杰', 131201207, '沈逸飞', 131203108, '刘政鑫', 18804052424, 0, 15, 5, 'N', '202.199.97.27', '2013-11-13 18:10:46', 1, 1, 'wiJPrVXmaSRiBTEqFsvmG1UjMWczNjJl', '2013-11-13 18:10:46', 'Ambition', ''),
(16, 'team16', 110405113, '关昊天', 110405118, '韩伟扬', 110401433, '杜昕阳', 13940174871, 0, 23, 7, 'N', '113.225.193.23', '2013-11-13 18:10:52', 1, 1, '847dbf67e9cb8a32599a06584e6a9af7', '2013-11-13 18:10:52', '小星星', ''),
(17, 'team17', 110405107, '王春辉', 110405114, '石怀星', 110405232, '李婉君', 15940107037, 0, 31, 7, 'N', '113.225.193.23', '2013-11-13 18:14:26', 1, 1, '7QuDt1XNgD3Kr7W1nVb04+js8N82ZjIz', '2013-11-13 18:14:26', 'orzo', ''),
(18, 'team18', 131203123, '李德利', 131203423, '荀玉龙', 121201426, '王盛昱', 18804033432, 0, 27, 6, 'N', '202.199.97.32', '2013-11-13 18:39:20', 1, 1, '8yvQ5qMnOFGOR5dilzaxJl1dbaA5NWE4', '2013-11-13 18:39:20', 'Low-key', ''),
(19, 'team19', 130101824, '徐浩', 131203411, '迟文强', 130101822, '朱一帆', 13322480902, 1, 17, 4, 'N', '123.150.183.173', '2013-11-13 19:18:17', 1, 1, 'CJclQxi5YDfW1btpkYZmoXJMuTMxNjU1', '2013-11-13 19:18:17', '圣骑士', ''),
(20, 'team20', 131201108, '王宇', 131203122, '李连杰', 131201214, '车震雷', 18641188374, 0, 23, 3, 'N', '202.199.97.25', '2013-11-13 19:30:43', 1, 1, 'Vkgn0ogY6TQqmHBf0FD13fhWXM1kYTFl', '2013-11-13 19:30:43', '神XX', ''),
(21, 'team21', 110404310, '张玉', 110402233, '李林艳', 110402232, '高冰', 18004022630, 0, 0, 0, 'N', '113.232.108.145', '2013-11-13 23:17:45', 1, 1, '8xleZ75Z3pkeKv7UPwvVB2jmBU1hYjlh', '2013-11-13 23:17:45', 'kimi', ''),
(22, 'team22', 130503202, '张广宇', 130503207, '戴林呈', 0, '', 18804093313, 1, 0, 0, 'N', '113.225.20.241', '2013-11-13 23:52:44', 1, 1, '3ew6JhJHnpwEmTwfTveAx/3/4aU5Nzdk', '2013-11-13 23:52:44', 'God-Like', ''),
(70, 'team70', 130405120, '朱志强', 130405128, '张宏玉', 130405101, '高永旺', 18624323501, 1, 24, 7, 'N', '175.167.144.56', '2013-11-19 10:15:38', 1, 1, 'bxNgdSP/M71cMioI9rI5B5AyrCdkNWIz', '2013-11-19 10:15:38', 'wolf', ''),
(23, 'team23', 120401218, '李华', 120401228, '刘希玉', 120401231, '曹蓓', 18904040423, 0, 30, 6, 'N', '113.232.107.175', '2013-11-14 14:03:56', 1, 1, '5BlpyD8gFpbJljwE+Z4CImNoc6Y2ZjE3', '2013-11-14 14:03:56', '重在参与', ''),
(24, 'team24', 131502208, '张劲松', 131502218, '李德正', 131502105, '邱玉成', 18641865945, 1, 28, 5, 'N', '10.16.1.26', '2013-11-14 15:08:33', 1, 1, 'e8BBUhelgfKdUFGfvJrzjn9AMoYyOGQ4', '2013-11-14 15:08:33', '决队', ''),
(25, 'team25', 121201211, '牟思文', 121201212, '孙长文', 121201222, '燕鑫', 18640076495, 0, 0, 0, 'N', '222.33.15.35', '2013-11-14 15:22:43', 1, 1, '9+rif4z4alPYJSqExgQGx7j5a9k4ZmE5', '2013-11-14 15:22:43', 'HBpK', ''),
(26, 'team26', 120404124, '蔡欣彤', 120404219, '洪哲', 120404227, '代文多', 18004020705, 0, 2, 0, 'N', '10.38.12.243', '2013-11-14 19:12:47', 1, 1, 'v6X84Y8ZWXBe7ZdQoTzDoheVWeAxMzBh', '2013-11-14 19:12:47', '众志成城', ''),
(27, 'team27', 0, '', 0, '', 0, '', 0, 1, 0, 0, 'N', '113.232.111.185', '2013-11-14 20:38:25', 1, 1, 'd41d8cd98f00b204e9800998ecf8427e', '2013-11-14 20:38:25', '', ''),
(28, 'team28', 131201103, '刘大川', 131201209, '阮浩然', 131203404, '李钊合', 18842442824, 0, 15, 6, 'N', '202.199.97.28', '2013-11-14 20:42:02', 1, 1, '2UeXecEPIcqTz+N4Ih3bGwbPvKxkY2Jk', '2013-11-14 20:42:02', '麻麻说名字一定要起得很长很长', ''),
(29, 'team29', 110405214, '宋宝东', 110405218, '郭峰  ', 110401427, '刘娜', 13709815997, 0, 10, 6, 'N', '113.232.97.213', '2013-11-14 20:51:32', 1, 1, 'ftHiUs/Mu9ExWoHFoffyr9OID5NlMzk4', '2013-11-14 20:51:32', '输入中', ''),
(30, 'team30', 120402217, '李光涛', 120402226, '王茜', 120405221, '王伟康', 18604936436, 0, 18, 1, 'N', '113.232.111.185', '2013-11-14 20:58:08', 1, 1, 'jx0F7SCaGSTojJYy766zxhYZY2szNDk5', '2013-11-14 20:58:08', '梦想号', ''),
(31, 'team31', 110403223, '杨瑞鹏', 110403218, '唐振辉', 0, '', 18904046178, 0, 24, 5, 'N', '113.232.100.146', '2013-11-14 21:03:59', 1, 1, '+2PnS5Tm5npYOSJRK6p7Vrof8oVmZDA4', '2013-11-14 21:03:59', '时光轴', ''),
(32, 'team32', 130405218, '李永发', 130405217, '陈天剑', 130405215, '姚鹏', 18904010296, 1, 29, 5, 'N', '222.33.10.64', '2013-11-14 21:14:43', 1, 1, 'cRRb66TFSYRgMzYuyMdNLMaYDBs0ZjQy', '2013-11-14 21:14:43', '三剑客', ''),
(33, 'team33', 110405111, '李博', 110407128, '毛艳泽', 110405211, '张云鹏', 18904044511, 0, 23, 8, 'N', '113.232.97.213', '2013-11-14 21:49:20', 1, 1, 'Zp0aUblraLZVto5wBTOcxR+5w3U0ODhk', '2013-11-14 21:49:20', 'Just For Free', ''),
(34, 'team34', 131201107, '袁驰', 131201104, '肇恒泰', 131201106, '许肸', 18609839300, 1, 31, 5, 'N', '222.33.12.231', '2013-11-14 22:22:06', 1, 1, 'uV+6+bRlGmeZmDxVhNs5fI9FIio4ODU3', '2013-11-14 22:22:06', 'ih8sn0w', ''),
(73, 'team73', 131203326, '张文浩', 131203421, '杨博', 121203325, '程靖懿', 18804031210, 1, 50, 3, 'N', '123.245.90.111', '2013-11-19 17:13:45', 1, 1, '6yCb8ukIyZL0bmTUX48lt1OLbBM5ZGJi', '2013-11-19 17:13:45', '不想当厨子的司机不是好裁缝', ''),
(35, 'team35', 100405214, '秦思源', 100405201, '樊毅伟', 100405204, '王珏鑫', 18614012270, 0, 29, 8, 'N', '114.247.50.2', '2013-11-15 10:57:13', 1, 1, '6a5e61b5e97c696a8ed7aea6aa418260', '2013-11-15 10:57:13', '*Snow', ''),
(36, 'team36', 110401408, '李昱辉', 110401405, '秦闯', 110405234, '张莹莹', 18640135281, 0, 26, 6, 'N', '113.225.31.64', '2013-11-15 11:04:42', 1, 1, 'z07y/Qqib6AR2j1/zZPeAP+yaQo0MGJl', '2013-11-15 11:04:42', 'Vine', ''),
(37, 'team37', 130405308, '高帆', 130405306, '白黎明', 0, '', 13591690837, 1, 0, 0, 'N', '120.201.108.63', '2013-11-15 13:35:50', 1, 1, 'q64CwTxGYq9J3CLyvaji66JSU8tkOTg0', '2013-11-15 13:35:50', '学霸', ''),
(38, 'team38', 130405206, '唐敬尧', 130405223, '胡伟豪', 130405209, '牛犇', 18042625276, 1, 21, 8, 'N', '', NULL, 1, 1, 'CjHm4vjylBYw6E5RyL04hGZh83tkYzRj', NULL, '闷油瓶', ''),
(47, 'team47', 110401102, '吕超', 110405227, '郎言书', 110405233, '许婷婷', 15382096607, 0, 5, 3, 'N', '116.2.88.247', '2013-11-17 09:49:03', 1, 1, 'LMZphAlszgIDF31P0UM2YZRwzHE5Njgz', '2013-11-17 09:49:03', '龙腾', ''),
(39, 'team39', 110403217, '王东生', 110403220, '牛刚刚', 110403129, '卢爽', 13555875900, 0, 29, 6, 'N', '113.225.16.68', '2013-11-16 11:42:11', 1, 1, 'JAuL0uGIMpNveQnrCFmi82N9VSs0MDU4', '2013-11-16 11:42:11', '诺亚方舟', ''),
(40, 'team40', 110403222, '唐涛', 110403125, '薛冰梅', 110403119, '孔令玉', 18904041224, 0, 16, 6, 'N', '113.225.18.243', '2013-11-16 11:52:49', 1, 1, '7kq0h/GKGRZmNu82GT3yaTu2cmQwYjhj', '2013-11-16 11:52:49', 'TXK', ''),
(41, 'team41', 130405220, '吴令', 120405202, '邵凯', 0, '', 13322487930, 1, 5, 1, 'N', '218.25.78.102', '2013-11-16 12:47:26', 1, 1, 'msaqksGrNivdgK/+4K3QlyZ9HgE2NTc1', '2013-11-16 12:47:26', 'cqb', ''),
(42, 'team42', 110401428, '陈逢', 110403206, '李晓旭', 110403205, '张昱晨', 15140211872, 0, 22, 6, 'N', '113.225.19.65', '2013-11-16 15:14:53', 1, 1, 'FBKD8h7kr5d9WUre9Syab9ZadrdhZDMz', '2013-11-16 15:14:53', 'Foamy', ''),
(43, 'team43', 130405203, '李怀斌', 130405103, '申东明', 130405119, '唐浩淋', 14704043900, 1, 31, 5, 'N', '113.232.176.78', '2013-11-16 17:09:05', 1, 1, 'zmudNPMrA9h53dJwavK+x7WLR8sxZTgy', '2013-11-16 17:09:05', 'Think Different', ''),
(44, 'team44', 110405212, '王守杰', 110403216, '刘学', 110405226, '常娜', 15804026955, 0, 14, 7, 'N', '116.2.89.155', '2013-11-16 17:19:00', 1, 1, 'ZJCPPs9ix2lArnuGEblyOjL5eKEwMDU1', '2013-11-16 17:19:00', 'Key', ''),
(45, 'team45', 130402210, '张维', 0, '', 0, '', 15940202019, 1, 0, 0, 'N', '120.201.108.95', '2013-11-16 17:20:20', 1, 1, 'PLJiHig3FC0IT825Zj9VrD156bNmMGRk', '2013-11-16 17:20:20', '↓218', ''),
(46, 'team46', 120407125, '单智光', 120407129, '赵展鹏', 120407118, '李炎昊', 18640135657, 0, 25, 4, 'N', '113.232.103.253', '2013-11-16 21:36:30', 1, 1, 'zavV8zufV8zURVnvB8AqlsfdfudlNjk2', '2013-11-16 21:36:30', '光辉号', ''),
(48, 'team48', 130405303, '王骁', 130405304, '王亚君', 130405319, '赵欢', 15940559545, 1, 28, 7, 'N', '61.189.39.34', '2013-11-17 09:52:13', 1, 1, 'VR/hvZvuP+pye/MAVguk/PVlGkVhMjNj', '2013-11-17 09:52:13', '1412', ''),
(49, 'team49', 130405212, '殷成文', 130405228, '傅冠儒', 130405204, '韩帅', 18804077889, 1, 14, 8, 'N', '123.150.182.150', '2013-11-17 17:16:39', 1, 1, '2bKIZMhlejFOEwxnH58ccl0FFAtjN2Vl', '2013-11-17 17:16:39', '无敌小猪', ''),
(50, 'team50', 130405094, '李东', 0, '', 0, '', 18941365073, 0, 0, 0, 'N', '113.231.221.176', '2013-11-17 17:50:14', 1, 1, '4e2fb4e447f109085ee8ce0ffc57751d', '2013-11-17 17:50:14', '*一声叹息', ''),
(51, 'team51', 131203116, '魏卿', 131203120, '李森', 0, '', 13941622615, 1, 41, 7, 'N', '222.33.15.78', '2013-11-17 20:55:15', 1, 1, 'BokimIN/J9KCy152jiw71WSFeoRjYzdm', '2013-11-17 20:55:15', '为你而来', ''),
(52, 'team52', 120406330, '张宇琪', 120405235, '吴晓然', 0, '', 18304095428, 0, 12, 7, 'N', '120.201.105.176', '2013-11-17 22:11:26', 1, 1, 'Jd2GkWjzbemSWqVKn0IhjBLzeGE1Zjc3', '2013-11-17 22:11:26', '奔腾的羊驼', ''),
(53, 'team53', 130405115, '陈栋', 130405118, '宋强', 130405108, '宋月官', 15940566857, 1, 32, 6, 'N', '222.33.15.171', '2013-11-17 23:09:44', 1, 1, 'npAOPpAXC52ffF22mCsKt04zATk0NzQ0', '2013-11-17 23:09:44', '凶猛的裤衩', ''),
(54, 'team54', 110402124, '吕佳', 110402131, '韩丽颖', 110405303, '张佳境', 15940078075, 0, 15, 7, 'N', '116.2.92.48', '2013-11-18 11:43:37', 1, 1, 'PoclOdsXgCrxMCSzfjNTUvAR3KpkMzA1', '2013-11-18 11:43:37', 'THE FOX', ''),
(55, 'team55', 110404219, '张超', 110404232, '桑迪', 110404201, '蔡保振', 15840221043, 0, 18, 2, 'N', '10.16.20.134', '2013-11-18 15:53:22', 1, 1, 'gq0MPvUtJy8ojhoadJTPLx/T6yEzMjc3', '2013-11-18 15:53:22', 'harvester ', ''),
(56, 'team56', 131203325, '于鸿跃', 131203304, '孙僖泽', 0, '', 13324017179, 1, 22, 6, 'N', '60.10.69.66', '2013-11-18 20:47:10', 1, 1, 'nNRuMtHzJhwgRyGGb8Q7us4onxEwZmFh', '2013-11-18 20:47:10', '筷子', ''),
(57, 'team57', 110405205, '刘昊忞', 110402225, '吕笑晨', 110405209, '崔文龙', 18740063293, 0, 15, 3, 'N', '116.2.83.162', '2013-11-18 20:59:39', 1, 1, 'lFXAPwsiX5CVU3ohndCDriopaatkMjA5', '2013-11-18 20:59:39', 'Godlike', ''),
(58, 'team58', 110402133, '车珍', 110402102, '柴鑫', 110402229, '李佳玲', 15140058531, 0, 12, 7, 'N', '113.232.107.90', '2013-11-18 22:17:53', 1, 1, '4eo2exuVLE6Ec07xbLMRC5WVqjZkODU5', '2013-11-18 22:17:53', '低头微笑', ''),
(59, 'team59', 120404126, '李颖', 120404121, '刘晓楠', 120404225, '高瑛澜', 15840456952, 0, 10, 1, 'N', '120.201.105.219', '2013-11-18 22:49:35', 1, 1, 'Z6VQsHw8Y/Hz7RRn8THD1JSL0i5kZDc0', '2013-11-18 22:49:35', '时代姐妹花', ''),
(60, 'team60', 110405213, '石佳', 110405222, '安彬', 110405201, '戴金杰', 18704005460, 0, 16, 2, 'N', '113.225.24.168', '2013-11-18 22:53:32', 1, 1, 'r2AiNn5xbCggpUISWjA55RSqUp5jOTA5', '2013-11-18 22:53:32', 'King', ''),
(61, 'team61', 120404130, '焦新宇', 120404116, '李国胜', 0, '', 18904040198, 0, 0, 0, 'N', '120.201.105.219', '2013-11-18 22:56:47', 1, 1, 'nq4395vucW4gWB8YyU1HPLecxoRhZmVk', '2013-11-18 22:56:47', '12345', ''),
(62, 'team62', 0, '', 0, '', 0, '', 0, 1, 0, 0, 'N', '60.10.69.66', '2013-11-18 22:59:14', 1, 1, '60018bc2e785cee332a4880807cf8e15', '2013-11-18 22:59:14', '', ''),
(63, 'team63', 130405111, '苏浩', 130405104, '柴仄平', 130405109, '吴金泽', 18804059909, 1, 28, 8, 'N', '222.33.13.135', '2013-11-18 23:06:47', 1, 1, '/J04wW7Duka3mcSmrJvHXyi3H+04Njcw', '2013-11-18 23:06:47', '还有谁', ''),
(64, 'team64', 131203401, '王鹏', 131203321, '付雷', 131203307, '武庆斌', 18804030210, 1, 28, 7, 'N', '222.33.11.179', '2013-11-18 23:36:29', 1, 1, 'yjL2KSa1EwNz4NsE81UypdXTWw9lMGJm', '2013-11-18 23:36:29', 'FLY~', ''),
(65, 'team65', 131203119, '王一凡', 131203137, '王瑞欣', 131203318, '马晓亮', 18804054849, 1, 0, 0, 'N', '222.33.9.38', '2013-11-19 00:05:36', 1, 1, '+u8gujyZA86D1gxBJMh/Uek0HTs5NGEy', '2013-11-19 00:05:36', '一帆风顺', ''),
(66, 'team66', 130405334, '魏碧晴', 130405318, '曾彬利', 130405314, '刘士开', 18804074515, 1, 28, 4, 'N', '111.30.132.212', '2013-11-19 09:08:26', 1, 1, 'JjRj3/2Q+ytyqkuK1YNw/K7Wt6FhNzEw', '2013-11-19 09:08:26', 'wlz', ''),
(67, 'team67', 130405105, '王泽宇', 130405114, '王雪冬', 130405116, '唐选', 15998597152, 1, 20, 7, 'N', '202.199.106.105', '2013-11-19 09:15:26', 1, 1, '08SpxoMHJlcg1FH+G+2cXjda+Fo1NGM0', '2013-11-19 09:15:26', '选泽冬天', ''),
(72, 'team72', 110403225, '李徐意', 110403131, '何璐瑶', 110403121, '冯崔宇', 13904029126, 0, 6, 0, 'N', '10.38.12.23', '2013-11-19 15:48:28', 1, 1, 'IJ5ouu2nvGhZxSuQuRdl2sdCUqcwMmY0', '2013-11-19 15:48:28', 'Y', ''),
(69, 'team69', 130405123, '王泽昆', 130405122, '戴源', 130405129, '刘阳', 18240022066, 1, 23, 7, 'N', '202.199.106.119', '2013-11-19 09:24:28', 1, 1, 'nHybh44JErSt11C+Bu051I5Vul41MzAy', '2013-11-19 09:24:28', 'turtle927', ''),
(71, 'team71', 110404205, '宋丰仕', 110404310, '张玉', 110404319, '王美婷', 13998150901, 0, 35, 3, 'N', '10.16.5.67', '2013-11-19 12:08:54', 1, 1, 'cfxlw7s1CCK8RibFg7M6Lvv6zZVlOWUw', '2013-11-19 12:08:54', 'bigbang', ''),
(74, 'team74', 130405208, '王立维', 130405221, '雷宇', 130405216, '范明哲', 18804051889, 1, 20, 2, 'N', '111.30.131.199', '2013-11-19 18:34:21', 1, 1, 'AxQdE5tMR8rnuPvw8Mx3DlebgBY4NTM0', '2013-11-19 18:34:21', '明日之星', ''),
(75, 'team75', 130405321, '闫建军', 130405311, '姜旭民', 130405330, '教馨月', 13322488163, 1, 19, 6, 'N', '111.30.132.212', '2013-11-19 19:33:04', 1, 1, 'fzGXPLb52J0wF/KlWDapxANQdGgwMzFm', '2013-11-19 19:33:04', 'JYJ', ''),
(76, 'team76', 130405205, '马源峰', 130405229, '刘艳娟', 0, '', 15524540248, 1, 33, 8, 'N', '175.167.136.22', '2013-11-19 19:53:01', 1, 1, 'XDJ988rzUakKGBJIan7mICNl+OkzMzZj', '2013-11-19 19:53:01', 'BBQ', ''),
(77, 'team77', 131201226, '郑诚', 131201201, '高晓', 131201212, '尚祖隆', 13322496710, 1, 23, 7, 'N', '61.189.39.226', '2013-11-19 20:34:40', 1, 1, '6/uXOemDw9Hn+FieKIU6j+SNeZowMGRi', '2013-11-19 20:34:40', '晓组织', ''),
(78, 'team78', 131203210, '张俊旭', 131203201, '牛振宇', 131203208, '靳永超', 18804058916, 1, 27, 7, 'N', '222.33.17.160', '2013-11-19 20:34:47', 1, 1, 'ZVFTL139nxPqpN1VAQueL6G9wxs5NGNj', '2013-11-19 20:34:47', '梦之队', ''),
(79, 'team79', 120405217, '朱越', 120405211, '朱鹤', 120405203, '马强', 18004021119, 0, 43, 8, 'N', '123.247.240.33', '2013-11-19 20:45:07', 1, 1, 'ir8OZsZLljAGe4ebil+yDxTd9sNlNGFm', '2013-11-19 20:45:07', '未命名', ''),
(80, 'team80', 111201409, '李嘉懿', 111201428, '杨金花', 0, '', 15566034370, 0, 0, 0, 'N', '222.33.10.204', '2013-11-19 21:09:45', 1, 1, 'mV9VKGZg5Poj3zfbYQDkh1pKWyFkMzMw', '2013-11-19 21:09:45', '123', ''),
(81, 'team81', 131203313, '刘玉峰', 131203306, '佟禹呈', 131203312, '李世东', 18804030703, 1, 0, 0, 'N', '222.161.201.150', '2013-11-19 21:15:15', 1, 1, 'El7HC71MeLHexzYtgbYUm60t+lc0OGI2', '2013-11-19 21:15:15', '愤怒的小鸟', ''),
(82, 'team82', 121201319, '姜文强', 131203431, '冷梅', 121201307, '姜祥林', 18309848490, 0, 44, 2, 'N', '222.161.205.35', '2013-11-19 22:15:56', 1, 1, 'V33xpcv7PfYLS1sKTi08bscbVtM2NjEy', '2013-11-19 22:15:56', 'ORACLE', ''),
(83, 'team83', 120302508, '宁伟', 120302522, '李康敏', 120301523, '王自强', 18904041634, 0, 26, 8, 'N', '219.148.202.65', '2013-11-19 22:45:13', 1, 1, '5+8Uq2r3MU300cLuasflp8igDFAzYjli', '2013-11-19 22:45:13', '队名', ''),
(84, 'team84', 110402119, '辛培家', 110402121, '司永威', 110402201, '王利冬', 13516090816, 0, 15, 7, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, '0+C1VbRxxkDe+sw+r3oxzzTh53NmMDIx', '2013-11-19 22:51:37', 'XSW', ''),
(-100, 'testold', 0, '', NULL, NULL, NULL, NULL, 0, 0, 0, 0, 'N', '', NULL, 1, 1, NULL, NULL, 'testold', ''),
(85, 'team85', 121201411, '赵智慧', 121201404, '佟年', 121201419, '王立斌', 18304094954, 0, 8, 2, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'YLsu7067/xxbavtfFC739IU676AxMmNk', '2013-11-19 22:51:37', 'ZZT', ''),
(86, 'team86', 121203223, '王超', 121203209, '杜宁博', 121203217, '张建', 18645502888, 0, 0, 0, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'NqOi4Ws5eb5MlVs6t4Zm7Rurp5pmNzQ1', '2013-11-19 22:51:37', 'ACM ONLINE', ''),
(87, 'team87', 121203216, '李子涵', 121203208, '李松威', 130403128, '董庆', 18640452363, 0, 0, 0, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'MzRYsEiZrsSpXhX26pn6rK83TUhjODhl', '2013-11-19 22:51:37', 'FOCUS', ''),
(88, 'team88', 121203203, '梁宇峰', 121203221, '沈军禹', 121203227, '张溪桐', 18904047610, 0, 5, 1, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'R88qpBIMZnheC3x7zoSz3I9hUxczZjI1', '2013-11-19 22:51:37', '桐峰禹', ''),
(89, 'team89', 0, '', 0, '', 0, '', 0, 0, 16, 7, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'lV4acyr4HTOJA0qUIR3uWAvEJAU1YWYx', '2013-11-19 22:51:37', '*Syuct1', ''),
(90, 'team90', 0, '', 0, '', 0, '', 0, 0, 12, 4, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'NEot0z8qGbE+9hwwCUfov6Oj4Ms0ODVm', '2013-11-19 22:51:37', '*Syuct2', ''),
(91, 'team91', 0, '', 0, '', 0, '', 0, 0, 18, 5, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'WZHI4j5a4tiVCoX0sFv6dfqmzPc2MDQz', '2013-11-19 22:51:37', '*Syuct3', ''),
(92, 'team92', 0, '', 0, '', 0, '', 0, 0, 20, 4, 'N', '113.232.102.185', '2013-11-19 22:51:37', 1, 1, 'Kbr+s2/4fCS1AxyMJhdFO684FRc4ZDBh', '2013-11-19 22:51:37', '*Syuct4', ''),
(93, 'team93', 120406333, '练习册', 120406332, '练习', 0, '', 13940022111, 0, 0, 0, 'N', '127.0.0.1', '2014-01-25 21:02:04', 1, 1, '3f5357e4c0e6e7ec78915625e1074eeb', '2014-01-25 21:02:04', '鲁鲁修', '');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
